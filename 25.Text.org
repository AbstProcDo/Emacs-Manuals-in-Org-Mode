#+TITLE: Text
* 25) Commands for Human Languages

This chapter describes Emacs commands that act on text, by which we mean sequences of characters in a human language (as opposed to, say, a computer programming language). These commands act in ways that take into account the syntactic and stylistic conventions of human languages: conventions involving words, sentences, paragraphs, and capital letters. There are also commands for filling, which means rearranging the lines of a paragraph to be approximately equal in length. These commands, while intended primarily for editing text, are also often useful for editing programs.

Emacs has several major modes for editing human-language text. If the file contains ordinary text, use Text mode, which customizes Emacs in small ways for the syntactic conventions of text. Outline mode provides special commands for operating on text with an outline structure. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]].

Org mode extends Outline mode and turns Emacs into a full-fledged organizer: you can manage TODO lists, store notes and publish them in many formats. See the Org Info manual, which is distributed with Emacs.

Emacs has other major modes for text which contains embedded commands, such as TeX and LaTeX (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]]); HTML and SGML (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#HTML-Mode][HTML Mode]]); XML (see the nXML mode Info manual, which is distributed with Emacs); and Groff and Nroff (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Nroff-Mode][Nroff Mode]]).

If you need to edit ASCII art pictures made out of text characters, use Picture mode, a special major mode for editing such pictures. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Picture-Mode][Picture Mode]].

* 25.1 Words
    :PROPERTIES:
    :CUSTOM_ID: words
    :END:

Emacs defines several commands for moving over or operating on words:

- M-f

  Move forward over a word (=forward-word=).

- M-b

  Move backward over a word (=backward-word=).

- M-d

  Kill up to the end of a word (=kill-word=).

- M-

  Kill back to the beginning of a word (=backward-kill-word=).

- M-@

  Set mark at the end of the next word (=mark-word=).

- M-t

  Transpose two words or drag a word across others (=transpose-words=).

Notice how these keys form a series that parallels the character-based C-f, C-b, C-d, and C-t. M-@ is cognate to C-@, which is an alias for C-.

The commands M-f (=forward-word=) and M-b (=backward-word=) move forward and backward over words. These

#+BEGIN_HTML
  <Meta>
#+END_HTML

-based key sequences are analogous to the key sequences C-f and C-b, which move over single characters. The analogy extends to numeric arguments, which serve as repeat counts. M-f with a negative argument moves backward, and M-b with a negative argument moves forward. Forward motion stops right after the last letter of the word, while backward motion stops right before the first letter.

M-d (=kill-word=) kills the word after point. To be precise, it kills everything from point to the place M-f would move to. Thus, if point is in the middle of a word, M-d kills just the part after point. If some punctuation comes between point and the next word, it is killed along with the word. (If you wish to kill only the next word but not the punctuation before it, simply do M-f to get the end, and kill the word backwards with M-.) M-d takes arguments just like M-f.

M- (=backward-kill-word=) kills the word before point. It kills everything from point back to where M-b would move to. For instance, if point is after the space in 'FOO, BAR', it kills 'FOO,'. If you wish to kill just 'FOO', and not the comma and the space, use M-b M-d instead of M-.

M-t (=transpose-words=) exchanges the word before or containing point with the following word. The delimiter characters between the words do not move. For example, 'FOO, BAR' transposes into 'BAR, FOO' rather than 'BAR FOO,'. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Transpose][Transpose]], for more on transposition.

To operate on words with an operation which acts on the region, use the command M-@ (=mark-word=). This command sets the mark where M-f would move to. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Marking-Objects][Marking Objects]], for more information about this command.

The word commands' understanding of word boundaries is controlled by the syntax table. Any character can, for example, be declared to be a word delimiter. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables][Syntax Tables]].

In addition, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Position-Info][Position Info]] for the M-= (=count-words-region=) and M-x count-words commands, which count and report the number of words in the region or buffer.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Paragraphs][Paragraphs]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Words][Words]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.2 Sentences
    :PROPERTIES:
    :CUSTOM_ID: sentences
    :END:

The Emacs commands for manipulating sentences and paragraphs are mostly on Meta keys, like the word-handling commands.

- M-a

  Move back to the beginning of the sentence (=backward-sentence=).

- M-e

  Move forward to the end of the sentence (=forward-sentence=).

- M-k

  Kill forward to the end of the sentence (=kill-sentence=).

- C-x

  Kill back to the beginning of the sentence (=backward-kill-sentence=).

  The commands M-a (=backward-sentence=) and M-e (=forward-sentence=) move to the beginning and end of the current sentence, respectively. Their bindings were chosen to resemble C-a and C-e, which move to the beginning and end of a line. Unlike them, M-a and M-e move over successive sentences if repeated.

Moving backward over a sentence places point just before the first character of the sentence; moving forward places point right after the punctuation that ends the sentence. Neither one moves over the whitespace at the sentence boundary.

Just as C-a and C-e have a kill command, C-k, to go with them, M-a and M-e have a corresponding kill command: M-k (=kill-sentence=) kills from point to the end of the sentence. With a positive numeric argument n, it kills the next n sentences; with a negative argument −n, it kills back to the beginning of the nth preceding sentence.

The C-x (=backward-kill-sentence=) kills back to the beginning of a sentence.

The sentence commands assume that you follow the American typist's convention of putting two spaces at the end of a sentence. That is, a sentence ends wherever there is a '.', '?' or '!' followed by the end of a line or two spaces, with any number of ')', ']', ‘'', or '"' characters allowed in between. A sentence also begins or ends wherever a paragraph begins or ends. It is useful to follow this convention, because it allows the Emacs sentence commands to distinguish between periods that end a sentence and periods that indicate abbreviations.

If you want to use just one space between sentences, you can set the variable =sentence-end-double-space= to =nil= to make the sentence commands stop for single spaces. However, this has a drawback: there is no way to distinguish between periods that end sentences and those that indicate abbreviations. For convenient and reliable editing, we therefore recommend you follow the two-space convention. The variable =sentence-end-double-space= also affects filling (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]]).

The variable =sentence-end= controls how to recognize the end of a sentence. If non-=nil=, its value should be a regular expression, which is used to match the last few characters of a sentence, together with the whitespace following the sentence (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). If the value is =nil=, the default, then Emacs computes sentence ends according to various criteria such as the value of =sentence-end-double-space=.

Some languages, such as Thai, do not use periods to indicate the end of a sentence. Set the variable =sentence-end-without-period= to =t= in such cases.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Pages][Pages]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sentences][Sentences]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.3 Paragraphs
    :PROPERTIES:
    :CUSTOM_ID: paragraphs
    :END:

The Emacs commands for manipulating paragraphs are also on Meta keys.

- M-{

  Move back to previous paragraph beginning (=backward-paragraph=).

- M-}

  Move forward to next paragraph end (=forward-paragraph=).

- M-h

  Put point and mark around this or next paragraph (=mark-paragraph=).

  M-{ (=backward-paragraph=) moves to the beginning of the current or previous paragraph, depending on where point is when the command is invoked (see below for the definition of a paragraph). M-} (=forward-paragraph=) similarly moves to the end of the current or next paragraph. If there is a blank line before the paragraph, M-{ moves to the blank line.

  When you wish to operate on a paragraph, type M-h (=mark-paragraph=) to set the region around it. For example, M-h C-w kills the paragraph around or after point. M-h puts point at the beginning and mark at the end of the paragraph point was in. If point is between paragraphs (in a run of blank lines, or at a boundary), M-h sets the region around the paragraph following point. If there are blank lines preceding the first line of the paragraph, one of these blank lines is included in the region. If the region is already active, the command sets the mark without changing point, and each subsequent M-h further advances the mark by one paragraph.

The definition of a paragraph depends on the major mode. In Fundamental mode, as well as Text mode and related modes, a paragraph is separated from neighboring paragraphs by one or more blank lines---lines that are either empty, or consist solely of space, tab and/or formfeed characters. In programming language modes, paragraphs are usually defined in a similar way, so that you can use the paragraph commands even though there are no paragraphs as such in a program.

Note that an indented line is /not/ itself a paragraph break in Text mode. If you want indented lines to separate paragraphs, use Paragraph-Indent Text mode instead. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Mode][Text Mode]].

If you set a fill prefix, then paragraphs are delimited by all lines which don't start with the fill prefix. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]].

The precise definition of a paragraph boundary is controlled by the variables =paragraph-separate= and =paragraph-start=. The value of =paragraph-start= is a regular expression that should match lines that either start or separate paragraphs (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). The value of =paragraph-separate= is another regular expression that should match lines that separate paragraphs without being part of any paragraph (for example, blank lines). Lines that start a new paragraph and are contained in it must match only =paragraph-start=, not =paragraph-separate=. For example, in Fundamental mode, =paragraph-start= is ="\f\\|[ \t]*$"=, and =paragraph-separate= is ="[ \t\f]*$"=.

Note that =paragraph-start= and =paragraph-separate= are matched against the text at the left margin, which is not necessarily the beginning of the line, so these regexps should not use '\^' as an anchor, to ensure that the paragraph functions will work equally within a region of text indented by a margin setting.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Quotation-Marks][Quotation Marks]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Paragraphs][Paragraphs]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.4 Pages
    :PROPERTIES:
    :CUSTOM_ID: pages
    :END:

Within some text files, text is divided into pages delimited by the formfeed character (ASCII code 12, also denoted as 'control-L'), which is displayed in Emacs as the escape sequence '\^L' (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]]). Traditionally, when such text files are printed to hardcopy, each formfeed character forces a page break. Most Emacs commands treat it just like any other character, so you can insert it with C-q C-l, delete it with , etc. In addition, Emacs provides commands to move over pages and operate on them.

- M-x what-page

  Display the page number of point, and the line number within that page.

- C-x [

  Move point to previous page boundary (=backward-page=).

- C-x ]

  Move point to next page boundary (=forward-page=).

- C-x C-p

  Put point and mark around this page (or another page) (=mark-page=).

- C-x l

  Count the lines in this page (=count-lines-page=).

  M-x what-page counts pages from the beginning of the file, and counts lines within the page, showing both numbers in the echo area.

  The C-x [ (=backward-page=) command moves point to immediately after the previous page delimiter. If point is already right after a page delimiter, it skips that one and stops at the previous one. A numeric argument serves as a repeat count. The C-x ] (=forward-page=) command moves forward past the next page delimiter.

  The C-x C-p command (=mark-page=) puts point at the beginning of the current page (after that page delimiter at the front), and the mark at the end of the page (after the page delimiter at the end).

C-x C-p C-w is a handy way to kill a page to move it elsewhere. If you move to another page delimiter with C-x [ and C-x ], then yank the killed page, all the pages will be properly delimited once again. Making sure this works as expected is the reason C-x C-p includes only the following page delimiter in the region.

A numeric argument to C-x C-p specifies which page to go to, relative to the current one. Zero means the current page, one means the next page, and −1 means the previous one.

The C-x l command (=count-lines-page=) is good for deciding where to break a page in two. It displays in the echo area the total number of lines in the current page, and then divides it up into those preceding the current line and those following, as in

#+BEGIN_EXAMPLE
         Page has 96 (72+25) lines
#+END_EXAMPLE

Notice that the sum is off by one; this is correct if point is not at the beginning of a line.

The variable =page-delimiter= controls where pages begin. Its value is a regular expression that matches the beginning of a line that separates pages (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). The normal value of this variable is ="^\f"=, which matches a formfeed character at the beginning of a line.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Pages][Pages]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.5 Quotation Marks
    :PROPERTIES:
    :CUSTOM_ID: quotation-marks
    :END:

One common way to quote is the typewriter convention, which quotes using straight apostrophes ='like this'= or double-quotes ="like this"=. Another common way is the curved quote convention, which uses left and right single or double quotation marks `=like this=' or "=like this="[[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#fn-11][11]]. In text files, typewriter quotes are simple and portable; curved quotes are less ambiguous and typically look nicer.

Electric Quote mode makes it easier to type curved quotes. As you type characters it optionally converts =to='=, ' to='=, `` to="=, and '' to="=.  It's possible to change the default quotes listed above, by customizing the variable=electric-quote-chars=, a list of four characters, where the items correspond to the left single quote, the right single quote, the left double quote and the right double quote, respectively, whose default value is='(?``=?='=?```` ?=''=)=.

You can customize the behavior of Electric Quote mode by customizing variables that control where it is active. It is active in text paragraphs if =electric-quote-paragraph= is non-=nil=, in programming-language comments if =electric-quote-comment= is non-=nil=, and in programming-language strings if =electric-quote-string= is non-=nil=. The default is =nil= for =electric-quote-string= and =t= for the other variables.

Electric Quote mode is disabled by default. To toggle it in a single buffer, use M-x electric-quote-local-mode. To toggle it globally, type M-x electric-quote-mode. To suppress it for a single use, type C-q =or C-q ' instead of= or '. To insert a curved quote even when Electric Quote is disabled or inactive, you can type C-x 8 [ for =‘=, C-x 8 ] for =’=, C-x 8 { for ", and C-x 8 } for". See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Inserting-Text][Inserting Text]]. Note that the value of =electric-quote-chars= does not affect these keybindings, they are not keybindings of =electric-quote-mode= but bound in =global-map=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Case][Case]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Quotation-Marks][Quotation Marks]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.6 Filling Text
    :PROPERTIES:
    :CUSTOM_ID: filling-text
    :END:

Filling text means breaking it up into lines that fit a specified width. Emacs does filling in two ways. In Auto Fill mode, inserting text with self-inserting characters also automatically fills it. There are also explicit fill commands that you can use when editing text.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Fill][Auto Fill]]: Auto Fill mode breaks long lines automatically.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]]: Commands to refill paragraphs and center lines.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Prefix][Fill Prefix]]: Filling paragraphs that are indented or in a comment, etc.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Adaptive-Fill][Adaptive Fill]]: How Emacs can determine the fill prefix automatically.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]

** 25.6.1 Auto Fill Mode
     :PROPERTIES:
     :CUSTOM_ID: auto-fill-mode
     :END:

Auto Fill mode is a buffer-local minor mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]) in which lines are broken automatically at spaces when the line becomes too wide.

- M-x auto-fill-mode

  Enable or disable Auto Fill mode.

-

-

  In Auto Fill mode, break lines when appropriate.

  The mode command M-x auto-fill-mode toggles Auto Fill mode in the current buffer. Like any other minor mode, with a positive numeric argument, it enables Auto Fill mode, and with a negative argument it disables it. To enable Auto Fill mode automatically in certain major modes, add =auto-fill-mode= to the mode hooks (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Major-Modes][Major Modes]]). When Auto Fill mode is enabled, the mode indicator 'Fill' appears in the mode line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mode-Line][Mode Line]]).

Auto Fill mode breaks lines automatically at spaces whenever they get longer than the desired width. This line breaking occurs only when you type or . If you wish to insert a space or newline without permitting line-breaking, type C-q or C-q C-j respectively. Also, C-o inserts a newline without line breaking.

When Auto Fill mode breaks a line, it tries to obey the adaptive fill prefix: if a fill prefix can be deduced from the first and/or second line of the current paragraph, it is inserted into the new line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Adaptive-Fill][Adaptive Fill]]). Otherwise the new line is indented, as though you had typed on it (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indentation][Indentation]]). In a programming language mode, if a line is broken in the middle of a comment, the comment is split by inserting new comment delimiters as appropriate.

Auto Fill mode does not refill entire paragraphs; it breaks lines but does not merge lines. Therefore, editing in the middle of a paragraph can result in a paragraph that is not correctly filled. To fill it, call the explicit fill commands (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Prefix][Fill Prefix]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Fill][Auto Fill]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]

** 25.6.2 Explicit Fill Commands
     :PROPERTIES:
     :CUSTOM_ID: explicit-fill-commands
     :END:

- M-q

  Fill current paragraph (=fill-paragraph=).

- C-x f

  Set the fill column (=set-fill-column=).

- M-x fill-region

  Fill each paragraph in the region (=fill-region=).

- M-x fill-region-as-paragraph

  Fill the region, considering it as one paragraph.

- M-o M-s

  Center a line.

  The command M-q (=fill-paragraph=) fills the current paragraph. It redistributes the line breaks within the paragraph, and deletes any excess space and tab characters occurring within the paragraph, in such a way that the lines end up fitting within a certain maximum width.

  Normally, M-q acts on the paragraph where point is, but if point is between paragraphs, it acts on the paragraph after point. If the region is active, it acts instead on the text in the region. You can also call M-x fill-region to specifically fill the text in the region.

  M-q and =fill-region= use the usual Emacs criteria for finding paragraph boundaries (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Paragraphs][Paragraphs]]). For more control, you can use M-x fill-region-as-paragraph, which refills everything between point and mark as a single paragraph. This command deletes any blank lines within the region, so separate blocks of text end up combined into one block.

  A numeric argument to M-q tells it to justify the text as well as filling it. This means that extra spaces are inserted to make the right margin line up exactly at the fill column. To remove the extra spaces, use M-q with no argument. (Likewise for =fill-region=.)

  The maximum line width for filling is specified by the buffer-local variable =fill-column=. The default value (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]]) is 70. The easiest way to set =fill-column= in the current buffer is to use the command C-x f (=set-fill-column=). With a numeric argument, it uses that as the new fill column. With just C-u as argument, it sets =fill-column= to the current horizontal position of point.

  The command M-o M-s (=center-line=) centers the current line within the current fill column. With an argument n, it centers n lines individually and moves past them. This binding is made by Text mode and is available only in that and related modes (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Mode][Text Mode]]).

By default, Emacs considers a period followed by two spaces or by a newline as the end of a sentence; a period followed by just one space indicates an abbreviation, not the end of a sentence. Accordingly, the fill commands will not break a line after a period followed by just one space. If you set the variable =sentence-end-double-space= to =nil=, the fill commands will break a line after a period followed by one space, and put just one space after each period. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sentences][Sentences]], for other effects and possible drawbacks of this.

If the variable =colon-double-space= is non-=nil=, the fill commands put two spaces after a colon.

To specify additional conditions where line-breaking is not allowed, customize the abnormal hook variable =fill-nobreak-predicate= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]). Each function in this hook is called with no arguments, with point positioned where Emacs is considering breaking a line. If a function returns a non-=nil= value, Emacs will not break the line there. Functions you can use there include: =fill-single-word-nobreak-p= (don't break after the first word of a sentence or before the last); =fill-single-char-nobreak-p= (don't break after a one-letter word); and =fill-french-nobreak-p= (don't break after '(' or before ')', ':' or '?').

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Adaptive-Fill][Adaptive Fill]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]

** 25.6.3 The Fill Prefix
     :PROPERTIES:
     :CUSTOM_ID: the-fill-prefix
     :END:

The fill prefix feature allows paragraphs to be filled so that each line starts with a special string of characters (such as a sequence of spaces, giving an indented paragraph). You can specify a fill prefix explicitly; otherwise, Emacs tries to deduce one automatically (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Adaptive-Fill][Adaptive Fill]]).

- C-x .

  Set the fill prefix (=set-fill-prefix=).

- M-q

  Fill a paragraph using current fill prefix (=fill-paragraph=).

- M-x fill-individual-paragraphs

  Fill the region, considering each change of indentation as starting a new paragraph.

- M-x fill-nonuniform-paragraphs

  Fill the region, considering only paragraph-separator lines as starting a new paragraph.

  To specify a fill prefix for the current buffer, move to a line that starts with the desired prefix, put point at the end of the prefix, and type C-x . (=set-fill-prefix=). (That's a period after the C-x.) To turn off the fill prefix, specify an empty prefix: type C-x . with point at the beginning of a line.

When a fill prefix is in effect, the fill commands remove the fill prefix from each line of the paragraph before filling, and insert it on each line after filling. (The beginning of the first line of the paragraph is left unchanged, since often that is intentionally different.) Auto Fill mode also inserts the fill prefix automatically when it makes a new line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Fill][Auto Fill]]). The C-o command inserts the fill prefix on new lines it creates, when you use it at the beginning of a line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Blank-Lines][Blank Lines]]). Conversely, the command M-\^ deletes the prefix (if it occurs) after the newline that it deletes (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indentation][Indentation]]).

For example, if =fill-column= is 40 and you set the fill prefix to ';;', then M-q in the following text

#+BEGIN_EXAMPLE
         ;; This is an
         ;; example of a paragraph
         ;; inside a Lisp-style comment.
#+END_EXAMPLE

produces this:

#+BEGIN_EXAMPLE
         ;; This is an example of a paragraph
         ;; inside a Lisp-style comment.
#+END_EXAMPLE

Lines that do not start with the fill prefix are considered to start paragraphs, both in M-q and the paragraph commands; this gives good results for paragraphs with hanging indentation (every line indented except the first one). Lines which are blank or indented once the prefix is removed also separate or start paragraphs; this is what you want if you are writing multi-paragraph comments with a comment delimiter on each line.

You can use M-x fill-individual-paragraphs to set the fill prefix for each paragraph automatically. This command divides the region into paragraphs, treating every change in the amount of indentation as the start of a new paragraph, and fills each of these paragraphs. Thus, all the lines in one paragraph have the same amount of indentation. That indentation serves as the fill prefix for that paragraph.

M-x fill-nonuniform-paragraphs is a similar command that divides the region into paragraphs in a different way. It considers only paragraph-separating lines (as defined by =paragraph-separate=) as starting a new paragraph. Since this means that the lines of one paragraph may have different amounts of indentation, the fill prefix used is the smallest amount of indentation of any of the lines of the paragraph. This gives good results with styles that indent a paragraph's first line more or less that the rest of the paragraph.

The fill prefix is stored in the variable =fill-prefix=. Its value is a string, or =nil= when there is no fill prefix. This is a per-buffer variable; altering the variable affects only the current buffer, but there is a default value which you can change as well. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]].

The =indentation= text property provides another way to control the amount of indentation paragraphs receive. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Indentation][Enriched Indentation]].

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Prefix][Fill Prefix]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]

** 25.6.4 Adaptive Filling
     :PROPERTIES:
     :CUSTOM_ID: adaptive-filling
     :END:

The fill commands can deduce the proper fill prefix for a paragraph automatically in certain cases: either whitespace or certain punctuation characters at the beginning of a line are propagated to all lines of the paragraph.

If the paragraph has two or more lines, the fill prefix is taken from the paragraph's second line, but only if it appears on the first line as well.

If a paragraph has just one line, fill commands /may/ take a prefix from that line. The decision is complicated because there are three reasonable things to do in such a case:

- Use the first line's prefix on all the lines of the paragraph.\\
- Indent subsequent lines with whitespace, so that they line up under the text that follows the prefix on the first line, but don't actually copy the prefix from the first line.\\
- Don't do anything special with the second and following lines.

All three of these styles of formatting are commonly used. So the fill commands try to determine what you would like, based on the prefix that appears and on the major mode. Here is how.

If the prefix found on the first line matches =adaptive-fill-first-line-regexp=, or if it appears to be a comment-starting sequence (this depends on the major mode), then the prefix found is used for filling the paragraph, provided it would not act as a paragraph starter on subsequent lines.

Otherwise, the prefix found is converted to an equivalent number of spaces, and those spaces are used as the fill prefix for the rest of the lines, provided they would not act as a paragraph starter on subsequent lines.

In Text mode, and other modes where only blank lines and page delimiters separate paragraphs, the prefix chosen by adaptive filling never acts as a paragraph starter, so it can always be used for filling.

The variable =adaptive-fill-regexp= determines what kinds of line beginnings can serve as a fill prefix: any characters at the start of the line that match this regular expression are used. If you set the variable =adaptive-fill-mode= to =nil=, the fill prefix is never chosen automatically.

You can specify more complex ways of choosing a fill prefix automatically by setting the variable =adaptive-fill-function= to a function. This function is called with point after the left margin of a line, and it should return the appropriate fill prefix based on that line. If it returns =nil=, =adaptive-fill-regexp= gets a chance to find a prefix.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Mode][Text Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.7 Case Conversion Commands
    :PROPERTIES:
    :CUSTOM_ID: case-conversion-commands
    :END:

Emacs has commands for converting either a single word or any arbitrary range of text to upper case or to lower case.

- M-l

  Convert following word to lower case (=downcase-word=).

- M-u

  Convert following word to upper case (=upcase-word=).

- M-c

  Capitalize the following word (=capitalize-word=).

- C-x C-l

  Convert region to lower case (=downcase-region=).

- C-x C-u

  Convert region to upper case (=upcase-region=).

  M-l (=downcase-word=) converts the word after point to lower case, moving past it. Thus, repeating M-l converts successive words. M-u (=upcase-word=) converts to all capitals instead, while M-c (=capitalize-word=) puts the first letter of the word into upper case and the rest into lower case. All these commands convert several words at once if given an argument. They are especially convenient for converting a large amount of text from all upper case to mixed case, because you can move through the text using M-l, M-u or M-c on each word as appropriate, occasionally using M-f instead to skip a word.

When given a negative argument, the word case conversion commands apply to the appropriate number of words before point, but do not move point. This is convenient when you have just typed a word in the wrong case: you can give the case conversion command and continue typing.

If a word case conversion command is given in the middle of a word, it applies only to the part of the word which follows point. (This is comparable to what M-d (=kill-word=) does.) With a negative argument, case conversion applies only to the part of the word before point.

The other case conversion commands are C-x C-u (=upcase-region=) and C-x C-l (=downcase-region=), which convert everything between point and mark to the specified case. Point and mark do not move.

The region case conversion commands =upcase-region= and =downcase-region= are normally disabled. This means that they ask for confirmation if you try to use them. When you confirm, you may enable the command, which means it will not ask for confirmation again. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Disabling][Disabling]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Case][Case]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.8 Text Mode
    :PROPERTIES:
    :CUSTOM_ID: text-mode
    :END:

Text mode is a major mode for editing files of text in a human language. Files which have names ending in the extension .txt are usually opened in Text mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Choosing-Modes][Choosing Modes]]). To explicitly switch to Text mode, type M-x text-mode.

In Text mode, only blank lines and page delimiters separate paragraphs. As a result, paragraphs can be indented, and adaptive filling determines what indentation to use when filling a paragraph. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Adaptive-Fill][Adaptive Fill]].

In Text mode, the (=indent-for-tab-command=) command usually inserts whitespace up to the next tab stop, instead of indenting the current line. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indentation][Indentation]], for details.

Text mode turns off the features concerned with comments except when you explicitly invoke them. It changes the syntax table so that apostrophes are considered part of words (e.g., 'don't' is considered one word). However, if a word starts with an apostrophe, it is treated as a prefix for the purposes of capitalization (e.g., M-c converts ''hello'' into ''Hello'', as expected).

If you indent the first lines of paragraphs, then you should use Paragraph-Indent Text mode (M-x paragraph-indent-text-mode) rather than Text mode. In that mode, you do not need to have blank lines between paragraphs, because the first-line indentation is sufficient to start a paragraph; however paragraphs in which every line is indented are not supported. Use M-x paragraph-indent-minor-mode to enable an equivalent minor mode for situations where you shouldn't change the major mode---in mail composition, for instance.

Text mode binds M- to =ispell-complete-word=. This command performs completion of the partial word in the buffer before point, using the spelling dictionary as the space of possible words. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Spelling][Spelling]]. If your window manager defines M- to switch windows, you can type or C-M-i instead.

Entering Text mode runs the mode hook =text-mode-hook= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Major-Modes][Major Modes]]).

The following sections describe several major modes that are derived from Text mode. These derivatives share most of the features of Text mode described above. In particular, derivatives of Text mode run =text-mode-hook= prior to running their own mode hooks.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Mode][Org Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Mode][Text Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.9 Outline Mode
    :PROPERTIES:
    :CUSTOM_ID: outline-mode
    :END:

Outline mode is a major mode derived from Text mode, which is specialized for editing outlines. It provides commands to navigate between entries in the outline structure, and commands to make parts of a buffer temporarily invisible, so that the outline structure may be more easily viewed. Type M-x outline-mode to switch to Outline mode. Entering Outline mode runs the hook =text-mode-hook= followed by the hook =outline-mode-hook= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]).

When you use an Outline mode command to make a line invisible (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Visibility][Outline Visibility]]), the line disappears from the screen. An ellipsis (three periods in a row) is displayed at the end of the previous visible line, to indicate the hidden text. Multiple consecutive invisible lines produce just one ellipsis.

Editing commands that operate on lines, such as C-n and C-p, treat the text of the invisible line as part of the previous visible line. Killing the ellipsis at the end of a visible line really kills all the following invisible text associated with the ellipsis.

Outline minor mode is a buffer-local minor mode which provides the same commands as the major mode, Outline mode, but can be used in conjunction with other major modes. You can type M-x outline-minor-mode to toggle Outline minor mode in the current buffer, or use a file-local variable setting to enable it in a specific file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]]).

The major mode, Outline mode, provides special key bindings on the C-c prefix. Outline minor mode provides similar bindings with C-c @ as the prefix; this is to reduce the conflicts with the major mode's special commands. (The variable =outline-minor-mode-prefix= controls the prefix used.)

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Format][Outline Format]]: What the text of an outline looks like.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Motion][Outline Motion]]: Special commands for moving through outlines.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Visibility][Outline Visibility]]: Commands to control what is visible.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Views][Outline Views]]: Outlines and multiple views.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Foldout][Foldout]]: Folding means zooming in on outlines.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Motion][Outline Motion]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]

** 25.9.1 Format of Outlines
     :PROPERTIES:
     :CUSTOM_ID: format-of-outlines
     :END:

Outline mode assumes that the lines in the buffer are of two types: heading lines and body lines. A heading line represents a topic in the outline. Heading lines start with one or more asterisk ('/') characters; the number of asterisks determines the depth of the heading in the outline structure. Thus, a heading line with one ‘/' is a major topic; all the heading lines with two '/'s between it and the next one-‘/' heading are its subtopics; and so on. Any line that is not a heading line is a body line. Body lines belong with the preceding heading line. Here is an example:

#+BEGIN_EXAMPLE
         * Food
         This is the body,
         which says something about the topic of food.

         ** Delicious Food
         This is the body of the second-level header.

         ** Distasteful Food
         This could have
         a body too, with
         several lines.

         *** Dormitory Food

         * Shelter
         Another first-level topic with its header line.
#+END_EXAMPLE

A heading line together with all following body lines is called collectively an entry. A heading line together with all following deeper heading lines and their body lines is called a subtree.

You can customize the criterion for distinguishing heading lines by setting the variable =outline-regexp=. (The recommended ways to do this are in a major mode function or with a file local variable.) Any line whose beginning has a match for this regexp is considered a heading line. Matches that start within a line (not at the left margin) do not count.

The length of the matching text determines the level of the heading; longer matches make a more deeply nested level. Thus, for example, if a text formatter has commands '@chapter', '@section' and '@subsection' to divide the document into chapters and sections, you could make those lines count as heading lines by setting =outline-regexp= to ‘"@chap\|@\(sub\)*section"'. Note the trick: the two words 'chapter' and 'section' are equally long, but by defining the regexp to match only 'chap' we ensure that the length of the text matched on a chapter heading is shorter, so that Outline mode will know that sections are contained in chapters. This works as long as no other command starts with '@chap'.

You can explicitly specify a rule for calculating the level of a heading line by setting the variable =outline-level=. The value of =outline-level= should be a function that takes no arguments and returns the level of the current heading. The recommended ways to set this variable are in a major mode command or with a file local variable.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Visibility][Outline Visibility]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Format][Outline Format]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]

** 25.9.2 Outline Motion Commands
     :PROPERTIES:
     :CUSTOM_ID: outline-motion-commands
     :END:

Outline mode provides special motion commands that move backward and forward to heading lines.

- C-c C-n

  Move point to the next visible heading line (=outline-next-visible-heading=).

- C-c C-p

  Move point to the previous visible heading line (=outline-previous-visible-heading=).

- C-c C-f

  Move point to the next visible heading line at the same level as the one point is on (=outline-forward-same-level=).

- C-c C-b

  Move point to the previous visible heading line at the same level (=outline-backward-same-level=).

- C-c C-u

  Move point up to a lower-level (more inclusive) visible heading line (=outline-up-heading=).

All of the above commands accept numeric arguments as repeat counts. For example, C-c C-f, when given an argument, moves forward that many visible heading lines on the same level, and C-c C-u with an argument moves out of that many nested levels.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Views][Outline Views]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Motion][Outline Motion]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]

** 25.9.3 Outline Visibility Commands
     :PROPERTIES:
     :CUSTOM_ID: outline-visibility-commands
     :END:

Outline mode provides several commands for temporarily hiding or revealing parts of the buffer, based on the outline structure. These commands are not undoable; their effects are simply not recorded by the undo mechanism, so you can undo right past them (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Undo][Undo]]).

Many of these commands act on the current heading line. If point is on a heading line, that is the current heading line; if point is on a body line, the current heading line is the nearest preceding header line.

- C-c C-c

  Make the current heading line's body invisible (=outline-hide-entry=).

- C-c C-e

  Make the current heading line's body visible (=outline-show-entry=).

- C-c C-d

  Make everything under the current heading invisible, not including the heading itself (=outline-hide-subtree=).

- C-c C-s

  Make everything under the current heading visible, including body, subheadings, and their bodies (=outline-show-subtree=).

- C-c C-l

  Make the body of the current heading line, and of all its subheadings, invisible (=outline-hide-leaves=).

- C-c C-k

  Make all subheadings of the current heading line, at all levels, visible (=outline-show-branches=).

- C-c C-i

  Make immediate subheadings (one level down) of the current heading line visible (=outline-show-children=).

- C-c C-t

  Make all body lines in the buffer invisible (=outline-hide-body=).

- C-c C-a

  Make all lines in the buffer visible (=outline-show-all=).

- C-c C-q

  Hide everything except the top n levels of heading lines (=outline-hide-sublevels=).

- C-c C-o

  Hide everything except for the heading or body that point is in, plus the headings leading up from there to the top level of the outline (=outline-hide-other=).

  The simplest of these commands are C-c C-c (=outline-hide-entry=), which hides the body lines directly following the current heading line, and C-c C-e (=outline-show-entry=), which reveals them. Subheadings and their bodies are not affected.

  The commands C-c C-d (=outline-hide-subtree=) and C-c C-s (=outline-show-subtree=) are more powerful. They apply to the current heading line's subtree: its body, all of its subheadings, both direct and indirect, and all of their bodies.

  The command C-c C-l (=outline-hide-leaves=) hides the body of the current heading line as well as all the bodies in its subtree; the subheadings themselves are left visible. The command C-c C-k (=outline-show-branches=) reveals the subheadings, if they had previously been hidden (e.g., by C-c C-d). The command C-c C-i (=outline-show-children=) is a weaker version of this; it reveals just the direct subheadings, i.e., those one level down.

  The command C-c C-o (=outline-hide-other=) hides everything except the entry that point is in, plus its parents (the headers leading up from there to top level in the outline) and the top level headings. It also reveals body lines preceding the first heading in the buffer.

  The remaining commands affect the whole buffer. C-c C-t (=outline-hide-body=) makes all body lines invisible, so that you see just the outline structure (as a special exception, it will not hide lines at the top of the file, preceding the first header line, even though these are technically body lines). C-c C-a (=outline-show-all=) makes all lines visible. C-c C-q (=outline-hide-sublevels=) hides all but the top level headings at and above the level of the current heading line (defaulting to 1 if point is not on a heading); with a numeric argument n, it hides everything except the top n levels of heading lines. Note that it completely reveals all the n top levels and the body lines before the first heading.

  When incremental search finds text that is hidden by Outline mode, it makes that part of the buffer visible. If you exit the search at that position, the text remains visible. To toggle whether or not an active incremental search can match hidden text, type M-s i. To change the default for future searches, customize the option =search-invisible=. (This option also affects how =query-replace= and related functions treat hidden text, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Query-Replace][Query Replace]].) You can also automatically make text visible as you navigate in it by using Reveal mode (M-x reveal-mode), a buffer-local minor mode.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Foldout][Foldout]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Visibility][Outline Visibility]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]

** 25.9.4 Viewing One Outline in Multiple Views
     :PROPERTIES:
     :CUSTOM_ID: viewing-one-outline-in-multiple-views
     :END:

You can display two views of a single outline at the same time, in different windows. To do this, you must create an indirect buffer using M-x make-indirect-buffer. The first argument of this command is the existing outline buffer name, and its second argument is the name to use for the new indirect buffer. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indirect-Buffers][Indirect Buffers]].

Once the indirect buffer exists, you can display it in a window in the normal fashion, with C-x 4 b or other Emacs commands. The Outline mode commands to show and hide parts of the text operate on each buffer independently; as a result, each buffer can have its own view. If you want more than two views on the same outline, create additional indirect buffers.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Views][Outline Views]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]

** 25.9.5 Folding Editing
     :PROPERTIES:
     :CUSTOM_ID: folding-editing
     :END:

The Foldout package extends Outline mode and Outline minor mode with folding commands. The idea of folding is that you zoom in on a nested portion of the outline, while hiding its relatives at higher levels.

Consider an Outline mode buffer with all the text and subheadings under level-1 headings hidden. To look at what is hidden under one of these headings, you could use C-c C-e (M-x outline-show-entry) to expose the body, or C-c C-i to expose the child (level-2) headings.

With Foldout, you use C-c C-z (M-x foldout-zoom-subtree). This exposes the body and child subheadings, and narrows the buffer so that only the level-1 heading, the body and the level-2 headings are visible. Now to look under one of the level-2 headings, position the cursor on it and use C-c C-z again. This exposes the level-2 body and its level-3 child subheadings and narrows the buffer again. Zooming in on successive subheadings can be done as much as you like. A string in the mode line shows how deep you've gone.

When zooming in on a heading, to see only the child subheadings specify a numeric argument: C-u C-c C-z. The number of levels of children can be specified too (compare M-x outline-show-children), e.g., M-2 C-c C-z exposes two levels of child subheadings. Alternatively, the body can be specified with a negative argument: M-- C-c C-z. The whole subtree can be expanded, similarly to C-c C-s (M-x outline-show-subtree), by specifying a zero argument: M-0 C-c C-z.

While you're zoomed in, you can still use Outline mode's exposure and hiding functions without disturbing Foldout. Also, since the buffer is narrowed, global editing actions will only affect text under the zoomed-in heading. This is useful for restricting changes to a particular chapter or section of your document.

To unzoom (exit) a fold, use C-c C-x (M-x foldout-exit-fold). This hides all the text and subheadings under the top-level heading and returns you to the previous view of the buffer. Specifying a numeric argument exits that many levels of folds. Specifying a zero argument exits all folds.

To cancel the narrowing of a fold without hiding the text and subheadings, specify a negative argument. For example, M--2 C-c C-x exits two folds and leaves the text and subheadings exposed.

Foldout mode also provides mouse commands for entering and exiting folds, and for showing and hiding text:

- C-M-mouse-1 zooms in on the heading clicked on

  ​ single click: expose body. double click: expose subheadings. triple click: expose body and subheadings. quad click: expose entire subtree.

- C-M-mouse-2 exposes text under the heading clicked on

  ​ single click: expose body. double click: expose subheadings. triple click: expose body and subheadings. quad click: expose entire subtree.

- C-M-mouse-3 hides text under the heading clicked on or exits fold

  ​ single click: hide subtree. double click: exit fold and hide text. triple click: exit fold without hiding text. quad click: exit all folds and hide text.

  You can specify different modifier keys (instead of -

  #+BEGIN_HTML
    <Meta>
  #+END_HTML

  -) by setting =foldout-mouse-modifiers=; but if you have already loaded the foldout.el library, you must reload it in order for this to take effect.

To use the Foldout package, you can type M-x load-library foldout ; or you can arrange for to do that automatically by putting the following in your init file:

#+BEGIN_EXAMPLE
         (with-eval-after-load "outline"
           (require 'foldout))
#+END_EXAMPLE

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.10 Org Mode
    :PROPERTIES:
    :CUSTOM_ID: org-mode
    :END:

Org mode is a variant of Outline mode for using Emacs as an organizer and/or authoring system. Files with names ending in the extension .org are opened in Org mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Choosing-Modes][Choosing Modes]]). To explicitly switch to Org mode, type M-x org-mode.

In Org mode, as in Outline mode, each entry has a heading line that starts with one or more ‘*' characters. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Format][Outline Format]]. In addition, any line that begins with the '#' character is treated as a comment.

Org mode provides commands for easily viewing and manipulating the outline structure. The simplest of these commands is (=org-cycle=). If invoked on a heading line, it cycles through the different visibility states of the subtree: (i) showing only that heading line, (ii) showing only the heading line and the heading lines of its direct children, if any, and (iii) showing the entire subtree. If invoked in a body line, the global binding for is executed.

Typing S- (=org-shifttab=) anywhere in an Org mode buffer cycles the visibility of the entire outline structure, between (i) showing only top-level heading lines, (ii) showing all heading lines but no body lines, and (iii) showing everything.

You can move an entire entry up or down in the buffer, including its body lines and subtree (if any), by typing M- (=org-metaup=) or M- (=org-metadown=) on the heading line. Similarly, you can promote or demote a heading line with M- (=org-metaleft=) and M- (=org-metaright=). These commands execute their global bindings if invoked on a body line.

The following subsections give basic instructions for using Org mode as an organizer and as an authoring system. For details, see [[https://www.gnu.org/software/emacs/manual/html_mono/org.html#Top][The Org Mode Manual]].

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Organizer][Org Organizer]]: Managing TODO lists and agendas.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Authoring][Org Authoring]]: Exporting Org buffers to various formats.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Authoring][Org Authoring]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Mode][Org Mode]]

** 25.10.1 Org as an organizer
     :PROPERTIES:
     :CUSTOM_ID: org-as-an-organizer
     :END:

You can tag an Org entry as a TODO item by typing C-c C-t (=org-todo=) anywhere in the entry. This adds the keyword 'TODO' to the heading line. Typing C-c C-t again switches the keyword to 'DONE'; another C-c C-t removes the keyword entirely, and so forth. You can customize the keywords used by C-c C-t via the variable =org-todo-keywords=.

Apart from marking an entry as TODO, you can attach a date to it, by typing C-c C-s (=org-schedule=) in the entry. This prompts for a date by popping up the Emacs Calendar (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Calendar_002fDiary][Calendar/Diary]]), and then adds the tag 'SCHEDULED', together with the selected date, beneath the heading line. The command C-c C-d (=org-deadline=) has the same effect, except that it uses the tag =DEADLINE=.

Once you have some TODO items planned in an Org file, you can add that file to the list of agenda files by typing C-c [ (=org-agenda-file-to-front=). Org mode is designed to let you easily maintain multiple agenda files, e.g., for organizing different aspects of your life. The list of agenda files is stored in the variable =org-agenda-files=.

To view items coming from your agenda files, type M-x org-agenda. This command prompts for what you want to see: a list of things to do this week, a list of TODO items with specific keywords, etc. See [[https://www.gnu.org/software/emacs/manual/html_mono/org.html#Agenda-views][Agenda views]], for details.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Organizer][Org Organizer]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Mode][Org Mode]]

** 25.10.2 Org as an authoring system
     :PROPERTIES:
     :CUSTOM_ID: org-as-an-authoring-system
     :END:

You may want to format your Org notes nicely and to prepare them for export and publication. To export the current buffer, type C-c C-e (=org-export=) anywhere in an Org buffer. This command prompts for an export format; currently supported formats include HTML, LaTeX, Texinfo, OpenDocument (.odt), iCalendar, Markdown, man-page, and PDF. Some formats, such as PDF, require certain system tools to be installed.

To export several files at once to a specific directory, either locally or over the network, you must define a list of projects through the variable =org-publish-project-alist=. See its documentation for details.

Org supports a simple markup scheme for applying text formatting to exported documents:

#+BEGIN_EXAMPLE
         - This text is /emphasized/
         - This text is *in bold*
         - This text is _underlined_
         - This text uses =a teletype font=

         #+begin_quote
         ``This is a quote.''
         #+end_quote

         #+begin_example
         This is an example.
         #+end_example
#+END_EXAMPLE

For further details, [[https://www.gnu.org/software/emacs/manual/html_mono/org.html#Exporting][Exporting]], and [[https://www.gnu.org/software/emacs/manual/html_mono/org.html#Publishing][Publishing]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#HTML-Mode][HTML Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Org-Mode][Org Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.11 TeX Mode
    :PROPERTIES:
    :CUSTOM_ID: tex-mode
    :END:

TeX is a powerful text formatter written by Donald Knuth; like GNU Emacs, it is free software. The TeX format has several variants, including LaTeX, a simplified input format for TeX; DocTeX, a special file format in which the LaTeX sources are written, combining sources with documentation; and SliTeX, an obsolete special form of LaTeX[[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#fn-12][12]].

Emacs provides a TeX major mode for each of these variants: Plain TeX mode, LaTeX mode, DocTeX mode, and SliTeX mode. Emacs selects the appropriate mode by looking at the contents of the buffer. (This is done by invoking the =tex-mode= command, which is normally called automatically when you visit a TeX-like file. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Choosing-Modes][Choosing Modes]].) If the contents are insufficient to determine this, Emacs chooses the mode specified by the variable =tex-default-mode=; its default value is =latex-mode=. If Emacs does not guess right, you can select the correct variant of TeX mode using the commands =plain-tex-mode=, =latex-mode=, =slitex-mode=, or =doctex-mode=.

The following sections document the features of TeX mode and its variants. There are several other TeX-related Emacs packages, which are not documented in this manual:

- BibTeX mode is a major mode for BibTeX files, which are commonly used for keeping bibliographic references for LaTeX documents. For more information, see the documentation string for the command =bibtex-mode=.\\
- The RefTeX package provides a minor mode which can be used with LaTeX mode to manage bibliographic references. For more information, see the RefTeX Info manual, which is distributed with Emacs.\\
- The AUCTeX package provides more advanced features for editing TeX and its related formats, including the ability to preview TeX equations within Emacs buffers. Unlike BibTeX mode and the RefTeX package, AUCTeX is not distributed with Emacs by default. It can be downloaded via the Package Menu (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Packages][Packages]]); once installed, see the AUCTeX manual, which is included with the package.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Editing][TeX Editing]]: Special commands for editing in TeX mode.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#LaTeX-Editing][LaTeX Editing]]: Additional commands for LaTeX input files.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Print][TeX Print]]: Commands for printing part of a file with TeX.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Misc][TeX Misc]]: Customization of TeX mode, and related features.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#LaTeX-Editing][LaTeX Editing]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]]

** 25.11.1 TeX Editing Commands
     :PROPERTIES:
     :CUSTOM_ID: tex-editing-commands
     :END:

- "

  Insert, according to context, either ‘`=’ or ‘"’ or ‘''’ (=tex-insert-quote`).

- C-j

  Insert a paragraph break (two newlines) and check the previous paragraph for unbalanced braces or dollar signs (=tex-terminate-paragraph=).

- M-x tex-validate-region

  Check each paragraph in the region for unbalanced braces or dollar signs.

- C-c {

  Insert '{}' and position point between them (=tex-insert-braces=).

- C-c }

  Move forward past the next unmatched close brace (=up-list=).

  In TeX, the character '"' is not normally used; instead, quotations begin with '=’ and end with ‘''’.  TeX mode therefore binds the " key to the `tex-insert-quote` command.  This inserts ‘=' after whitespace or an open brace, '"' after a backslash, and ‘''' after any other character.

As a special exception, if you type " when the text before point is either '``' or ‘''', Emacs replaces that preceding text with a single ‘"' character. You can therefore type"" to insert ‘"', should you ever need to do so. (You can also use C-q" to insert this character.)

In TeX mode, '$’ has a special syntax code which attempts to understand the way TeX math mode delimiters match. When you insert a ‘$' that is meant to exit math mode, the position of the matching '$’ that entered math mode is displayed for a second. This is the same feature that displays the open brace that matches a close brace that is inserted. However, there is no way to tell whether a ‘$' enters math mode or leaves it; so when you insert a '$’ that enters math mode, the previous ‘$' position is shown as if it were a match, even though they are actually unrelated.

TeX uses braces as delimiters that must match. Some users prefer to keep braces balanced at all times, rather than inserting them singly. Use C-c { (=tex-insert-braces=) to insert a pair of braces. It leaves point between the two braces so you can insert the text that belongs inside. Afterward, use the command C-c } (=up-list=) to move forward past the close brace. You can also invoke C-c { after marking some text: then the command encloses the marked text in braces.

There are two commands for checking the matching of braces. C-j (=tex-terminate-paragraph=) checks the paragraph before point, and inserts two newlines to start a new paragraph. It outputs a message in the echo area if any mismatch is found. M-x tex-validate-region checks a region, paragraph by paragraph. The errors are listed in an /Occur/ buffer; you can use the usual Occur mode commands in that buffer, such as C-c C-c, to visit a particular mismatch (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Other-Repeating-Search][Other Repeating Search]]).

Note that Emacs commands count square brackets and parentheses in TeX mode, not just braces. This is not strictly correct for the purpose of checking TeX syntax. However, parentheses and square brackets are likely to be used in text as matching delimiters, and it is useful for the various motion commands and automatic match display to work with them.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Print][TeX Print]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Editing][TeX Editing]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]]

** 25.11.2 LaTeX Editing Commands
     :PROPERTIES:
     :CUSTOM_ID: latex-editing-commands
     :END:

LaTeX mode provides a few extra features not applicable to plain TeX:

- C-c C-o

  Insert '\begin' and '\end' for LaTeX block and position point on a line between them (=tex-latex-block=).

- C-c C-e

  Close the innermost LaTeX block not yet closed (=tex-close-latex-block=).

  In LaTeX input, '\begin' and '\end' tags are used to group blocks of text. To insert a block, type C-c C-o (=tex-latex-block=). This prompts for a block type, and inserts the appropriate matching '\begin' and '\end' tags, leaving a blank line between the two and moving point there.

  When entering the block type argument to C-c C-o, you can use the usual completion commands (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Completion][Completion]]). The default completion list contains the standard LaTeX block types. If you want additional block types for completion, customize the list variable =latex-block-names=.

  In LaTeX input, '\begin' and '\end' tags must balance. You can use C-c C-e (=tex-close-latex-block=) to insert an '\end' tag which matches the last unmatched '\begin'. It also indents the '\end' to match the corresponding '\begin', and inserts a newline after the '\end' tag if point is at the beginning of a line. The minor mode =latex-electric-env-pair-mode= automatically inserts an '\end' or '\begin' tag for you when you type the corresponding one.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Misc][TeX Misc]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#LaTeX-Editing][LaTeX Editing]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]]

** 25.11.3 TeX Printing Commands
     :PROPERTIES:
     :CUSTOM_ID: tex-printing-commands
     :END:

You can invoke TeX as a subprocess of Emacs, supplying either the entire contents of the buffer or just part of it (e.g., one chapter of a larger document).

- C-c C-b

  Invoke TeX on the entire current buffer (=tex-buffer=).

- C-c C-r

  Invoke TeX on the current region, together with the buffer's header (=tex-region=).

- C-c C-f

  Invoke TeX on the current file (=tex-file=).

- C-c C-v

  Preview the output from the last C-c C-b, C-c C-r, or C-c C-f command (=tex-view=).

- C-c C-p

  Print the output from the last C-c C-b, C-c C-r, or C-c C-f command (=tex-print=).

- C-c

  Invoke BibTeX on the current file (=tex-bibtex-file=).

- C-c C-l

  Recenter the window showing output from TeX so that the last line can be seen (=tex-recenter-output-buffer=).

- C-c C-k

  Kill the TeX subprocess (=tex-kill-job=).

- C-c C-c

  Invoke some other compilation command on the entire current buffer (=tex-compile=).

  To pass the current buffer through TeX, type C-c C-b (=tex-buffer=). The formatted output goes in a temporary file, normally a .dvi file. Afterwards, you can type C-c C-v (=tex-view=) to launch an external program, such as xdvi, to view this output file. You can also type C-c C-p (=tex-print=) to print a hardcopy of the output file.

  By default, C-c C-b runs TeX in the current directory. The output of TeX is also created in this directory. To run TeX in a different directory, change the variable =tex-directory= to the desired directory. If your environment variable TEXINPUTS contains relative names, or if your files contain '\input' commands with relative file names, then =tex-directory= /must/ be ="."= or you will get the wrong results. Otherwise, it is safe to specify some other directory, such as ="/tmp"=.

  The buffer's TeX variant determines what shell command C-c C-b actually runs. In Plain TeX mode, it is specified by the variable =tex-run-command=, which defaults to ="tex"=. In LaTeX mode, it is specified by =latex-run-command=, which defaults to ="latex"=. The shell command that C-c C-v runs to view the .dvi output is determined by the variable =tex-dvi-view-command=, regardless of the TeX variant. The shell command that C-c C-p runs to print the output is determined by the variable =tex-dvi-print-command=. The variable =tex-print-file-extension= can be set to the required file extension for viewing and printing TeX-compiled files. For example, you can set it to .pdf, and update =tex-dvi-view-command= and =tex-dvi-print-command= accordingly.

Normally, Emacs automatically appends the output file name to the shell command strings described in the preceding paragraph. For example, if =tex-dvi-view-command= is ="xdvi"=, C-c C-v runs xdvi output-file-name. In some cases, however, the file name needs to be embedded in the command, e.g., if you need to provide the file name as an argument to one command whose output is piped to another. You can specify where to put the file name with ‘*' in the command string. For example,

#+BEGIN_EXAMPLE
         (setq tex-dvi-print-command "dvips -f * | lpr")
#+END_EXAMPLE

The terminal output from TeX, including any error messages, appears in a buffer called /tex-shell/. If TeX gets an error, you can switch to this buffer and feed it input (this works as in Shell mode; see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Interactive-Shell][Interactive Shell]]). Without switching to this buffer you can scroll it so that its last line is visible by typing C-c C-l.

Type C-c C-k (=tex-kill-job=) to kill the TeX process if you see that its output is no longer useful. Using C-c C-b or C-c C-r also kills any TeX process still running.

You can also pass an arbitrary region through TeX by typing C-c C-r (=tex-region=). This is tricky, however, because most files of TeX input contain commands at the beginning to set parameters and define macros, without which no later part of the file will format correctly. To solve this problem, C-c C-r allows you to designate a part of the file as containing essential commands; it is included before the specified region as part of the input to TeX. The designated part of the file is called the header.

To indicate the bounds of the header in Plain TeX mode, you insert two special strings in the file. Insert '%*start of header' before the header, and ‘%*end of header' after it. Each string must appear entirely on one line, but there may be other text on the line before or after. The lines containing the two strings are included in the header. If ‘%**start of header' does not appear within the first 100 lines of the buffer, C-c C-r assumes that there is no header.

In LaTeX mode, the header begins with '\documentclass' or '\documentstyle' and ends with '\begin{document}'. These are commands that LaTeX requires you to use in any case, so nothing special needs to be done to identify the header.

The commands (=tex-buffer=) and (=tex-region=) do all of their work in a temporary directory, and do not have available any of the auxiliary files needed by TeX for cross-references; these commands are generally not suitable for running the final copy in which all of the cross-references need to be correct.

When you want the auxiliary files for cross references, use C-c C-f (=tex-file=) which runs TeX on the current buffer's file, in that file's directory. Before running TeX, it offers to save any modified buffers. Generally, you need to use (=tex-file=) twice to get the cross-references right.

The value of the variable =tex-start-options= specifies options for the TeX run.

The value of the variable =tex-start-commands= specifies TeX commands for starting TeX. The default value causes TeX to run in nonstop mode. To run TeX interactively, set the variable to =""=.

Large TeX documents are often split into several files---one main file, plus subfiles. Running TeX on a subfile typically does not work; you have to run it on the main file. In order to make =tex-file= useful when you are editing a subfile, you can set the variable =tex-main-file= to the name of the main file. Then =tex-file= runs TeX on that file.

The most convenient way to use =tex-main-file= is to specify it in a local variable list in each of the subfiles. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]].

For LaTeX files, you can use BibTeX to process the auxiliary file for the current buffer's file. BibTeX looks up bibliographic citations in a data base and prepares the cited references for the bibliography section. The command C-c (=tex-bibtex-file=) runs the shell command (=tex-bibtex-command=) to produce a '.bbl' file for the current buffer's file. Generally, you need to do C-c C-f (=tex-file=) once to generate the '.aux' file, then do C-c (=tex-bibtex-file=), and then repeat C-c C-f (=tex-file=) twice more to get the cross-references correct.

To invoke some other compilation program on the current TeX buffer, type C-c C-c (=tex-compile=). This command knows how to pass arguments to many common programs, including pdflatex, yap, xdvi, and dvips. You can select your desired compilation program using the standard completion keys (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Completion][Completion]]).

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Print][TeX Print]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]]

** 25.11.4 TeX Mode Miscellany
     :PROPERTIES:
     :CUSTOM_ID: tex-mode-miscellany
     :END:

Entering any variant of TeX mode runs the hooks =text-mode-hook= and =tex-mode-hook=. Then it runs either =plain-tex-mode-hook=, =doctex-mode-hook=, =latex-mode-hook=, or =slitex-mode-hook=, whichever is appropriate. Starting the TeX shell runs the hook =tex-shell-hook=. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]].

The commands M-x iso-iso2tex, M-x iso-tex2iso, M-x iso-iso2gtex and M-x iso-gtex2iso can be used to convert between Latin-1 encoded files and TeX-encoded equivalents.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Nroff-Mode][Nroff Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#TeX-Mode][TeX Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.12 SGML and HTML Modes
    :PROPERTIES:
    :CUSTOM_ID: sgml-and-html-modes
    :END:

The major modes for SGML and HTML provide indentation support and commands for operating on tags.

HTML consists of two modes---one, a basic mode called =html-mode= is a slightly customized variant of SGML mode. The other, which is used by default for HTML files, is called =mhtml-mode=, and attempts to properly handle Javascript enclosed in a =element and CSS embedded in a= element.

- C-c C-n

  Interactively specify a special character and insert the SGML '&'-command for that character (=sgml-name-char=).

- C-c C-t

  Interactively specify a tag and its attributes (=sgml-tag=). This command asks you for a tag name and for the attribute values, then inserts both the opening tag and the closing tag, leaving point between them. With a prefix argument n, the command puts the tag around the n words already present in the buffer after point. Whenever a region is active, it puts the tag around the region (when Transient Mark mode is off, it does this when a numeric argument of −1 is supplied.)

- C-c C-a

  Interactively insert attribute values for the current tag (=sgml-attributes=).

- C-c C-f

  Skip across a balanced tag group (which extends from an opening tag through its corresponding closing tag) (=sgml-skip-tag-forward=). A numeric argument acts as a repeat count.

- C-c C-b

  Skip backward across a balanced tag group (which extends from an opening tag through its corresponding closing tag) (=sgml-skip-tag-backward=). A numeric argument acts as a repeat count.

- C-c C-d

  Delete the tag at or after point, and delete the matching tag too (=sgml-delete-tag=). If the tag at or after point is an opening tag, delete the closing tag too; if it is a closing tag, delete the opening tag too.

- C-c ? tag

  Display a description of the meaning of tag tag (=sgml-tag-help=). If the argument tag is empty, describe the tag at point.

- C-c /

  Insert a close tag for the innermost unterminated tag (=sgml-close-tag=). If called within a tag or a comment, close it instead of inserting a close tag.

- C-c 8

  Toggle a minor mode in which Latin-1 characters insert the corresponding SGML commands that stand for them, instead of the characters themselves (=sgml-name-8bit-mode=).

- C-c C-v

  Run a shell command (which you must specify) to validate the current buffer as SGML (=sgml-validate=). (In HTML mode this key sequence runs a different command.)

- C-c

  Toggle the visibility of existing tags in the buffer. This can be used as a cheap preview (=sgml-tags-invisible=).

  The major mode for editing XML documents is called nXML mode. This is a powerful major mode that can recognize many existing XML schemas and use them to provide completion of XML elements via M-, as well as on-the-fly XML validation with error highlighting. To enable nXML mode in an existing buffer, type M-x nxml-mode, or, equivalently, M-x xml-mode. Emacs uses nXML mode for files which have the extension .xml. For XHTML files, which have the extension .xhtml, Emacs uses HTML mode by default; you can make it use nXML mode by customizing the variable =auto-mode-alist= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Choosing-Modes][Choosing Modes]]). nXML mode is described in an Info manual, which is distributed with Emacs.

  You may choose to use the less powerful SGML mode for editing XML, since XML is a strict subset of SGML. To enable SGML mode in an existing buffer, type M-x sgml-mode. On enabling SGML mode, Emacs examines the buffer to determine whether it is XML; if so, it sets the variable =sgml-xml-mode= to a non-=nil= value. This causes SGML mode's tag insertion commands, described above, to always insert explicit closing tags as well.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#HTML-Mode][HTML Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.13 Nroff Mode
    :PROPERTIES:
    :CUSTOM_ID: nroff-mode
    :END:

Nroff mode, a major mode derived from Text mode, is specialized for editing nroff files (e.g., Unix man pages). Type M-x nroff-mode to enter this mode. Entering Nroff mode runs the hook =text-mode-hook=, then =nroff-mode-hook= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]).

In Nroff mode, nroff command lines are treated as paragraph separators, pages are separated by '.bp' commands, and comments start with backslash-doublequote. It also defines these commands:

​

- M-n

  Move to the beginning of the next line that isn't an nroff command (=nroff-forward-text-line=). An argument is a repeat count.

- M-p

  Like M-n but move up (=nroff-backward-text-line=).

- M-?

  Displays in the echo area the number of text lines (lines that are not nroff commands) in the region (=nroff-count-text-lines=).

  Electric Nroff mode is a buffer-local minor mode that can be used with Nroff mode. To toggle this minor mode, type M-x nroff-electric-mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]). When the mode is on, each time you type to end a line containing an nroff command that opens a kind of grouping, the nroff command to close that grouping is automatically inserted on the following line.

If you use Outline minor mode with Nroff mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]), heading lines are lines of the form '.H' followed by a number (the header level).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Nroff-Mode][Nroff Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.14 Enriched Text
    :PROPERTIES:
    :CUSTOM_ID: enriched-text
    :END:

Enriched mode is a minor mode for editing formatted text files in a WYSIWYG (What You See Is What You Get) fashion. When Enriched mode is enabled, you can apply various formatting properties to the text in the buffer, such as fonts and colors; upon saving the buffer, those properties are saved together with the text, using the MIME 'text/enriched' file format.

Enriched mode is typically used with Text mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Mode][Text Mode]]). It is /not/ compatible with Font Lock mode, which is used by many major modes, including most programming language modes, for syntax highlighting (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]]). Unlike Enriched mode, Font Lock mode assigns text properties automatically, based on the current buffer contents; those properties are not saved to disk.

The file enriched.txt in Emacs's =data-directory= serves as an example of the features of Enriched mode.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Mode][Enriched Mode]]: Entering and exiting Enriched mode.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hard-and-Soft-Newlines][Hard and Soft Newlines]]: There are two different kinds of newlines.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Editing-Format-Info][Editing Format Info]]: How to edit text properties.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Faces][Enriched Faces]]: Bold, italic, underline, etc.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Indentation][Enriched Indentation]]: Changing the left and right margins.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Justification][Enriched Justification]]: Centering, setting text flush with the left or right margin, etc.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Properties][Enriched Properties]]: The ``special text properties'' submenu.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hard-and-Soft-Newlines][Hard and Soft Newlines]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.1 Enriched Mode
     :PROPERTIES:
     :CUSTOM_ID: enriched-mode
     :END:

Enriched mode is a buffer-local minor mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]). When you visit a file that has been saved in the 'text/enriched' format, Emacs automatically enables Enriched mode, and applies the formatting information in the file to the buffer text. When you save a buffer with Enriched mode enabled, it is saved using the 'text/enriched' format, including the formatting information.

To create a new file of formatted text, visit the nonexistent file and type M-x enriched-mode. This command actually toggles Enriched mode. With a prefix argument, it enables Enriched mode if the argument is positive, and disables Enriched mode otherwise. If you disable Enriched mode, Emacs no longer saves the buffer using the 'text/enriched' format; any formatting properties that have been added to the buffer remain in the buffer, but they are not saved to disk.

Enriched mode does not save all Emacs text properties, only those specified in the variable =enriched-translations=. These include properties for fonts, colors, indentation, and justification.

If you visit a file and Emacs fails to recognize that it is in the 'text/enriched' format, type M-x format-decode-buffer. This command prompts for a file format, and re-reads the file in that format. Specifying the 'text/enriched' format automatically enables Enriched mode.

To view a 'text/enriched' file in raw form (as plain text with markup tags rather than formatted text), use M-x find-file-literally (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Visiting][Visiting]]).

See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Format-Conversion][Format Conversion]], for details of how Emacs recognizes and converts file formats like 'text/enriched'. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Properties][Text Properties]], for more information about text properties.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Editing-Format-Info][Editing Format Info]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Mode][Enriched Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.2 Hard and Soft Newlines
     :PROPERTIES:
     :CUSTOM_ID: hard-and-soft-newlines
     :END:

In Enriched mode, Emacs distinguishes between two different kinds of newlines, hard newlines and soft newlines. You can also enable or disable this feature in other buffers, by typing M-x use-hard-newlines.

Hard newlines are used to separate paragraphs, or anywhere there needs to be a line break regardless of how the text is filled; soft newlines are used for filling. The (=newline=) and C-o (=open-line=) commands insert hard newlines. The fill commands, including Auto Fill (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Fill][Auto Fill]]), insert only soft newlines and delete only soft newlines, leaving hard newlines alone.

Thus, when editing with Enriched mode, you should not use or C-o to break lines in the middle of filled paragraphs. Use Auto Fill mode or explicit fill commands (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Commands][Fill Commands]]) instead. Use or C-o where line breaks should always remain, such as in tables and lists. For such lines, you may also want to set the justification style to =unfilled= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Justification][Enriched Justification]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Faces][Enriched Faces]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hard-and-Soft-Newlines][Hard and Soft Newlines]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.3 Editing Format Information
     :PROPERTIES:
     :CUSTOM_ID: editing-format-information
     :END:

The easiest way to alter properties is with the 'Text Properties' menu. You can get to this menu from the 'Edit' menu in the menu bar (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Menu-Bar][Menu Bar]]), or with C-mouse-2 (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Menu-Mouse-Clicks][Menu Mouse Clicks]]). Some of the commands in the 'Text Properties' menu are listed below (you can also invoke them with M-x):

- =Remove Face Properties=

  Remove face properties from the region (=facemenu-remove-face-props=).

- =Remove Text Properties=

  Remove all text properties from the region, including face properties (=facemenu-remove-all=).

- =Describe Properties=

  List all text properties and other information about the character following point (=describe-text-properties=).

- =Display Faces=

  Display a list of defined faces (=list-faces-display=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]].

- =Display Colors=

  Display a list of defined colors (=list-colors-display=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]].

The other menu entries are described in the following sections.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Indentation][Enriched Indentation]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Editing-Format-Info][Editing Format Info]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.4 Faces in Enriched Text
     :PROPERTIES:
     :CUSTOM_ID: faces-in-enriched-text
     :END:

The following commands can be used to add or remove faces (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]]). Each applies to the text in the region if the mark is active, and to the next self-inserting character if the mark is inactive. With a prefix argument, each command applies to the next self-inserting character even if the region is active.

- M-o d

  Remove all =face= properties (=facemenu-set-default=).

- M-o b

  Apply the =bold= face (=facemenu-set-bold=).

- M-o i

  Apply the =italic= face (=facemenu-set-italic=).

- M-o l

  Apply the =bold-italic= face (=facemenu-set-bold-italic=).

- M-o u

  Apply the =underline= face (=facemenu-set-underline=).

- M-o o face

  Apply the face face (=facemenu-set-face=).

- M-x facemenu-set-foreground

  Prompt for a color (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]]), and apply it as a foreground color.

- M-x facemenu-set-background

  Prompt for a color, and apply it as a background color.

These commands are also available via the Text Properties menu.

A self-inserting character normally inherits the face properties (and most other text properties) from the preceding character in the buffer. If you use one of the above commands to specify the face for the next self-inserting character, that character will not inherit the faces properties from the preceding character, but it will still inherit other text properties.

Enriched mode defines two additional faces: =excerpt= and =fixed=. These correspond to codes used in the text/enriched file format. The =excerpt= face is intended for quotations; by default, it appears the same as =italic=. The =fixed= face specifies fixed-width text; by default, it appears the same as =bold=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Justification][Enriched Justification]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Faces][Enriched Faces]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.5 Indentation in Enriched Text
     :PROPERTIES:
     :CUSTOM_ID: indentation-in-enriched-text
     :END:

In Enriched mode, you can specify different amounts of indentation for the right or left margin of a paragraph or a part of a paragraph. These margins also affect fill commands such as M-q (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]).

The Indentation submenu of Text Properties offers commands for specifying indentation:

- =Indent More=

  Indent the region by 4 columns (=increase-left-margin=). In Enriched mode, this command is also available on C-x ; if you supply a numeric argument, that says how many columns to add to the margin (a negative argument reduces the number of columns).

- =Indent Less=

  Remove 4 columns of indentation from the region.

- =Indent Right More=

  Make the text narrower by indenting 4 columns at the right margin.

- =Indent Right Less=

  Remove 4 columns of indentation from the right margin.

  The variable =standard-indent= specifies how many columns these commands should add to or subtract from the indentation. The default value is 4. The default right margin for Enriched mode is controlled by the variable =fill-column=, as usual.

  You can also type C-c [ (=set-left-margin=) and C-c ] (=set-right-margin=) to set the left and right margins. You can specify the margin width with a numeric argument; otherwise these commands prompt for a value via the minibuffer.

The fill prefix, if any, works in addition to the specified paragraph indentation: C-x . does not include the specified indentation's whitespace in the new value for the fill prefix, and the fill commands look for the fill prefix after the indentation on each line. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fill-Prefix][Fill Prefix]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Properties][Enriched Properties]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Indentation][Enriched Indentation]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.6 Justification in Enriched Text
     :PROPERTIES:
     :CUSTOM_ID: justification-in-enriched-text
     :END:

In Enriched mode, you can use the following commands to specify various justification styles for filling. These commands apply to the paragraph containing point, or, if the region is active, to all paragraphs overlapping the region.

- M-j l

  Align lines to the left margin (=set-justification-left=).

- M-j r

  Align lines to the right margin (=set-justification-right=).

- M-j b

  Align lines to both margins, inserting spaces in the middle of the line to achieve this (=set-justification-full=).

- M-j c

- M-S

  Center lines between the margins (=set-justification-center=).

- M-j u

  Turn off filling entirely (=set-justification-none=). The fill commands do nothing on text with this setting. You can, however, still indent the left margin.

  You can also specify justification styles using the Justification submenu in the Text Properties menu. The default justification style is specified by the per-buffer variable =default-justification=. Its value should be one of the symbols =left=, =right=, =full=, =center=, or =none=; their meanings correspond to the commands above.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Justification][Enriched Justification]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]]

** 25.14.7 Setting Other Text Properties
     :PROPERTIES:
     :CUSTOM_ID: setting-other-text-properties
     :END:

The Special Properties submenu of Text Properties has entries for adding or removing three other text properties: =read-only=, (which disallows alteration of the text), =invisible= (which hides text), and =intangible= (which disallows moving point within the text). The 'Remove Special' menu item removes all of these special properties from the text in the region.

The =invisible= and =intangible= properties are not saved.

Enriched mode also supports saving and restoring =display= properties (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Display-Property][Display Property]]), which affect how text is displayed on the screen, and also allow displaying images and strings that come from sources other than buffer text. The =display= properties also support execution of arbitrary Lisp forms as part of processing the property for display, thus providing a means to dynamically tailor the display to some conditions that can only be known at display time. Since execution of arbitrary Lisp opens Emacs to potential attacks, especially when the source of enriched text is outside of Emacs or even outside of your system (e.g., if it was received in an email message), such execution is by default disabled in Enriched mode. You can enable it by customizing the variable =enriched-allow-eval-in-display-props= to a non-=nil= value.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Two_002dColumn][Two-Column]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Enriched-Text][Enriched Text]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.15 Editing Text-based Tables
    :PROPERTIES:
    :CUSTOM_ID: editing-text-based-tables
    :END:

The =table= package provides commands to easily edit text-based tables. Here is an example of what such a table looks like:

#+BEGIN_EXAMPLE
         +-----------------+--------------------------------+-----------------+
         |     Command     |          Description           |   Key Binding   |
         +-----------------+--------------------------------+-----------------+
         |  forward-char   |Move point right N characters   |       C-f       |
         |                 |(left if N is negative).        |                 |
         |                 |                                |                 |
         +-----------------+--------------------------------+-----------------+
         |  backward-char  |Move point left N characters    |       C-b       |
         |                 |(right if N is negative).       |                 |
         |                 |                                |                 |
         +-----------------+--------------------------------+-----------------+
#+END_EXAMPLE

When Emacs recognizes such a stretch of text as a table (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]]), editing the contents of each table cell will automatically resize the table, whenever the contents become too large to fit in the cell. You can use the commands defined in the following sections for navigating and editing the table layout.

Type M-x table-fixed-width-mode to toggle the automatic table resizing feature.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Definition][Table Definition]]: What is a text based table.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Creation][Table Creation]]: How to create a table.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]]: How to activate and deactivate tables.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Commands][Cell Commands]]: Cell-oriented commands in a table.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Justification][Cell Justification]]: Justifying cell contents.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Rows-and-Columns][Table Rows and Columns]]: Inserting and deleting rows and columns.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Conversion][Table Conversion]]: Converting between plain text and tables.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Misc][Table Misc]]: Table miscellany.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Creation][Table Creation]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.1 What is a Text-based Table?
     :PROPERTIES:
     :CUSTOM_ID: what-is-a-text-based-table
     :END:

A table consists of a rectangular text area which is divided into cells. Each cell must be at least one character wide and one character high, not counting its border lines. A cell can be subdivided into more cells, but they cannot overlap.

Cell border lines are drawn with three special characters, specified by the following variables:

- =table-cell-vertical-char=

  The character used for vertical lines. The default is '|'.

- =table-cell-horizontal-chars=

  The characters used for horizontal lines. The default is '"-="'.

- =table-cell-intersection-char=

  The character used for the intersection of horizontal and vertical lines. The default is '+'.

The following are examples of /invalid/ tables:

#+BEGIN_EXAMPLE
            +-----+       +--+    +-++--+
            |     |       |  |    | ||  |
            |     |       |  |    | ||  |
            +--+  |    +--+--+    +-++--+
            |  |  |    |  |  |    +-++--+
            |  |  |    |  |  |    | ||  |
            +--+--+    +--+--+    +-++--+
               a          b          c
#+END_EXAMPLE

From left to right:

1. Overlapped cells or non-rectangular cells are not allowed.
2. The border must be rectangular.
3. Cells must have a minimum width/height of one character.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Definition][Table Definition]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.2 Creating a Table
     :PROPERTIES:
     :CUSTOM_ID: creating-a-table
     :END:

To create a text-based table from scratch, type M-x table-insert. This command prompts for the number of table columns, the number of table rows, cell width and cell height. The cell width and cell height do not include the cell borders; each can be specified as a single integer (which means each cell is given the same width/height), or as a sequence of integers separated by spaces or commas (which specify the width/height of the individual table columns/rows, counting from left to right for table columns and from top to bottom for table rows). The specified table is then inserted at point.

The table inserted by M-x table-insert contains special text properties, which tell Emacs to treat it specially as a text-based table. If you save the buffer to a file and visit it again later, those properties are lost, and the table appears to Emacs as an ordinary piece of text. See the next section, for how to convert it back into a table.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Commands][Cell Commands]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Creation][Table Creation]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.3 Table Recognition
     :PROPERTIES:
     :CUSTOM_ID: table-recognition
     :END:

Existing text-based tables in a buffer, which lack the special text properties applied by M-x table-insert, are not treated specially as tables. To apply those text properties, type M-x table-recognize. This command scans the current buffer, recognizes valid table cells, and applies the relevant text properties. Conversely, type M-x table-unrecognize to unrecognize all tables in the current buffer, removing the special text properties and converting tables back to plain text.

You can also use the following commands to selectively recognize or unrecognize tables:

- M-x table-recognize-region

  Recognize tables within the current region.

- M-x table-unrecognize-region

  Unrecognize tables within the current region.

- M-x table-recognize-table

  Recognize the table at point and activate it.

- M-x table-unrecognize-table

  Deactivate the table at point.

- M-x table-recognize-cell

  Recognize the cell at point and activate it.

- M-x table-unrecognize-cell

  Deactivate the cell at point.

See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Conversion][Table Conversion]], for another way to recognize a table.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Justification][Cell Justification]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.4 Commands for Table Cells
     :PROPERTIES:
     :CUSTOM_ID: commands-for-table-cells
     :END:

The commands M-x table-forward-cell and M-x table-backward-cell move point from the current cell to an adjacent cell. The order is cyclic: when point is in the last cell of a table, M-x table-forward-cell moves to the first cell. Likewise, when point is on the first cell, M-x table-backward-cell moves to the last cell.

M-x table-span-cell prompts for a direction---right, left, above, or below---and merges the current cell with the adjacent cell in that direction. This command signals an error if the merge would result in an illegitimate cell layout.

M-x table-split-cell splits the current cell vertically or horizontally, prompting for the direction with the minibuffer. To split in a specific direction, use M-x table-split-cell-vertically and M-x table-split-cell-horizontally. When splitting vertically, the old cell contents are automatically split between the two new cells. When splitting horizontally, you are prompted for how to divide the cell contents, if the cell is non-empty; the options are 'split' (divide the contents at point), 'left' (put all the contents in the left cell), and 'right' (put all the contents in the right cell).

The following commands enlarge or shrink a cell. By default, they resize by one row or column; if a numeric argument is supplied, that specifies the number of rows or columns to resize by.

- M-x table-heighten-cell

  Enlarge the current cell vertically.

- M-x table-shorten-cell

  Shrink the current cell vertically.

- M-x table-widen-cell

  Enlarge the current cell horizontally.

- M-x table-narrow-cell

  Shrink the current cell horizontally.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Rows-and-Columns][Table Rows and Columns]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Commands][Cell Commands]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.5 Cell Justification
     :PROPERTIES:
     :CUSTOM_ID: cell-justification
     :END:

The command M-x table-justify imposes justification on one or more cells in a text-based table. Justification determines how the text in the cell is aligned, relative to the edges of the cell. Each cell in a table can be separately justified.

M-x table-justify first prompts for what to justify; the options are 'cell' (just the current cell), 'column' (all cells in the current table column) and 'row' (all cells in the current table row). The command then prompts for the justification style; the options are =left=, =center=, =right=, =top=, =middle=, =bottom=, or =none= (meaning no vertical justification).

Horizontal and vertical justification styles are specified independently, and both types can be in effect simultaneously; for instance, you can call M-x table-justify twice, once to specify =right= justification and once to specify =bottom= justification, to align the contents of a cell to the bottom right.

The justification style is stored in the buffer as a text property, and is lost when you kill the buffer or exit Emacs. However, the table recognition commands, such as M-x table-recognize (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]]), attempt to determine and re-apply each cell's justification style, by examining its contents. To disable this feature, change the variable =table-detect-cell-alignment= to =nil=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Conversion][Table Conversion]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Justification][Cell Justification]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.6 Table Rows and Columns
     :PROPERTIES:
     :CUSTOM_ID: table-rows-and-columns
     :END:

M-x table-insert-row inserts a row of cells before the current table row. The current row, together with point, is pushed down past the new row. To insert a row after the last row at the bottom of a table, invoke this command with point below the table, just below the bottom edge. You can insert more than one row at a time by using a numeric prefix argument.

Similarly, M-x table-insert-column inserts a column of cells to the left of the current table column. To insert a column to the right side of the rightmost column, invoke this command with point to the right of the rightmost column, outside the table. A numeric prefix argument specifies the number of columns to insert.

M-x table-delete-column deletes the column of cells at point. Similarly, M-x table-delete-row deletes the row of cells at point. A numeric prefix argument to either command specifies the number of columns or rows to delete.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Misc][Table Misc]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Rows-and-Columns][Table Rows and Columns]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.7 Converting Between Plain Text and Tables
     :PROPERTIES:
     :CUSTOM_ID: converting-between-plain-text-and-tables
     :END:

The command M-x table-capture captures plain text in a region and turns it into a table. Unlike M-x table-recognize (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Recognition][Table Recognition]]), the original text does not need to have a table appearance; it only needs to have a logical table-like structure.

For example, suppose we have the following numbers, which are divided into three lines and separated horizontally by commas:

#+BEGIN_EXAMPLE
         1, 2, 3, 4
         5, 6, 7, 8
         , 9, 10
#+END_EXAMPLE

Invoking M-x table-capture on that text produces this table:

#+BEGIN_EXAMPLE
         +-----+-----+-----+-----+
         |1    |2    |3    |4    |
         +-----+-----+-----+-----+
         |5    |6    |7    |8    |
         +-----+-----+-----+-----+
         |     |9    |10   |     |
         +-----+-----+-----+-----+
#+END_EXAMPLE

M-x table-release does the opposite: it converts a table back to plain text, removing its cell borders.

One application of this pair of commands is to edit a text in layout. Look at the following three paragraphs:

#+BEGIN_EXAMPLE
         table-capture is a powerful command.
         Here are some things it can do:

         Parse Cell Items   Using row and column delimiter regexps,
                            it parses the specified text area and
                            extracts cell items into a table.
#+END_EXAMPLE

Applying =table-capture= to a region containing the above text, with empty strings for the column and row delimiter regexps, creates a table with a single cell like the following one.

#+BEGIN_EXAMPLE
         +----------------------------------------------------------+
         |table-capture is a powerful command.                      |
         |Here are some things it can do:                           |
         |                                                          |
         |Parse Cell Items   Using row and column delimiter regexps,|
         |                   it parses the specified text area and  |
         |                   extracts cell items into a table.      |
         +----------------------------------------------------------+
#+END_EXAMPLE

We can then use the cell splitting commands (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cell-Commands][Cell Commands]]) to subdivide the table so that each paragraph occupies a cell:

#+BEGIN_EXAMPLE
         +----------------------------------------------------------+
         |table-capture is a powerful command.                      |
         |Here are some things it can do:                           |
         +-----------------+----------------------------------------+
         |Parse Cell Items | Using row and column delimiter regexps,|
         |                 | it parses the specified text area and  |
         |                 | extracts cell items into a table.      |
         +-----------------+----------------------------------------+
#+END_EXAMPLE

Each cell can now be edited independently without affecting the layout of other cells. When finished, we can invoke M-x table-release to convert the table back to plain text.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Table-Conversion][Table Conversion]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]]

** 25.15.8 Table Miscellany
     :PROPERTIES:
     :CUSTOM_ID: table-miscellany
     :END:

The command =table-query-dimension= reports the layout of the table and table cell at point. Here is an example of its output:

#+BEGIN_EXAMPLE
         Cell: (21w, 6h), Table: (67w, 16h), Dim: (2c, 3r), Total Cells: 5
#+END_EXAMPLE

This indicates that the current cell is 21 characters wide and 6 lines high, the table is 67 characters wide and 16 lines high with 2 columns and 3 rows, and a total of 5 cells.

M-x table-insert-sequence traverses the cells of a table inserting a sequence of text strings into each cell as it goes. It asks for the base string of the sequence, and then produces the sequence by "incrementing" the base string, either numerically (if the base string ends in numerical characters) or in the ASCII order. In addition to the base string, the command prompts for the number of elements in the sequence, the increment, the cell interval, and the justification of the text in each cell.

M-x table-generate-source generates a table formatted for a specific markup language. It asks for a language (which must be one of =html=, =latex=, or =cals=), a destination buffer in which to put the result, and a table caption, and then inserts the generated table into the specified buffer. The default destination buffer is =table.=lang, where lang is the language you specified.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Based-Tables][Text Based Tables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text][Text]]

* 25.16 Two-Column Editing
    :PROPERTIES:
    :CUSTOM_ID: two-column-editing
    :END:

Two-column mode lets you conveniently edit two side-by-side columns of text. It uses two side-by-side windows, each showing its own buffer. There are three ways to enter two-column mode:

-  2 or C-x 6 2

  Enter two-column mode with the current buffer on the left, and on the right, a buffer whose name is based on the current buffer's name (=2C-two-columns=). If the right-hand buffer doesn't already exist, it starts out empty; the current buffer's contents are not changed. This command is appropriate when the current buffer is empty or contains just one column and you want to add another column.

-  s or C-x 6 s

  Split the current buffer, which contains two-column text, into two buffers, and display them side by side (=2C-split=). The current buffer becomes the left-hand buffer, but the text in the right-hand column is moved into the right-hand buffer. The current column specifies the split point. Splitting starts with the current line and continues to the end of the buffer. This command is appropriate when you have a buffer that already contains two-column text, and you wish to separate the columns temporarily.

-  b buffer

- C-x 6 b buffer

  Enter two-column mode using the current buffer as the left-hand buffer, and using buffer buffer as the right-hand buffer (=2C-associate-buffer=).

 s or C-x 6 s looks for a column separator, which is a string that appears on each line between the two columns. You can specify the width of the separator with a numeric argument to s; that many characters, before point, constitute the separator string. By default, the width is 1, so the column separator is the character before point.

When a line has the separator at the proper place, s puts the text after the separator into the right-hand buffer, and deletes the separator. Lines that don't have the column separator at the proper place remain unsplit; they stay in the left-hand buffer, and the right-hand buffer gets an empty line to correspond. (This is the way to write a line that spans both columns while in two-column mode: write it in the left-hand buffer, and put an empty line in the right-hand buffer.)

The command or C-x 6 (=2C-newline=) inserts a newline in each of the two buffers at corresponding positions. This is the easiest way to add a new line to the two-column text while editing it in split buffers.

When you have edited both buffers as you wish, merge them with 1 or C-x 6 1 (=2C-merge=). This copies the text from the right-hand buffer as a second column in the other buffer. To go back to two-column editing, use s.

Use d or C-x 6 d to dissociate the two buffers, leaving each as it stands (=2C-dissociate=). If the other buffer, the one not current when you type d, is empty, d kills it.
