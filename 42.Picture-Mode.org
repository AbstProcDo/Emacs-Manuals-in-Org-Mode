#+TITLE: 42.Picture-Mode
* 42) Editing Pictures
   :PROPERTIES:
   :CUSTOM_ID: editing-pictures
   :END:

To edit a picture made out of text characters (for example, a picture of the division of a register into fields, as a comment in a program), use the command M-x picture-mode to enter Picture mode.

In Picture mode, editing is based on the quarter-plane model of text, according to which the text characters lie studded on an area that stretches infinitely far to the right and downward. The concept of the end of a line does not exist in this model; the most you can say is where the last nonblank character on the line is found.

Of course, Emacs really always considers text as a sequence of characters, and lines really do have ends. But Picture mode replaces the most frequently-used commands with variants that simulate the quarter-plane model of text. They do this by inserting spaces or by converting tabs to spaces.

Most of the basic editing commands of Emacs are redefined by Picture mode to do essentially the same thing but in a quarter-plane way. In addition, Picture mode defines various keys starting with the C-c prefix to run special picture editing commands.

One of these keys, C-c C-c, is particularly important. Often a picture is part of a larger file that is usually edited in some other major mode. Picture mode records the name of the previous major mode so you can use the C-c C-c command (=picture-mode-exit=) later to go back to that mode. C-c C-c also deletes spaces from the ends of lines, unless given a numeric argument.

The special commands of Picture mode all work in other modes (provided the picture library is loaded), but are not bound to keys except in Picture mode. The descriptions below talk of moving "one column" and so on, but all the picture mode commands handle numeric arguments as their normal equivalents do.

Turning on Picture mode runs the hook =picture-mode-hook=. Additional extensions to Picture mode can be found in artist.el.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Basic-Picture][Basic Picture]]: Basic concepts and simple commands of Picture Mode.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Insert-in-Picture][Insert in Picture]]: Controlling direction of cursor motion after self-inserting characters.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tabs-in-Picture][Tabs in Picture]]: Various features for tab stops and indentation.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles-in-Picture][Rectangles in Picture]]: Clearing and superimposing rectangles.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Insert-in-Picture][Insert in Picture]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Picture-Mode][Picture Mode]]

* 42.1 Basic Editing in Picture Mode
    :PROPERTIES:
    :CUSTOM_ID: basic-editing-in-picture-mode
    :END:

Most keys do the same thing in Picture mode that they usually do, but do it in a quarter-plane style. For example, C-f is rebound to run =picture-forward-column=, a command which moves point one column to the right, inserting a space if necessary so that the actual end of the line makes no difference. C-b is rebound to run =picture-backward-column=, which always moves point left one column, converting a tab to multiple spaces if necessary. C-n and C-p are rebound to run =picture-move-down= and =picture-move-up=, which can either insert spaces or convert tabs as necessary to make sure that point stays in exactly the same column. C-e runs =picture-end-of-line=, which moves to after the last nonblank character on the line. C-a runs =picture-beginning-of-line=. (The choice of screen model does not affect beginnings of lines; the only extra thing this command does is update the current picture column to 0.)

Insertion of text is adapted to the quarter-plane screen model through the use of Overwrite mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]].) Self-inserting characters replace existing text, column by column, rather than pushing existing text to the right. runs =picture-newline=, which just moves to the beginning of the following line so that new text will replace that line.

In Picture mode, the commands that normally delete or kill text, instead erase text (replacing it with spaces). (=picture-backward-clear-column=) replaces the preceding character with a space rather than removing it; this moves point backwards. C-d (=picture-clear-column=) replaces the next character or characters with spaces, but does not move point. (If you want to clear characters to spaces and move forward over them, use .) C-k (=picture-clear-line=) really kills the contents of lines, but does not delete the newlines from the buffer.

To do actual insertion, you must use special commands. C-o (=picture-open-line=) creates a blank line after the current line; it never splits a line. C-M-o (=split-line=) makes sense in Picture mode, so it is not changed. C-j (=picture-duplicate-line=) inserts another line with the same contents below the current line.

To do actual deletion in Picture mode, use C-w, C-c C-d (which is defined as =delete-char=, as C-d is in other modes), or one of the picture rectangle commands (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles-in-Picture][Rectangles in Picture]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tabs-in-Picture][Tabs in Picture]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Basic-Picture][Basic Picture]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Picture-Mode][Picture Mode]]

* 42.2 Controlling Motion after Insert
    :PROPERTIES:
    :CUSTOM_ID: controlling-motion-after-insert
    :END:

Since self-inserting characters in Picture mode overwrite and move point, there is no essential restriction on how point should be moved. Normally point moves right, but you can specify any of the eight orthogonal or diagonal directions for motion after a self-inserting character. This is useful for drawing lines in the buffer.

- C-c <

- C-c

  Move left after insertion (=picture-movement-left=).

- C-c >

- C-c

  Move right after insertion (=picture-movement-right=).

- C-c \^

- C-c

  Move up after insertion (=picture-movement-up=).

- C-c .

- C-c

  Move down after insertion (=picture-movement-down=).

- C-c `

- C-c

  Move up and left ("northwest") after insertion (=picture-movement-nw=).

- C-c '

- C-c

- C-c

  Move up and right ("northeast") after insertion (=picture-movement-ne=).

- C-c /

- C-c

  Move down and left ("southwest") after insertion (=picture-movement-sw=).

- C-c\\

- C-c

- C-c

  Move down and right ("southeast") after insertion (=picture-movement-se=).

  Two motion commands move based on the current Picture insertion direction. The command C-c C-f (=picture-motion=) moves in the same direction as motion after insertion currently does, while C-c C-b (=picture-motion-reverse=) moves in the opposite direction.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles-in-Picture][Rectangles in Picture]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Insert-in-Picture][Insert in Picture]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Picture-Mode][Picture Mode]]

* 42.3 Picture Mode Tabs
    :PROPERTIES:
    :CUSTOM_ID: picture-mode-tabs
    :END:

Two kinds of tab-like action are provided in Picture mode. Use M- (=picture-tab-search=) for context-based tabbing. With no argument, it moves to a point underneath the next "interesting" character that follows whitespace in the previous nonblank line. "Next" here means "appearing at a horizontal position greater than the one point starts out at". With prefix argument, as in C-u M-, this command moves to the next such interesting character in the current line. M- does not change the text; it only moves point. "Interesting" characters are defined by the variable =picture-tab-chars=, which should define a set of characters. The syntax for this variable is like the syntax used inside of '[...]' in a regular expression---but without the '[' and the â€˜]'. Its default value is ="!-~"=.

 itself runs =picture-tab=, which operates based on the current tab stop settings; it is the Picture mode equivalent of =tab-to-tab-stop=. Normally it just moves point, but with a numeric argument it clears the text that it moves over.

The context-based and tab-stop-based forms of tabbing are brought together by the command C-c (=picture-set-tab-stops=). This command sets the tab stops to the positions which M- would consider significant in the current line. The use of this command, together with , can get the effect of context-based tabbing. But M- is more convenient in the cases where it is sufficient.

It may be convenient to prevent use of actual tab characters in pictures. For example, this prevents C-x from messing up the picture. You can do this by setting the variable =indent-tabs-mode= to =nil=.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tabs-in-Picture][Tabs in Picture]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Picture-Mode][Picture Mode]]

* 42.4 Picture Mode Rectangle Commands
    :PROPERTIES:
    :CUSTOM_ID: picture-mode-rectangle-commands
    :END:

Picture mode defines commands for working on rectangular pieces of the text in ways that fit with the quarter-plane model. The standard rectangle commands may also be useful. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles][Rectangles]].

- C-c C-k

  Clear out the region-rectangle with spaces (=picture-clear-rectangle=). With a prefix argument, delete the text.

- C-c C-w r

  Similar, but save rectangle contents in register r first (=picture-clear-rectangle-to-register=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Registers][Registers]].

- C-c C-y

  Copy last killed rectangle into the buffer by overwriting, with upper left corner at point (=picture-yank-rectangle=). With argument, insert instead.

- C-c C-x r

  Similar, but use the rectangle in register r (=picture-yank-rectangle-from-register=).

  The picture rectangle commands C-c C-k (=picture-clear-rectangle=) and C-c C-w (=picture-clear-rectangle-to-register=) differ from the standard rectangle commands in that they normally clear the rectangle instead of deleting it; this is analogous with the way C-d is changed in Picture mode.

However, deletion of rectangles can be useful in Picture mode, so these commands delete the rectangle if given a numeric argument. C-c C-k either with or without a numeric argument saves the rectangle for C-c C-y.

The Picture mode commands for yanking rectangles differ from the standard ones in that they overwrite instead of inserting. This is the same way that Picture mode insertion of other text differs from other modes. C-c C-y (=picture-yank-rectangle=) inserts (by overwriting) the rectangle that was most recently killed, while C-c C-x (=picture-yank-rectangle-from-register=) does likewise for the rectangle found in a specified register.

