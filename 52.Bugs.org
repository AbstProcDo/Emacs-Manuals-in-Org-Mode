#+TITLE: 52.Bugs
* 52) Reporting Bugs
   :PROPERTIES:
   :CUSTOM_ID: reporting-bugs
   :END:

If you think you have found a bug in Emacs, please report it. We cannot promise to fix it, or always to agree that it is a bug, but we certainly want to hear about it. The same applies for new features you would like to see added. The following sections will help you to construct an effective bug report.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Known-Problems][Known Problems]]: How to read about known problems and bugs.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bug-Criteria][Criteria]]: Have you really found a bug?
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Understanding-Bug-Reporting][Understanding Bug Reporting]]: How to report a bug effectively.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Checklist][Checklist]]: Steps to follow for a good bug report.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sending-Patches][Sending Patches]]: How to send a patch for GNU Emacs.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bug-Criteria][Bug Criteria]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bugs][Bugs]]

* 52.1 Reading Existing Bug Reports and Known Problems
    :PROPERTIES:
    :CUSTOM_ID: reading-existing-bug-reports-and-known-problems
    :END:

Before reporting a bug, if at all possible please check to see if it is already known about. Indeed, it may already have been fixed in a later release of Emacs, or in the development version. Here is a list of the main places you can read about known issues:

- The

  etc/PROBLEMS

  file; type

  C-h C-p

  to read it. This file contains a list of particularly well-known issues that have been encountered in compiling, installing and running Emacs. Often, there are suggestions for workarounds and solutions.

- The GNU Bug Tracker at

  https://debbugs.gnu.org

  . Emacs bugs are filed in the tracker under the ‘

  emacs

  ' package. The tracker records information about the status of each bug, the initial bug report, and the follow-up messages by the bug reporter and Emacs developers. You can search for bugs by subject, severity, and other criteria.

  Instead of browsing the bug tracker as a webpage, you can browse it from Emacs using the =debbugs= package, which can be downloaded via the Package Menu (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Packages][Packages]]). This package provides the command M-x debbugs-gnu to list bugs, and M-x debbugs-gnu-search to search for a specific bug. User tags, applied by the Emacs maintainers, are shown by M-x debbugs-gnu-usertags.

- The ‘

  bug-gnu-emacs

  ' mailing list (also available as the newsgroup ‘

  gnu.emacs.bug

  '). You can read the list archives at

  https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs

  . This list works as a mirror of the Emacs bug reports and follow-up messages which are sent to the bug tracker. It also contains old bug reports from before the bug tracker was introduced (in early 2008).

  If you like, you can subscribe to the list. Be aware that its purpose is to provide the Emacs maintainers with information about bugs and feature requests, so reports may contain fairly large amounts of data; spectators should not complain about this.

- The 'emacs-pretest-bug' mailing list. This list is no longer used, and is mainly of historical interest. At one time, it was used for bug reports in development (i.e., not yet released) versions of Emacs. You can read the archives for 2003 to mid 2007 at https://lists.gnu.org/r/emacs-pretest-bug/. Nowadays, it is an alias for 'bug-gnu-emacs'.

- The 'emacs-devel' mailing list. Sometimes people report bugs to this mailing list. This is not the main purpose of the list, however, and it is much better to send bug reports to the bug list. You should not feel obliged to read this list before reporting a bug.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Understanding-Bug-Reporting][Understanding Bug Reporting]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Known-Problems][Known Problems]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bugs][Bugs]]

* 52.2 When Is There a Bug
    :PROPERTIES:
    :CUSTOM_ID: when-is-there-a-bug
    :END:

If Emacs accesses an invalid memory location (a.k.a. "segmentation fault") or exits with an operating system error message that indicates a problem in the program (as opposed to something like "disk full"), then it is certainly a bug.

If the Emacs display does not correspond properly to the contents of the buffer, then it is a bug. But you should check that features like buffer narrowing (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Narrowing][Narrowing]]), which can hide parts of the buffer or change how it is displayed, are not responsible.

Taking forever to complete a command can be a bug, but you must make sure that it is really Emacs's fault. Some commands simply take a long time. Type C-g (C- on MS-DOS) and then C-h l to see whether the input Emacs received was what you intended to type; if the input was such that you /know/ it should have been processed quickly, report a bug. If you don't know whether the command should take a long time, find out by looking in the manual or by asking for assistance.

If a command you are familiar with causes an Emacs error message in a case where its usual definition ought to be reasonable, it is probably a bug.

If a command does the wrong thing, that is a bug. But be sure you know for certain what it ought to have done. If you aren't familiar with the command, it might actually be working right. If in doubt, read the command's documentation (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Name-Help][Name Help]]).

A command's intended definition may not be the best possible definition for editing with. This is a very important sort of problem, but it is also a matter of judgment. Also, it is easy to come to such a conclusion out of ignorance of some of the existing features. It is probably best not to complain about such a problem until you have checked the documentation in the usual ways, feel confident that you understand it, and know for certain that what you want is not available. Ask other Emacs users, too. If you are not sure what the command is supposed to do after a careful reading of the manual, check the index and glossary for any terms that may be unclear.

If after careful rereading of the manual you still do not understand what the command should do, that indicates a bug in the manual, which you should report. The manual's job is to make everything clear to people who are not Emacs experts---including you. It is just as important to report documentation bugs as program bugs.

If the built-in documentation for a function or variable disagrees with the manual, one of them must be wrong; that is a bug.

For problems with packages that are not part of Emacs, it is better to begin by reporting them to the package developers.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Checklist][Checklist]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bug-Criteria][Bug Criteria]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bugs][Bugs]]

* 52.3 Understanding Bug Reporting
    :PROPERTIES:
    :CUSTOM_ID: understanding-bug-reporting
    :END:

When you decide that there is a bug, it is important to report it and to report it in a way which is useful. What is most useful is an exact description of what commands you type, starting with the shell command to run Emacs, until the problem happens.

The most important principle in reporting a bug is to report /facts/. Hypotheses and verbal descriptions are no substitute for the detailed raw data. Reporting the facts is straightforward, but many people strain to posit explanations and report them instead of the facts. If the explanations are based on guesses about how Emacs is implemented, they will be useless; meanwhile, lacking the facts, we will have no real information about the bug. If you want to actually /debug/ the problem, and report explanations that are more than guesses, that is useful---but please include the raw facts as well.

For example, suppose that you type C-x C-f /glorp/baz.ugh , visiting a file which (you know) happens to be rather large, and Emacs displays 'I feel pretty today'. The bug report would need to provide all that information. You should not assume that the problem is due to the size of the file and say, "I visited a large file, and Emacs displayed 'I feel pretty today'." This is what we mean by "guessing explanations". The problem might be due to the fact that there is a 'z' in the file name. If this is so, then when we got your report, we would try out the problem with some large file, probably with no 'z' in its name, and not see any problem. There is no way we could guess that we should try visiting a file with a 'z' in its name.

You should not even say "visit a file" instead of C-x C-f. Similarly, rather than saying "if I have three characters on the line", say "after I type A B C C-p", if that is the way you entered the text.

If possible, try quickly to reproduce the bug by invoking Emacs with emacs -Q (so that Emacs starts with no initial customizations; see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]), and repeating the steps that you took to trigger the bug. If you can reproduce the bug this way, that rules out bugs in your personal customizations. Then your bug report should begin by stating that you started Emacs with emacs -Q, followed by the exact sequence of steps for reproducing the bug. If possible, inform us of the exact contents of any file that is needed to reproduce the bug.

Some bugs are not reproducible from emacs -Q; some are not easily reproducible at all. In that case, you should report what you have---but, as before, please stick to the raw facts about what you did to trigger the bug the first time.

If you have multiple issues that you want to report, please make a separate bug report for each.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sending-Patches][Sending Patches]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Understanding-Bug-Reporting][Understanding Bug Reporting]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bugs][Bugs]]

* 52.4 Checklist for Bug Reports
    :PROPERTIES:
    :CUSTOM_ID: checklist-for-bug-reports
    :END:

Before reporting a bug, first try to see if the problem has already been reported (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Known-Problems][Known Problems]]).

If you are able to, try the latest release of Emacs to see if the problem has already been fixed. Even better is to try the latest development version. We recognize that this is not easy for some people, so do not feel that you absolutely must do this before making a report.

The best way to write a bug report for Emacs is to use the command M-x report-emacs-bug. This sets up a mail buffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sending-Mail][Sending Mail]]) and automatically inserts /some/ of the essential information. However, it cannot supply all the necessary information; you should still read and follow the guidelines below, so you can enter the other crucial information by hand before you send the message. You may feel that some of the information inserted by M-x report-emacs-bug is not relevant, but unless you are absolutely sure it is best to leave it, so that the developers can decide for themselves.

When you have finished writing your report, type C-c C-c and it will be sent to the Emacs maintainers at [[https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs][bug-gnu-emacs]]. (If you want to suggest an improvement or new feature, use the same address.) If you cannot send mail from inside Emacs, you can copy the text of your report to your normal mail client (if your system supports it, you can type C-c M-i to have Emacs do this for you) and send it to that address. Or you can simply send an email to that address describing the problem.

Your report will be sent to the 'bug-gnu-emacs' mailing list, and stored in the GNU Bug Tracker at [[https://debbugs.gnu.org/][https://debbugs.gnu.org]]. Please include a valid reply email address, in case we need to ask you for more information about your report. Submissions are moderated, so there may be a delay before your report appears.

You do not need to know how the GNU Bug Tracker works in order to report a bug, but if you want to, you can read the tracker's online documentation to see the various features you can use.

All mail sent to the 'bug-gnu-emacs' mailing list is also gatewayed to the 'gnu.emacs.bug' newsgroup. The reverse is also true, but we ask you not to post bug reports (or replies) via the newsgroup. It can make it much harder to contact you if we need to ask for more information, and it does not integrate well with the bug tracker.

If your data is more than 500,000 bytes, please don't include it directly in the bug report; instead, offer to send it on request, or make it available online and say where.

The GNU Bug Tracker will assign a bug number to your report; please use it in the following discussions.

To enable maintainers to investigate a bug, your report should include all these things:

- The version number of Emacs. Without this, we won't know whether there is any point in looking for the bug in the current version of GNU Emacs.

  M-x report-emacs-bug includes this information automatically, but if you are not using that command for your report you can get the version number by typing M-x emacs-version . If that command does not work, you probably have something other than GNU Emacs, so you will have to report the bug somewhere else.

- The type of machine you are using, and the operating system name and version number (again, automatically included by M-x report-emacs-bug). M-x emacs-version provides this information too. Copy its output from the /Messages/ buffer, so that you get it all and get it accurately.

- The operands given to the =configure= command when Emacs was installed (automatically included by M-x report-emacs-bug).

- A complete list of any modifications you have made to the Emacs source. (We may not have time to investigate the bug unless it happens in an unmodified Emacs. But if you've made modifications and you don't tell us, you are sending us on a wild goose chase.)

  Be precise about these changes. A description in English is not enough---send a unified context diff for them.

  Adding files of your own, or porting to another machine, is a modification of the source.

- Details of any other deviations from the standard procedure for installing GNU Emacs.

- The complete text of any files needed to reproduce the bug.

  If you can tell us a way to cause the problem without visiting any files, please do so. This makes it much easier to debug. If you do need files, make sure you arrange for us to see their exact contents. For example, it can matter whether there are spaces at the ends of lines, or a newline after the last line in the buffer (nothing ought to care whether the last line is terminated, but try telling the bugs that).

- The precise commands we need to type to reproduce the bug. If at all possible, give a full recipe for an Emacs started with the ‘

  -Q

  ' option (see

  Initial Options

  ). This bypasses your personal customizations.

  One way to record the input to Emacs precisely is to write a dribble file. To start the file, use the M-x open-dribble-file command. From then on, Emacs copies all your input to the specified dribble file until the Emacs process is killed. Be aware that sensitive information (such as passwords) may end up recorded in the dribble file.

- For possible display bugs on text-mode terminals, the terminal type (the value of environment variable

  TERM

  ), the complete termcap entry for the terminal from

  /etc/termcap

  (since that file is not identical on all machines), and the output that Emacs actually sent to the terminal.

  The way to collect the terminal output is to execute the Lisp expression

  #+BEGIN_EXAMPLE
                (open-termscript "~/termscript")
  #+END_EXAMPLE

  using M-: or from the /scratch/ buffer just after starting Emacs. From then on, Emacs copies all terminal output to the specified termscript file as well, until the Emacs process is killed. If the problem happens when Emacs starts up, put this expression into your Emacs initialization file so that the termscript file will be open when Emacs displays the screen for the first time.

  Be warned: it is often difficult, and sometimes impossible, to fix a terminal-dependent bug without access to a terminal of the type that stimulates the bug.

- If non-

  ASCII

  text or internationalization is relevant, the locale that was current when you started Emacs. On GNU/Linux and Unix systems, or if you use a POSIX-style shell such as Bash, you can use this shell command to view the relevant values:

  #+BEGIN_EXAMPLE
                echo LC_ALL=$LC_ALL LC_COLLATE=$LC_COLLATE LC_CTYPE=$LC_CTYPE \
                  LC_MESSAGES=$LC_MESSAGES LC_TIME=$LC_TIME LANG=$LANG
  #+END_EXAMPLE

  Alternatively, use the locale command, if your system has it, to display your locale settings.

  You can use the M-! command to execute these commands from Emacs, and then copy the output from the /Messages/ buffer into the bug report. Alternatively, M-x getenv LC\_ALL will display the value of =LC_ALL= in the echo area, and you can copy its output from the /Messages/ buffer.

- A description of what behavior you observe that you believe is incorrect. For example, "The Emacs process gets a fatal signal", or, "The resulting text is as follows, which I think is wrong."

  Of course, if the bug is that Emacs gets a fatal signal, then one can't miss it. But if the bug is incorrect text, the maintainer might fail to notice what is wrong. Why leave it to chance?

  Even if the problem you experience is a fatal signal, you should still say so explicitly. Suppose something strange is going on, such as, your copy of the source is out of sync, or you have encountered a bug in the C library on your system. (This has happened!) Your copy might crash and the copy here might not. If you /said/ to expect a crash, then when Emacs here fails to crash, we would know that the bug was not happening. If you don't say to expect a crash, then we would not know whether the bug was happening---we would not be able to draw any conclusion from our observations.

- If the bug is that the Emacs Manual or the Emacs Lisp Reference Manual fails to describe the actual behavior of Emacs, or that the text is confusing, copy in the text from the manual which you think is at fault. If the section is small, just the section name is enough.

- If the manifestation of the bug is an Emacs error message, it is important to report the precise text of the error message, and a backtrace showing how the Lisp program in Emacs arrived at the error.

  To get the error message text accurately, copy it from the /Messages/ buffer into the bug report. Copy all of it, not just part.

  To make a backtrace for the error, use M-x toggle-debug-on-error before the error happens (that is to say, you must give that command and then make the bug happen). This causes the error to start the Lisp debugger, which shows you a backtrace. Copy the text of the debugger's backtrace into the bug report. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Edebug][Edebug]], for information on debugging Emacs Lisp programs with the Edebug package.

  This use of the debugger is possible only if you know how to make the bug happen again. If you can't make it happen again, at least copy the whole error message.

  If Emacs appears to be stuck in an infinite loop or in a very long operation, typing C-g with the variable =debug-on-quit= non-=nil= will start the Lisp debugger and show a backtrace. This backtrace is useful for debugging such long loops, so if you can produce it, copy it into the bug report.

  If you cannot get Emacs to respond to C-g (e.g., because =inhibit-quit= is set), then you can try sending the signal specified by =debug-on-event= (default SIGUSR2) from outside Emacs to cause it to enter the debugger.

- Check whether any programs you have loaded into the Lisp world, including your initialization file, set any variables that may affect the functioning of Emacs. Also, see whether the problem happens in a freshly started Emacs without loading your initialization file (start Emacs with the =-Q= switch to prevent loading the init files). If the problem does /not/ occur then, you must report the precise contents of any programs that you must load into the Lisp world in order to cause the problem to occur.

- If the problem does depend on an init file or other Lisp programs that are not part of the standard Emacs system, then you should make sure it is not a bug in those programs by complaining to their maintainers first. After they verify that they are using Emacs in a way that is supposed to work, they should report the bug.

- If you wish to mention something in the GNU Emacs source, show the line of code with a few lines of context. Don't just give a line number.

  The line numbers in the development sources don't match those in your sources. It would take extra work for the maintainers to determine what code is in your version at a given line number, and we could not be certain.

- Additional information from a C debugger such as GDB might enable someone to find a problem on a machine which he does not have available. If you don't know how to use GDB, please read the GDB manual---it is not very long, and using GDB is easy. You can find the GDB distribution, including the GDB manual in online form, in most of the same places you can find the Emacs distribution. To run Emacs under GDB, you should switch to the

  src

  subdirectory in which Emacs was compiled, then do ‘

  gdb emacs

  '. It is important for the directory

  src

  to be current so that GDB will read the

  .gdbinit

  file in this directory.

  However, you need to think when you collect the additional information if you want it to show what causes the bug.

  For example, many people send just a C-level backtrace, but that is not very useful by itself. A simple backtrace with arguments often conveys little about what is happening inside GNU Emacs, because most of the arguments listed in the backtrace are pointers to Lisp objects. The numeric values of these pointers have no significance whatever; all that matters is the contents of the objects they point to (and most of the contents are themselves pointers).

  To provide useful information, you need to show the values of Lisp objects in Lisp notation. Do this for each variable which is a Lisp object, in several stack frames near the bottom of the stack. Look at the source to see which variables are Lisp objects, because the debugger thinks of them as integers.

  To show a variable's value in Lisp syntax, first print its value, then use the user-defined GDB command =pr= to print the Lisp object in Lisp syntax. (If you must use another debugger, call the function =debug_print= with the object as an argument.) The =pr= command is defined by the file .gdbinit, and it works only if you are debugging a running process (not with a core dump).

  To make Lisp errors stop Emacs and return to GDB, put a breakpoint at =Fsignal=.

  For a short listing of Lisp functions running, type the GDB command =xbacktrace=.

  The file .gdbinit defines several other commands that are useful for examining the data types and contents of Lisp objects. Their names begin with 'x'. These commands work at a lower level than =pr=, and are less convenient, but they may work even when =pr= does not, such as when debugging a core dump or when Emacs has had a fatal signal.

  More detailed advice and other useful techniques for debugging Emacs are available in the file etc/DEBUG in the Emacs distribution. That file also includes instructions for investigating problems whereby Emacs stops responding (many people assume that Emacs is "hung", whereas in fact it might be in an infinite loop).

  To find the file etc/DEBUG in your Emacs installation, use the directory name stored in the variable =data-directory=.

Here are some things that are not necessary in a bug report:

- A description of the envelope of the bug---this is not necessary for a reproducible bug.

  Often people who encounter a bug spend a lot of time investigating which changes to the input file will make the bug go away and which changes will not affect it.

  This is often time-consuming and not very useful, because the way we will find the bug is by running a single example under the debugger with breakpoints, not by pure deduction from a series of examples. You might as well save time by not searching for additional examples. It is better to send the bug report right away, go back to editing, and find another bug to report.

  Of course, if you can find a simpler example to report /instead/ of the original one, that is a convenience. Errors in the output will be easier to spot, running under the debugger will take less time, etc.

  However, simplification is not vital; if you can't do this or don't have time to try, please report the bug with your original test case.

- A core dump file.

  Debugging the core dump might be useful, but it can only be done on your machine, with your Emacs executable. Therefore, sending the core dump file to the Emacs maintainers won't be useful. Above all, don't include the core file in an email bug report! Such a large message can be extremely inconvenient.

- A system-call trace of Emacs execution.

  System-call traces are very useful for certain special kinds of debugging, but in most cases they give little useful information. It is therefore strange that many people seem to think that /the/ way to report information about a crash is to send a system-call trace. Perhaps this is a habit formed from experience debugging programs that don't have source code or debugging symbols.

  In most programs, a backtrace is normally far, far more informative than a system-call trace. Even in Emacs, a simple backtrace is generally more informative, though to give full information you should supplement the backtrace by displaying variable values and printing them as Lisp objects with =pr= (see above).

- A patch for the bug.

  A patch for the bug is useful if it is a good one. But don't omit the other information that a bug report needs, such as the test case, on the assumption that a patch is sufficient. We might see problems with your patch and decide to fix the problem another way, or we might not understand it at all. And if we can't understand what bug you are trying to fix, or why your patch should be an improvement, we mustn't install it.

  See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sending-Patches][Sending Patches]], for guidelines on how to make it easy for us to understand and install your patches.

- A guess about what the bug is or what it depends on.

  Such guesses are usually wrong. Even experts can't guess right about such things without first using the debugger to find the facts.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Checklist][Checklist]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bugs][Bugs]]

* 52.5 Sending Patches for GNU Emacs
    :PROPERTIES:
    :CUSTOM_ID: sending-patches-for-gnu-emacs
    :END:

If you would like to write bug fixes or improvements for GNU Emacs, that is very helpful. When you send your changes, please follow these guidelines to make it easy for the maintainers to use them. If you don't follow these guidelines, your information might still be useful, but using it will take extra work. Maintaining GNU Emacs is a lot of work in the best of circumstances, and we can't keep up unless you do your best to help.

Every patch must have several pieces of information before we can properly evaluate it.

When you have all these pieces, bundle them up in a mail message and send it to the developers. Sending it to [[mailto:bug-gnu-emacs@gnu.org][bug-gnu-emacs@gnu.org]] (which is the bug/feature list) is recommended, because that list is coupled to a tracking system that makes it easier to locate patches. If your patch is not complete and you think it needs more discussion, you might want to send it to [[mailto:emacs-devel@gnu.org][emacs-devel@gnu.org]] instead. If you revise your patch, send it as a followup to the initial topic.

We prefer to get the patches as plain text, either inline (be careful your mail client does not change line breaks) or as MIME attachments.

- Include an explanation with your changes of what problem they fix or what improvement they bring about.

  - For a fix for an existing bug, it is best to reply to the relevant discussion on the 'bug-gnu-emacs' list, or the bug entry in the GNU Bug Tracker at [[https://debbugs.gnu.org/][https://debbugs.gnu.org]]. Explain why your change fixes the bug.\\
  - For a new feature, include a description of the feature and your implementation.\\
  - For a new bug, include a proper bug report for the problem you think you have fixed. We need to convince ourselves that the change is right before installing it. Even if it is correct, we might have trouble understanding it if we don't have a way to reproduce the problem.

- Include all the comments that are appropriate to help people reading the source in the future understand why this change was needed.

- Don't mix together changes made for different reasons. Send them

  individually

  .

  If you make two changes for separate reasons, then we might not want to install them both. We might want to install just one. If you send them all jumbled together in a single set of diffs, we have to do extra work to disentangle them---to figure out which parts of the change serve which purpose. If we don't have time for this, we might have to ignore your changes entirely.

  If you send each change as soon as you have written it, with its own explanation, then two changes never get tangled up, and we can consider each one properly without any extra work to disentangle them.

- Send each change as soon as that change is finished. Sometimes people think they are helping us by accumulating many changes to send them all together. As explained above, this is absolutely the worst thing you could do.

  Since you should send each change separately, you might as well send it right away. That gives us the option of installing it immediately if it is important.

- The patch itself.

  Use 'diff -u' to make your diffs. Diffs without context are hard to install reliably. More than that, they are hard to study; we must always study a patch to decide whether we want to install it. Context format is better than contextless diffs, but we prefer the unified format.

  If you have GNU diff, use 'diff -u -F'[fn:1]+ *('' when making diffs of C code. This shows the name of the function that each change occurs in.

  If you are using the Emacs repository, make sure your copy is up-to-date (e.g., with =git pull=). You can commit your changes to a private branch and generate a patch from the master version by using =git format-patch master=. Or you can leave your changes uncommitted and use =git diff=.

- Avoid any ambiguity as to which is the old version and which is the new. Please make the old version the first argument to diff, and the new version the second argument. And please give one version or the other a name that indicates whether it is the old version or your new changed one.

- Write the commit log entries for your changes. This is both to save us the extra work of writing them, and to help explain your changes so we can understand them.

  The purpose of the commit log is to show people where to find what was changed. So you need to be specific about what functions you changed; in large functions, it's often helpful to indicate where within the function the change was.

  On the other hand, once you have shown people where to find the change, you need not explain its purpose in the change log. Thus, if you add a new function, all you need to say about it is that it is new. If you feel that the purpose needs explaining, it probably does---but put the explanation in comments in the code. It will be more useful there.

  Please look at the commit log entries of recent commits to see what sorts of information to put in, and to learn the style that we use. Note that, unlike some other projects, we do require commit logs for documentation, i.e., Texinfo files. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Change-Log][Change Log]], see https://www.gnu.org/prep/standards/html\_node/Change-Log-Concepts.html, See [[https://www.gnu.org/software/emacs/manual/html_mono/standards.html#Change-Log-Concepts][Change Log Concepts]].

- When you write the fix, keep in mind that we can't install a change that would break other systems. Please think about what effect your change will have if compiled on another type of system.

  Sometimes people send fixes that /might/ be an improvement in general---but it is hard to be sure of this. It's hard to install such changes because we have to study them very carefully. Of course, a good explanation of the reasoning by which you concluded the change was correct can help convince us.

  The safest changes are changes to the configuration files for a particular machine. These are safe because they can't create new bugs on other machines.

  Please help us keep up with the workload by designing the patch in a form that is clearly safe to install.

[fn:1] \_a-zA-Z0-9$
