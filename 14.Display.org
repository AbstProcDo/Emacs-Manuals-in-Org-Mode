#+TITLE: 14.Display
* 14) Controlling the Display


Since only part of a large buffer fits in the window, Emacs has to show only a part of it. This chapter describes commands and variables that let you specify which part of the text you want to see, and how the text is displayed.

* 14.1 Scrolling
    :PROPERTIES:
    :CUSTOM_ID: scrolling
    :END:

If a window is too small to display all the text in its buffer, it displays only a portion of it. Scrolling commands change which portion of the buffer is displayed.

Scrolling forward or up advances the portion of the buffer displayed in the window; equivalently, it moves the buffer text upwards relative to the window. Scrolling backward or down displays an earlier portion of the buffer, and moves the text downwards relative to the window.

In Emacs, scrolling up or down refers to the direction that the text moves in the window, /not/ the direction that the window moves relative to the text. This terminology was adopted by Emacs before the modern meaning of "scrolling up" and "scrolling down" became widespread. Hence, the strange result that scrolls up in the Emacs sense.

The portion of a buffer displayed in a window always contains point. If you move point past the bottom or top of the window, scrolling occurs automatically to bring it back onscreen (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Scrolling][Auto Scrolling]]). You can also scroll explicitly with these commands:

- C-v

-

-

  Scroll forward by nearly a full window (=scroll-up-command=).

- M-v

-

-

  Scroll backward (=scroll-down-command=).

  C-v (=scroll-up-command=) scrolls forward by nearly the whole window height. The effect is to take the two lines at the bottom of the window and put them at the top, followed by lines that were not previously visible. If point was in the text that scrolled off the top, it ends up on the window's new topmost line. The (or ) key is equivalent to C-v.

M-v (=scroll-down-command=) scrolls backward in a similar way. The (or ) key is equivalent to M-v.

The number of lines of overlap left by these scroll commands is controlled by the variable =next-screen-context-lines=, whose default value is 2. You can supply the commands with a numeric prefix argument, n, to scroll by n lines; Emacs attempts to leave point unchanged, so that the text and point move up or down together. C-v with a negative argument is like M-v and vice versa.

By default, these commands signal an error (by beeping or flashing the screen) if no more scrolling is possible, because the window has reached the beginning or end of the buffer. If you change the variable =scroll-error-top-bottom= to =t=, these commands move point to the farthest possible position. If point is already there, the commands signal an error.

Some users like scroll commands to keep point at the same screen position, so that scrolling back to the same screen conveniently returns point to its original position. You can enable this behavior via the variable =scroll-preserve-screen-position=. If the value is =t=, Emacs adjusts point to keep the cursor at the same screen position whenever a scroll command moves it off-window, rather than moving it to the topmost or bottommost line. With any other non-=nil= value, Emacs adjusts point this way even if the scroll command leaves point in the window. This variable affects all the scroll commands documented in this section, as well as scrolling with the mouse wheel (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]]); in general, it affects any command that has a non-=nil= =scroll-command= property. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Property-Lists][Property Lists]].

Sometimes, particularly when you hold down keys such as C-v and M-v, activating keyboard auto-repeat, Emacs fails to keep up with the rapid rate of scrolling requested; the display doesn't update and Emacs can become unresponsive to input for quite a long time. You can counter this sluggishness by setting the variable =fast-but-imprecise-scrolling= to a non-=nil= value. This instructs the scrolling commands not to fontify (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]]) any unfontified text they scroll over, instead to assume it has the default face. This can cause Emacs to scroll to somewhat wrong buffer positions when the faces in use are not all the same size, even with single (i.e., without auto-repeat) scrolling operations.

The commands M-x scroll-up and M-x scroll-down behave similarly to =scroll-up-command= and =scroll-down-command=, except they do not obey =scroll-error-top-bottom=. Prior to Emacs 24, these were the default commands for scrolling up and down. The commands M-x scroll-up-line and M-x scroll-down-line scroll the current window by one line at a time. If you intend to use any of these commands, you might want to give them key bindings (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Scrolling][Auto Scrolling]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Scrolling][Scrolling]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.2 Recentering
    :PROPERTIES:
    :CUSTOM_ID: recentering
    :END:

- C-l

  Scroll the selected window so the current line is the center-most text line; on subsequent consecutive invocations, make the current line the top line, the bottom line, and so on in cyclic order. Possibly redisplay the screen too (=recenter-top-bottom=).

- M-x recenter

  Scroll the selected window so the current line is the center-most text line. Possibly redisplay the screen too.

- C-M-l

  Scroll heuristically to bring useful information onto the screen (=reposition-window=).

  The C-l (=recenter-top-bottom=) command recenters the selected window, scrolling it so that the current screen line is exactly in the center of the window, or as close to the center as possible.

Typing C-l twice in a row (C-l C-l) scrolls the window so that point is on the topmost screen line. Typing a third C-l scrolls the window so that point is on the bottom-most screen line. Each successive C-l cycles through these three positions.

You can change the cycling order by customizing the list variable =recenter-positions=. Each list element should be the symbol =top=, =middle=, or =bottom=, or a number; an integer means to move the line to the specified screen line, while a floating-point number between 0.0 and 1.0 specifies a percentage of the screen space from the top of the window. The default, =(middle top bottom)=, is the cycling order described above. Furthermore, if you change the variable =scroll-margin= to a non-zero value n, C-l always leaves at least n screen lines between point and the top or bottom of the window (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Scrolling][Auto Scrolling]]).

You can also give C-l a prefix argument. A plain prefix argument, C-u C-l, simply recenters the line showing point. A positive argument n moves line showing point n lines down from the top of the window. An argument of zero moves point's line to the top of the window. A negative argument −n moves point's line n lines from the bottom of the window. When given an argument, C-l does not clear the screen or cycle through different screen positions.

If the variable =recenter-redisplay= has a non-=nil= value, each invocation of C-l also clears and redisplays the screen; the special value =tty= (the default) says to do this on text-terminal frames only. Redisplaying is useful in case the screen becomes garbled for any reason (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Screen-Garbled][Screen Garbled]]).

The more primitive command M-x recenter behaves like =recenter-top-bottom=, but does not cycle among screen positions.

C-M-l (=reposition-window=) scrolls the current window heuristically in a way designed to get useful information onto the screen. For example, in a Lisp file, this command tries to get the entire current defun onto the screen if possible.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Horizontal-Scrolling][Horizontal Scrolling]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Recentering][Recentering]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.3 Automatic Scrolling
    :PROPERTIES:
    :CUSTOM_ID: automatic-scrolling
    :END:

Emacs performs automatic scrolling when point moves out of the visible portion of the text. Normally, automatic scrolling centers point vertically in the window, but there are several ways to alter this behavior.

If you set =scroll-conservatively= to a small number n, then moving point just a little off the screen (no more than n lines) causes Emacs to scroll just enough to bring point back on screen; if doing so fails to make point visible, Emacs scrolls just far enough to center point in the window. If you set =scroll-conservatively= to a large number (larger than 100), automatic scrolling never centers point, no matter how far point moves; Emacs always scrolls text just enough to bring point into view, either at the top or bottom of the window depending on the scroll direction. By default, =scroll-conservatively= is 0, which means to always center point in the window.

Another way to control automatic scrolling is to customize the variable =scroll-step=. Its value determines the number of lines by which to automatically scroll, when point moves off the screen. If scrolling by that number of lines fails to bring point back into view, point is centered instead. The default value is zero, which (by default) causes point to always be centered after scrolling.

A third way to control automatic scrolling is to customize the variables =scroll-up-aggressively= and =scroll-down-aggressively=, which directly specify the vertical position of point after scrolling. The value of =scroll-up-aggressively= should be either =nil= (the default), or a floating point number f between 0 and 1. The latter means that when point goes below the bottom window edge (i.e., scrolling forward), Emacs scrolls the window so that point is f parts of the window height from the bottom window edge. Thus, larger f means more aggressive scrolling: more new text is brought into view. The default value, =nil=, is equivalent to 0.5.

Likewise, =scroll-down-aggressively= is used when point goes above the top window edge (i.e., scrolling backward). The value specifies how far point should be from the top margin of the window after scrolling. Thus, as with =scroll-up-aggressively=, a larger value is more aggressive.

Note that the variables =scroll-conservatively=, =scroll-step=, and =scroll-up-aggressively= / =scroll-down-aggressively= control automatic scrolling in contradictory ways. Therefore, you should pick no more than one of these methods to customize automatic scrolling. In case you customize multiple variables, the order of priority is: =scroll-conservatively=, then =scroll-step=, and finally =scroll-up-aggressively= / =scroll-down-aggressively=.

The variable =scroll-margin= restricts how close point can come to the top or bottom of a window (even if aggressive scrolling specifies a fraction f that is larger than the window portion between the top and the bottom margins). Its value is a number of screen lines; if point comes within that many lines of the top or bottom of the window, Emacs performs automatic scrolling. By default, =scroll-margin= is 0. The effective margin size is limited to a quarter of the window height by default, but this limit can be increased up to half (or decreased down to zero) by customizing =maximum-scroll-margin=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Narrowing][Narrowing]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Auto-Scrolling][Auto Scrolling]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.4 Horizontal Scrolling
    :PROPERTIES:
    :CUSTOM_ID: horizontal-scrolling
    :END:

Horizontal scrolling means shifting all the lines sideways within a window, so that some of the text near the left margin is not displayed. When the text in a window is scrolled horizontally, text lines are truncated rather than continued (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Line-Truncation][Line Truncation]]). If a window shows truncated lines, Emacs performs automatic horizontal scrolling whenever point moves off the left or right edge of the screen. By default, all the lines in the window are scrolled horizontally together, but if you set the variable =auto-hscroll-mode= to the special value of =current-line=, only the line showing the cursor will be scrolled. To disable automatic horizontal scrolling entirely, set the variable =auto-hscroll-mode= to =nil=. Note that when the automatic horizontal scrolling is turned off, if point moves off the edge of the screen, the cursor disappears to indicate that. (On text terminals, the cursor is left at the edge instead.)

The variable =hscroll-margin= controls how close point can get to the window's left and right edges before automatic scrolling occurs. It is measured in columns. For example, if the value is 5, then moving point within 5 columns of an edge causes horizontal scrolling away from that edge.

The variable =hscroll-step= determines how many columns to scroll the window when point gets too close to the edge. Zero, the default value, means to center point horizontally within the window. A positive integer value specifies the number of columns to scroll by. A floating-point number (whose value should be between 0 and 1) specifies the fraction of the window's width to scroll by.

You can also perform explicit horizontal scrolling with the following commands:

- C-x <

  Scroll text in current window to the left (=scroll-left=).

- C-x >

  Scroll to the right (=scroll-right=).

  C-x < (=scroll-left=) scrolls text in the selected window to the left by the full width of the window, less two columns. (In other words, the text in the window moves left relative to the window.) With a numeric argument n, it scrolls by n columns.

If the text is scrolled to the left, and point moves off the left edge of the window, the cursor will freeze at the left edge of the window, until point moves back to the displayed portion of the text. This is independent of the current setting of =auto-hscroll-mode=, which, for text scrolled to the left, only affects the behavior at the right edge of the window.

C-x > (=scroll-right=) scrolls similarly to the right. The window cannot be scrolled any farther to the right once it is displayed normally, with each line starting at the window's left margin; attempting to do so has no effect. This means that you don't have to calculate the argument precisely for C-x >; any sufficiently large argument will restore the normal display.

If you use those commands to scroll a window horizontally, that sets a lower bound for automatic horizontal scrolling. Automatic scrolling will continue to scroll the window, but never farther to the right than the amount you previously set by =scroll-left=. When =auto-hscroll-mode= is set to =current-line=, all the lines other than the one showing the cursor will be scrolled by that minimal amount.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#View-Mode][View Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Horizontal-Scrolling][Horizontal Scrolling]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.5 Narrowing
    :PROPERTIES:
    :CUSTOM_ID: narrowing
    :END:

Narrowing means focusing in on some portion of the buffer, making the rest temporarily inaccessible. The portion which you can still get to is called the accessible portion. Canceling the narrowing, which makes the entire buffer once again accessible, is called widening. The bounds of narrowing in effect in a buffer are called the buffer's restriction.

Narrowing can make it easier to concentrate on a single subroutine or paragraph by eliminating clutter. It can also be used to limit the range of operation of a replace command or repeating keyboard macro.

- C-x n n

  Narrow down to between point and mark (=narrow-to-region=).

- C-x n w

  Widen to make the entire buffer accessible again (=widen=).

- C-x n p

  Narrow down to the current page (=narrow-to-page=).

- C-x n d

  Narrow down to the current defun (=narrow-to-defun=).

When you have narrowed down to a part of the buffer, that part appears to be all there is. You can't see the rest, you can't move into it (motion commands won't go outside the accessible part), you can't change it in any way. However, it is not gone, and if you save the file all the inaccessible text will be saved. The word 'Narrow' appears in the mode line whenever narrowing is in effect.

The primary narrowing command is C-x n n (=narrow-to-region=). It sets the current buffer's restrictions so that the text in the current region remains accessible, but all text before the region or after the region is inaccessible. Point and mark do not change.

Alternatively, use C-x n p (=narrow-to-page=) to narrow down to the current page. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Pages][Pages]], for the definition of a page. C-x n d (=narrow-to-defun=) narrows down to the defun containing point (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Defuns][Defuns]]).

The way to cancel narrowing is to widen with C-x n w (=widen=). This makes all text in the buffer accessible again.

You can get information on what part of the buffer you are narrowed down to using the C-x = command. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Position-Info][Position Info]].

Because narrowing can easily confuse users who do not understand it, =narrow-to-region= is normally a disabled command. Attempting to use this command asks for confirmation and gives you the option of enabling it; if you enable the command, confirmation will no longer be required for it. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Disabling][Disabling]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Follow-Mode][Follow Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Narrowing][Narrowing]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.6 View Mode
    :PROPERTIES:
    :CUSTOM_ID: view-mode
    :END:

View mode is a minor mode that lets you scan a buffer by sequential screenfuls. It provides commands for scrolling through the buffer conveniently but not for changing it. Apart from the usual Emacs cursor motion commands, you can type to scroll forward one windowful, S- or to scroll backward, and s to start an incremental search.

Typing q (=View-quit=) disables View mode, and switches back to the buffer and position before View mode was enabled. Typing e (=View-exit=) disables View mode, keeping the current buffer and position.

M-x view-buffer prompts for an existing Emacs buffer, switches to it, and enables View mode. M-x view-file prompts for a file and visits it with View mode enabled.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#View-Mode][View Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.7 Follow Mode
    :PROPERTIES:
    :CUSTOM_ID: follow-mode
    :END:

Follow mode is a minor mode that makes two windows, both showing the same buffer, scroll as a single tall virtual window. To use Follow mode, go to a frame with just one window, split it into two side-by-side windows using C-x 3, and then type M-x follow-mode. From then on, you can edit the buffer in either of the two windows, or scroll either one; the other window follows it.

In Follow mode, if you move point outside the portion visible in one window and into the portion visible in the other window, that selects the other window---again, treating the two as if they were parts of one large window.

To turn off Follow mode, type M-x follow-mode a second time.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Follow-Mode][Follow Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.8 Text Faces
    :PROPERTIES:
    :CUSTOM_ID: text-faces
    :END:

Emacs can display text in several different styles, called faces. Each face can specify various face attributes, such as the font, height, weight, slant, foreground and background color, and underlining or overlining. Most major modes assign faces to the text automatically, via Font Lock mode. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]], for more information about how these faces are assigned.

To see what faces are currently defined, and what they look like, type M-x list-faces-display. With a prefix argument, this prompts for a regular expression, and displays only faces with names matching that regular expression (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]).

It's possible for a given face to look different in different frames. For instance, some text terminals do not support all face attributes, particularly font, height, and width, and some support a limited range of colors. In addition, most Emacs faces are defined so that their attributes are different on light and dark frame backgrounds, for reasons of legibility. By default, Emacs automatically chooses which set of face attributes to display on each frame, based on the frame's current background color. However, you can override this by giving the variable =frame-background-mode= a non-=nil= value. A value of =dark= makes Emacs treat all frames as if they have a dark background, whereas a value of =light= makes it treat all frames as if they have a light background.

You can customize a face to alter its attributes, and save those customizations for future Emacs sessions. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]], for details.

The =default= face is the default for displaying text, and all of its attributes are specified. Its background color is also used as the frame's background color. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]].

Another special face is the =cursor= face. On graphical displays, the background color of this face is used to draw the text cursor. None of the other attributes of this face have any effect; the foreground color for text under the cursor is taken from the background color of the underlying text. On text terminals, the appearance of the text cursor is determined by the terminal, not by the =cursor= face.

You can also use X resources to specify attributes of any particular face. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Resources][Resources]].

Emacs can display variable-width fonts, but some Emacs commands, particularly indentation commands, do not account for variable character display widths. Therefore, we recommend not using variable-width fonts for most faces, particularly those assigned by Font Lock mode.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Standard-Faces][Standard Faces]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.9 Colors for Faces
    :PROPERTIES:
    :CUSTOM_ID: colors-for-faces
    :END:

Faces can have various foreground and background colors. When you specify a color for a face---for instance, when customizing the face (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]])---you can use either a color name or an RGB triplet.

A color name is a pre-defined name, such as 'dark orange' or 'medium sea green'. To view a list of color names, type M-x list-colors-display. To control the order in which colors are shown, customize =list-colors-sort=. If you run this command on a graphical display, it shows the full range of color names known to Emacs (these are the standard X11 color names, defined in X's rgb.txt file). If you run the command on a text terminal, it shows only a small subset of colors that can be safely displayed on such terminals. However, Emacs understands X11 color names even on text terminals; if a face is given a color specified by an X11 color name, it is displayed using the closest-matching terminal color.

An RGB triplet is a string of the form '#RRGGBB'. Each of the R, G, and B components is a hexadecimal number specifying the component's relative intensity, one to four digits long (usually two digits are used). The components must have the same number of digits. For hexadecimal values A to F, either upper or lower case are acceptable.

The M-x list-colors-display command also shows the equivalent RGB triplet for each named color. For instance, 'medium sea green' is equivalent to '#3CB371'.

You can change the foreground and background colors of a face with M-x set-face-foreground and M-x set-face-background. These commands prompt in the minibuffer for a face name and a color, with completion, and then set that face to use the specified color. They affect the face colors on all frames, but their effects do not persist for future Emacs sessions, unlike using the customization buffer or X resources. You can also use frame parameters to set foreground and background colors for a specific frame; See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Frame-Parameters][Frame Parameters]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Scale][Text Scale]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.10 Standard Faces
    :PROPERTIES:
    :CUSTOM_ID: standard-faces
    :END:

Here are the standard faces for specifying text appearance. You can apply them to specific text when you want the effects they produce.

- =default=

  This face is used for ordinary text that doesn't specify any face. Its background color is used as the frame's background color.

- =bold=

  This face uses a bold variant of the default font.

- =italic=

  This face uses an italic variant of the default font.

- =bold-italic=

  This face uses a bold italic variant of the default font.

- =underline=

  This face underlines text.

- =fixed-pitch=

  This face forces use of a fixed-width font. It's reasonable to customize this face to use a different fixed-width font, if you like, but you should not make it a variable-width font.

- =fixed-pitch-serif=

  This face is like =fixed-pitch=, except the font has serifs and looks more like traditional typewriting.

- =variable-pitch=

  This face forces use of a variable-width font.

- =shadow=

  This face is used for making the text less noticeable than the surrounding ordinary text. Usually this can be achieved by using shades of gray in contrast with either black or white default foreground color.

Here's an incomplete list of faces used to highlight parts of the text temporarily for specific purposes. (Many other modes define their own faces for this purpose.)

- =highlight=

  This face is used for text highlighting in various contexts, such as when the mouse cursor is moved over a hyperlink.

- =isearch=

  This face is used to highlight the current Isearch match (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Incremental-Search][Incremental Search]]).

- =query-replace=

  This face is used to highlight the current Query Replace match (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Replace][Replace]]).

- =lazy-highlight=

  This face is used to highlight lazy matches for Isearch and Query Replace (matches other than the current one).

- =region=

  This face is used for displaying an active region (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mark][Mark]]). When Emacs is built with GTK+ support, its colors are taken from the current GTK+ theme.

- =secondary-selection=

  This face is used for displaying a secondary X selection (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Secondary-Selection][Secondary Selection]]).

- =trailing-whitespace=

  The face for highlighting excess spaces and tabs at the end of a line when =show-trailing-whitespace= is non-=nil= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Useless-Whitespace][Useless Whitespace]]).

- =escape-glyph=

  The face for displaying control characters and escape sequences (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]]).

- =homoglyph=

  The face for displaying lookalike characters, i.e., characters that look like but are not the characters being represented (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]]).

- =nobreak-space=

  The face for displaying no-break space characters (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]]).

- =nobreak-hyphen=

  The face for displaying no-break hyphen characters (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]]).

The following faces control the appearance of parts of the Emacs frame:

- =mode-line=

  This face is used for the mode line of the currently selected window, and for menu bars when toolkit menus are not used. By default, it's drawn with shadows for a raised effect on graphical displays, and drawn as the inverse of the default face on non-windowed terminals.

- =mode-line-inactive=

  Like =mode-line=, but used for mode lines of the windows other than the selected one (if =mode-line-in-non-selected-windows= is non-=nil=). This face inherits from =mode-line=, so changes in that face affect mode lines in all windows.

- =mode-line-highlight=

  Like =highlight=, but used for mouse-sensitive portions of text on mode lines. Such portions of text typically pop up tooltips (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tooltips][Tooltips]]) when the mouse pointer hovers above them.

- =mode-line-buffer-id=

  This face is used for buffer identification parts in the mode line.

- =header-line=

  Similar to =mode-line= for a window's header line, which appears at the top of a window just as the mode line appears at the bottom. Most windows do not have a header line---only some special modes, such Info mode, create one.

- =header-line-highlight=

  Similar to =highlight= and =mode-line-highlight=, but used for mouse-sensitive portions of text on header lines. This is a separate face because the =header-line= face might be customized in a way that does not interact well with =highlight=.

- =vertical-border=

  This face is used for the vertical divider between windows on text terminals.

- =minibuffer-prompt=

  This face is used for the prompt strings displayed in the minibuffer. By default, Emacs automatically adds this face to the value of =minibuffer-prompt-properties=, which is a list of text properties (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Properties][Text Properties]]) used to display the prompt text. (This variable takes effect when you enter the minibuffer.)

- =fringe=

  The face for the fringes to the left and right of windows on graphic displays. (The fringes are the narrow portions of the Emacs frame between the text area and the window's right and left borders.) See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fringes][Fringes]].

- =cursor=

  The =:background= attribute of this face specifies the color of the text cursor. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cursor-Display][Cursor Display]].

- =tooltip=

  This face is used for tooltip text. By default, if Emacs is built with GTK+ support, tooltips are drawn via GTK+ and this face has no effect. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tooltips][Tooltips]].

- =mouse=

  This face determines the color of the mouse pointer.

The following faces likewise control the appearance of parts of the Emacs frame, but only on text terminals, or when Emacs is built on X with no toolkit support. (For all other cases, the appearance of the respective frame elements is determined by system-wide settings.)

- =scroll-bar=

  This face determines the visual appearance of the scroll bar. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Scroll-Bars][Scroll Bars]].

- =tool-bar=

  This face determines the color of tool bar icons. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tool-Bars][Tool Bars]].

- =menu=

  This face determines the colors and font of Emacs's menus. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Menu-Bars][Menu Bars]].

- =tty-menu-enabled-face=

  This face is used to display enabled menu items on text-mode terminals.

- =tty-menu-disabled-face=

  This face is used to display disabled menu items on text-mode terminals.

- =tty-menu-selected-face=

  This face is used to display on text-mode terminals the menu item that would be selected if you click a mouse or press .

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Standard-Faces][Standard Faces]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.11 Text Scale
    :PROPERTIES:
    :CUSTOM_ID: text-scale
    :END:

To increase the height of the default face in the current buffer, type C-x C-+ or C-x C-=. To decrease it, type C-x C--. To restore the default (global) face height, type C-x C-0. These keys are all bound to the same command, =text-scale-adjust=, which looks at the last key typed to determine which action to take.

The final key of these commands may be repeated without the leading C-x. For instance, C-x C-= C-= C-= increases the face height by three steps. Each step scales the text height by a factor of 1.2; to change this factor, customize the variable =text-scale-mode-step=. A numeric argument of 0 to the =text-scale-adjust= command restores the default height, the same as typing C-x C-0.

The commands =text-scale-increase= and =text-scale-decrease= increase or decrease the height of the default face, just like C-x C-+ and C-x C-- respectively. You may find it convenient to bind to these commands, rather than =text-scale-adjust=.

The command =text-scale-set= scales the height of the default face in the current buffer to an absolute level specified by its prefix argument.

The above commands automatically enable the minor mode =text-scale-mode= if the current font scaling is other than 1, and disable it otherwise.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Highlight-Interactively][Highlight Interactively]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Scale][Text Scale]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.12 Font Lock mode
    :PROPERTIES:
    :CUSTOM_ID: font-lock-mode
    :END:

Font Lock mode is a minor mode, always local to a particular buffer, which assigns faces to (or fontifies) the text in the buffer. Each buffer's major mode tells Font Lock mode which text to fontify; for instance, programming language modes fontify syntactically relevant constructs like comments, strings, and function names.

Font Lock mode is enabled by default in major modes that support it. To toggle it in the current buffer, type M-x font-lock-mode. A positive numeric argument unconditionally enables Font Lock mode, and a negative or zero argument disables it.

Type M-x global-font-lock-mode to toggle Font Lock mode in all buffers. To impose this setting for future Emacs sessions, customize the variable =global-font-lock-mode= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]), or add the following line to your init file:

#+BEGIN_EXAMPLE
         (global-font-lock-mode 0)
#+END_EXAMPLE

If you have disabled Global Font Lock mode, you can still enable Font Lock for specific major modes by adding the function =font-lock-mode= to the mode hooks (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]). For example, to enable Font Lock mode for editing C files, you can do this:

#+BEGIN_EXAMPLE
         (add-hook 'c-mode-hook 'font-lock-mode)
#+END_EXAMPLE

Font Lock mode uses several specifically named faces to do its job, including =font-lock-string-face=, =font-lock-comment-face=, and others. The easiest way to find them all is to use M-x customize-group font-lock-faces . You can then use that customization buffer to customize the appearance of these faces. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]].

You can customize the variable =font-lock-maximum-decoration= to alter the amount of fontification applied by Font Lock mode, for major modes that support this feature. The value should be a number (with 1 representing a minimal amount of fontification; some modes support levels as high as 3); or =t=, meaning "as high as possible" (the default). To be effective for a given file buffer, the customization of =font-lock-maximum-decoration= should be done /before/ the file is visited; if you already have the file visited in a buffer when you customize this variable, kill the buffer and visit the file again after the customization.

You can also specify different numbers for particular major modes; for example, to use level 1 for C/C++ modes, and the default level otherwise, use the value

#+BEGIN_EXAMPLE
         '((c-mode . 1) (c++-mode . 1)))
#+END_EXAMPLE

Comment and string fontification (or "syntactic" fontification) relies on analysis of the syntactic structure of the buffer text. For the sake of speed, some modes, including Lisp mode, rely on a special convention: an open-parenthesis or open-brace in the leftmost column always defines the beginning of a defun, and is thus always outside any string or comment. Therefore, you should avoid placing an open-parenthesis or open-brace in the leftmost column, if it is inside a string or comment. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Left-Margin-Paren][Left Margin Paren]], for details.

Font Lock highlighting patterns already exist for most modes, but you may want to fontify additional patterns. You can use the function =font-lock-add-keywords=, to add your own highlighting patterns for a particular mode. For example, to highlight 'FIXME:' words in C comments, use this:

#+BEGIN_EXAMPLE
         (add-hook 'c-mode-hook
                   (lambda ()
                    (font-lock-add-keywords nil
                     '(("\\<\\(FIXME\\):" 1
                        font-lock-warning-face t)))))
#+END_EXAMPLE

To remove keywords from the font-lock highlighting patterns, use the function =font-lock-remove-keywords=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Search_002dbased-Fontification][Search-based Fontification]].

Fontifying large buffers can take a long time. To avoid large delays when a file is visited, Emacs initially fontifies only the visible portion of a buffer. As you scroll through the buffer, each portion that becomes visible is fontified as soon as it is displayed; this type of Font Lock is called Just-In-Time (or JIT) Lock. You can control how JIT Lock behaves, including telling it to perform fontification while idle, by customizing variables in the customization group 'jit-lock'. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fringes][Fringes]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.13 Interactive Highlighting
    :PROPERTIES:
    :CUSTOM_ID: interactive-highlighting
    :END:

Highlight Changes mode is a minor mode that highlights the parts of the buffer that were changed most recently, by giving that text a different face. To enable or disable Highlight Changes mode, use M-x highlight-changes-mode.

Hi Lock mode is a minor mode that highlights text that matches regular expressions you specify. For example, you can use it to highlight all the references to a certain variable in a program source file, highlight certain parts in a voluminous output of some program, or highlight certain names in an article. To enable or disable Hi Lock mode, use the command M-x hi-lock-mode. To enable Hi Lock mode for all buffers, use M-x global-hi-lock-mode or place =(global-hi-lock-mode 1)= in your .emacs file.

Hi Lock mode works like Font Lock mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]]), except that you specify explicitly the regular expressions to highlight. You can control them with the following commands. (The key bindings below that begin with C-x w are deprecated in favor of the global M-s h bindings, and will be removed in some future Emacs version.)

- M-s h r regexp face

- C-x w h regexp face

  Highlight text that matches regexp using face face (=highlight-regexp=). The highlighting will remain as long as the buffer is loaded. For example, to highlight all occurrences of the word "whim" using the default face (a yellow background), type M-s h r whim . Any face can be used for highlighting, Hi Lock provides several of its own and these are pre-loaded into a list of default values. While being prompted for a face use M-n and M-p to cycle through them. Setting the option =hi-lock-auto-select-face= to a non-=nil= value causes this command (and other Hi Lock commands that read faces) to automatically choose the next face from the default list without prompting. You can use this command multiple times, specifying various regular expressions to highlight in different ways.

- M-s h u regexp

- C-x w r regexp

  Unhighlight regexp (=unhighlight-regexp=). If you invoke this from the menu, you select the expression to unhighlight from a list. If you invoke this from the keyboard, you use the minibuffer. It will show the most recently added regular expression; use M-n to show the next older expression and M-p to select the next newer expression. (You can also type the expression by hand, with completion.) When the expression you want to unhighlight appears in the minibuffer, press to exit the minibuffer and unhighlight it.

- M-s h l regexp face

- C-x w l regexp face

  Highlight entire lines containing a match for regexp, using face face (=highlight-lines-matching-regexp=).

- M-s h p phrase face

- C-x w p phrase face

  Highlight matches of phrase, using face face (=highlight-phrase=). phrase can be any regexp, but spaces will be replaced by matches to whitespace and initial lower-case letters will become case insensitive.

- M-s h .

- C-x w .

  Highlight the symbol found near point, using the next available face (=highlight-symbol-at-point=).

- M-s h w

- C-x w b

  Insert all the current highlighting regexp/face pairs into the buffer at point, with comment delimiters to prevent them from changing your program. (This key binding runs the =hi-lock-write-interactive-patterns= command.) These patterns are extracted from the comments, if appropriate, if you invoke M-x hi-lock-find-patterns, or if you visit the file while Hi Lock mode is enabled (since that runs =hi-lock-find-patterns=).

- M-s h f

- C-x w i

  Extract regexp/face pairs from comments in the current buffer (=hi-lock-find-patterns=). Thus, you can enter patterns interactively with =highlight-regexp=, store them into the file with =hi-lock-write-interactive-patterns=, edit them (perhaps including different faces for different parenthesized parts of the match), and finally use this command (=hi-lock-find-patterns=) to have Hi Lock highlight the edited patterns. The variable =hi-lock-file-patterns-policy= controls whether Hi Lock mode should automatically extract and highlight patterns found in a file when it is visited. Its value can be =nil= (never highlight), =ask= (query the user), or a function. If it is a function, =hi-lock-find-patterns= calls it with the patterns as argument; if the function returns non-=nil=, the patterns are used. The default is =ask=. Note that patterns are always highlighted if you call =hi-lock-find-patterns= directly, regardless of the value of this variable. Also, =hi-lock-find-patterns= does nothing if the current major mode's symbol is a member of the list =hi-lock-exclude-modes=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Displaying-Boundaries][Displaying Boundaries]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Highlight-Interactively][Highlight Interactively]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.14 Window Fringes
    :PROPERTIES:
    :CUSTOM_ID: window-fringes
    :END:

On graphical displays, each Emacs window normally has narrow fringes on the left and right edges. The fringes are used to display symbols that provide information about the text in the window. You can type M-x fringe-mode to toggle display of the fringes or to modify their width. This command affects fringes in all frames; to modify fringes on the selected frame only, use M-x set-fringe-style. You can make your changes to the fringes permanent by customizing the variable =fringe-mode=.

The most common use of the fringes is to indicate a continuation line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Continuation-Lines][Continuation Lines]]). When one line of text is split into multiple screen lines, the left fringe shows a curving arrow for each screen line except the first, indicating that this is not the real beginning. The right fringe shows a curving arrow for each screen line except the last, indicating that this is not the real end. If the line's direction is right-to-left (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bidirectional-Editing][Bidirectional Editing]]), the meanings of the curving arrows in the fringes are swapped.

The fringes indicate line truncation (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Line-Truncation][Line Truncation]]) with short horizontal arrows meaning there's more text on this line which is scrolled horizontally out of view. Clicking the mouse on one of the arrows scrolls the display horizontally in the direction of the arrow.

The fringes can also indicate other things, such as buffer boundaries (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Displaying-Boundaries][Displaying Boundaries]]), unused lines near the end of the window (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#indicate_002dempty_002dlines][indicate-empty-lines]]), and where a program you are debugging is executing (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Debuggers][Debuggers]]).

The fringe is also used for drawing the cursor, if the current line is exactly as wide as the window and point is at the end of the line. To disable this, change the variable =overflow-newline-into-fringe= to =nil=; this causes Emacs to continue or truncate lines that are exactly as wide as the window.

If you customize =fringe-mode= to remove the fringes on one or both sides of the window display, the features that display on the fringe are not available. Indicators of line continuation and truncation are an exception: when fringes are not available, Emacs uses the leftmost and rightmost character cells to indicate continuation and truncation with special ASCII characters, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Continuation-Lines][Continuation Lines]], and [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Line-Truncation][Line Truncation]]. This reduces the width available for displaying text on each line, because the character cells used for truncation and continuation indicators are reserved for that purpose. Since buffer text can include bidirectional text, and thus both left-to-right and right-to-left paragraphs (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Bidirectional-Editing][Bidirectional Editing]]), removing only one of the fringes still reserves two character cells, one on each side of the window, for truncation and continuation indicators, because these indicators are displayed on opposite sides of the window in right-to-left paragraphs.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Useless-Whitespace][Useless Whitespace]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fringes][Fringes]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.15 Displaying Boundaries
    :PROPERTIES:
    :CUSTOM_ID: displaying-boundaries
    :END:

On graphical displays, Emacs can indicate the buffer boundaries in the fringes. If you enable this feature, the first line and the last line are marked with angle images in the fringes. This can be combined with up and down arrow images which say whether it is possible to scroll the window.

The buffer-local variable =indicate-buffer-boundaries= controls how the buffer boundaries and window scrolling is indicated in the fringes. If the value is =left= or =right=, both angle and arrow bitmaps are displayed in the left or right fringe, respectively.

If value is an alist (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Association-Lists][Association Lists]]), each element =(=indicator=.=position=)= specifies the position of one of the indicators. The indicator must be one of =top=, =bottom=, =up=, =down=, or =t= which specifies the default position for the indicators not present in the alist. The position is one of =left=, =right=, or =nil= which specifies not to show this indicator.

For example, =((top . left) (t . right))= places the top angle bitmap in left fringe, the bottom angle bitmap in right fringe, and both arrow bitmaps in right fringe. To show just the angle bitmaps in the left fringe, but no arrow bitmaps, use =((top .  left) (bottom . left))=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Selective-Display][Selective Display]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Displaying-Boundaries][Displaying Boundaries]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.16 Useless Whitespace
    :PROPERTIES:
    :CUSTOM_ID: useless-whitespace
    :END:

It is easy to leave unnecessary spaces at the end of a line, or empty lines at the end of a buffer, without realizing it. In most cases, this trailing whitespace has no effect, but sometimes it can be a nuisance.

You can make trailing whitespace at the end of a line visible by setting the buffer-local variable =show-trailing-whitespace= to =t=. Then Emacs displays trailing whitespace, using the face =trailing-whitespace=.

This feature does not apply when point is at the end of the line containing the whitespace. Strictly speaking, that is trailing whitespace nonetheless, but displaying it specially in that case looks ugly while you are typing in new text. In this special case, the location of point is enough to show you that the spaces are present.

Type M-x delete-trailing-whitespace to delete all trailing whitespace. This command deletes all extra spaces at the end of each line in the buffer, and all empty lines at the end of the buffer; to ignore the latter, change the variable =delete-trailing-lines= to =nil=. If the region is active, the command instead deletes extra spaces at the end of each line in the region.

On graphical displays, Emacs can indicate unused lines at the end of the window with a small image in the left fringe (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Fringes][Fringes]]). The image appears for screen lines that do not correspond to any buffer text, so blank lines at the end of the buffer stand out because they lack this image. To enable this feature, set the buffer-local variable =indicate-empty-lines= to a non-=nil= value. You can enable or disable this feature for all new buffers by setting the default value of this variable, e.g., =(setq-default indicate-empty-lines t)=.

Whitespace mode is a buffer-local minor mode that lets you visualize many kinds of whitespace in the buffer, by either drawing the whitespace characters with a special face or displaying them as special glyphs. To toggle this mode, type M-x whitespace-mode. The kinds of whitespace visualized are determined by the list variable =whitespace-style=. Individual elements in that list can be toggled on or off in the current buffer by typing M-x whitespace-toggle-options. Here is a partial list of possible elements (see the variable's documentation for the full list):

- =face=

  Enable all visualizations which use special faces. This element has a special meaning: if it is absent from the list, none of the other visualizations take effect except =space-mark=, =tab-mark=, and =newline-mark=.

- =trailing=

  Highlight trailing whitespace.

- =tabs=

  Highlight tab characters.

- =spaces=

  Highlight space and non-breaking space characters.

- =lines=

  Highlight lines longer than 80 columns. To change the column limit, customize the variable =whitespace-line-column=.

- =newline=

  Highlight newlines.

- =empty=

  Highlight empty lines at the beginning and/or end of the buffer.

- =big-indent=

  Highlight too-deep indentation. By default any sequence of at least 4 consecutive tab characters or 32 consecutive space characters is highlighted. To change that, customize the regular expression =whitespace-big-indent-regexp=.

- =space-mark=

  Draw space and non-breaking characters with a special glyph.

- =tab-mark=

  Draw tab characters with a special glyph.

- =newline-mark=

  Draw newline characters with a special glyph.

Global Whitespace mode is a global minor mode that lets you visualize whitespace in all buffers. To toggle individual features, use M-x global-whitespace-toggle-options.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Optional-Mode-Line][Optional Mode Line]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Useless-Whitespace][Useless Whitespace]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.17 Selective Display
    :PROPERTIES:
    :CUSTOM_ID: selective-display
    :END:

Emacs has the ability to hide lines indented more than a given number of columns. You can use this to get an overview of a part of a program.

To hide lines in the current buffer, type C-x $ (=set-selective-display=) with a numeric argument n. Then lines with at least n columns of indentation disappear from the screen. The only indication of their presence is that three dots ('...') appear at the end of each visible line that is followed by one or more hidden ones.

The commands C-n and C-p move across the hidden lines as if they were not there.

The hidden lines are still present in the buffer, and most editing commands see them as usual, so you may find point in the middle of the hidden text. When this happens, the cursor appears at the end of the previous line, after the three dots. If point is at the end of the visible line, before the newline that ends it, the cursor appears before the three dots.

To make all lines visible again, type C-x $ with no argument.

If you set the variable =selective-display-ellipses= to =nil=, the three dots do not appear at the end of a line that precedes hidden lines. Then there is no visible indication of the hidden lines. This variable becomes local automatically when set.

See also [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]] for another way to hide part of the text in a buffer.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Selective-Display][Selective Display]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.18 Optional Mode Line Features
    :PROPERTIES:
    :CUSTOM_ID: optional-mode-line-features
    :END:

The buffer percentage pos indicates the percentage of the buffer above the top of the window. You can additionally display the size of the buffer by typing M-x size-indication-mode to turn on Size Indication mode. The size will be displayed immediately following the buffer percentage like this:

#+BEGIN_EXAMPLE
         pos of size
#+END_EXAMPLE

Here size is the human readable representation of the number of characters in the buffer, which means that 'k' for 10\^3, 'M' for 10\^6, 'G' for 10\^9, etc., are used to abbreviate.

The current line number of point appears in the mode line when Line Number mode is enabled. Use the command M-x line-number-mode to turn this mode on and off; normally it is on. The line number appears after the buffer percentage pos, with the letter 'L' to indicate what it is.

Similarly, you can display the current column number by turning on Column Number mode with M-x column-number-mode. The column number is indicated by the letter 'C'. However, when both of these modes are enabled, the line and column numbers are displayed in parentheses, the line number first, rather than with 'L' and 'C'. For example: '(561,2)'. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]], for more information about minor modes and about how to use these commands.

In Column Number mode, the displayed column number counts from zero starting at the left margin of the window. If you would prefer for the displayed column number to count from one, you may set =column-number-indicator-zero-based= to =nil=.

If you have narrowed the buffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Narrowing][Narrowing]]), the displayed line number is relative to the accessible portion of the buffer. Thus, it isn't suitable as an argument to =goto-line=. (Use =what-line= command to see the line number relative to the whole file.)

If the buffer is very large (larger than the value of =line-number-display-limit=), Emacs won't compute the line number, because that would be too slow; therefore, the line number won't appear on the mode-line. To remove this limit, set =line-number-display-limit= to =nil=.

Line-number computation can also be slow if the lines in the buffer are too long. For this reason, Emacs doesn't display line numbers if the average width, in characters, of lines near point is larger than the value of =line-number-display-limit-width=. The default value is 200 characters.

Emacs can optionally display the time and system load in all mode lines. To enable this feature, type M-x display-time or customize the option =display-time-mode=. The information added to the mode line looks like this:

#+BEGIN_EXAMPLE
         hh:mmPM l.ll
#+END_EXAMPLE

Here hh and mm are the hour and minute, followed always by 'AM' or 'PM'. l.ll is the average number, collected for the last few minutes, of processes in the whole system that were either running or ready to run (i.e., were waiting for an available processor). (Some fields may be missing if your operating system cannot support them.) If you prefer time display in 24-hour format, set the variable =display-time-24hr-format= to =t=.

The word 'Mail' appears after the load level if there is mail for you that you have not read yet. On graphical displays, you can use an icon instead of 'Mail' by customizing =display-time-use-mail-icon=; this may save some space on the mode line. You can customize =display-time-mail-face= to make the mail indicator prominent. Use =display-time-mail-file= to specify the mail file to check, or set =display-time-mail-directory= to specify the directory to check for incoming mail (any nonempty regular file in the directory is considered to be newly arrived mail).

When running Emacs on a laptop computer, you can display the battery charge on the mode-line, by using the command =display-battery-mode= or customizing the variable =display-battery-mode=. The variable =battery-mode-line-format= determines the way the battery charge is displayed; the exact mode-line message depends on the operating system, and it usually shows the current battery charge as a percentage of the total charge.

On graphical displays, the mode line is drawn as a 3D box. If you don't like this effect, you can disable it by customizing the =mode-line= face and setting its =box= attribute to =nil=. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]].

By default, the mode line of nonselected windows is displayed in a different face, called =mode-line-inactive=. Only the selected window is displayed in the =mode-line= face. This helps show which window is selected. When the minibuffer is selected, since it has no mode line, the window from which you activated the minibuffer has its mode line displayed using =mode-line=; as a result, ordinary entry to the minibuffer does not change any mode lines.

You can disable use of =mode-line-inactive= by setting variable =mode-line-in-non-selected-windows= to =nil=; then all mode lines are displayed in the =mode-line= face.

You can customize the mode line display for each of the end-of-line formats by setting each of the variables =eol-mnemonic-unix=, =eol-mnemonic-dos=, =eol-mnemonic-mac=, and =eol-mnemonic-undecided= to the strings you prefer.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cursor-Display][Cursor Display]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Optional-Mode-Line][Optional Mode Line]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.19 How Text Is Displayed
    :PROPERTIES:
    :CUSTOM_ID: how-text-is-displayed
    :END:

Most characters are printing characters: when they appear in a buffer, they are displayed literally on the screen. Printing characters include ASCII numbers, letters, and punctuation characters, as well as many non-ASCII characters.

The ASCII character set contains non-printing control characters. Two of these are displayed specially: the newline character (Unicode code point =U+000A=) is displayed by starting a new line, while the tab character (=U+0009=) is displayed as a space that extends to the next tab stop column (normally every 8 columns). The number of spaces per tab is controlled by the buffer-local variable =tab-width=, which must have an integer value between 1 and 1000, inclusive. Note that the way the tab character in the buffer is displayed has nothing to do with the definition of as a command.

Other ASCII control characters, whose codes are below =U+0020= (octal 40, decimal 32), are displayed as a caret ('\^') followed by the non-control version of the character, with the =escape-glyph= face. For instance, the 'control-A' character, =U+0001=, is displayed as '\^A'.

The raw bytes with codes =U+0080= (octal 200) through =U+009F= (octal 237) are displayed as octal escape sequences, with the =escape-glyph= face. For instance, character code =U+0098= (octal 230) is displayed as '\230'. If you change the buffer-local variable =ctl-arrow= to =nil=, the ASCII control characters are also displayed as octal escape sequences instead of caret escape sequences.

Some non-ASCII characters have the same appearance as an ASCII space or hyphen (minus) character. Such characters can cause problems if they are entered into a buffer without your realization, e.g., by yanking; for instance, source code compilers typically do not treat non-ASCII spaces as whitespace characters. To deal with this problem, Emacs displays such characters specially: it displays =U+00A0= (no-break space) with the =nobreak-space= face, and it displays =U+00AD= (soft hyphen), =U+2010= (hyphen), and =U+2011= (non-breaking hyphen) with the =nobreak-hyphen= face. To disable this, change the variable =nobreak-char-display= to =nil=. If you give this variable a non-=nil= and non-=t= value, Emacs instead displays such characters as a highlighted backslash followed by a space or hyphen.

You can customize the way any particular character code is displayed by means of a display table. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Display-Tables][Display Tables]].

On graphical displays, some characters may have no glyphs in any of the fonts available to Emacs. These glyphless characters are normally displayed as boxes containing the hexadecimal character code. Similarly, on text terminals, characters that cannot be displayed using the terminal encoding (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Terminal-Coding][Terminal Coding]]) are normally displayed as question signs. You can control the display method by customizing the variable =glyphless-char-display-control=. You can also customize the =glyphless-char= face to make these characters more prominent on display. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Glyphless-Chars][Glyphless Character Display]], for details.

Emacs tries to determine if the curved quotes '‘' and ‘'' can be displayed on the current display. By default, if this seems to be so, then Emacs will translate the ASCII quotes (‘=’ and ‘'’), when they appear in messages and help texts, to these curved quotes.  You can influence or inhibit this translation by customizing the user option=text-quoting-style` (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]]).

If the curved quotes =‘=, =’=, =“=, and =”= are known to look just like ASCII characters, they are shown with the =homoglyph= face. Curved quotes that are known not to be displayable are shown as their ASCII approximations ``=,='=, and="=with the=homoglyph` face.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Line-Truncation][Line Truncation]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Text-Display][Text Display]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.20 Displaying the Cursor
    :PROPERTIES:
    :CUSTOM_ID: displaying-the-cursor
    :END:

On a text terminal, the cursor's appearance is controlled by the terminal, largely out of the control of Emacs. Some terminals offer two different cursors: a visible static cursor, and a very visible blinking cursor. By default, Emacs uses the very visible cursor, and switches to it when you start or resume Emacs. If the variable =visible-cursor= is =nil= when Emacs starts or resumes, it uses the normal cursor.

On a graphical display, many more properties of the text cursor can be altered. To customize its color, change the =:background= attribute of the face named =cursor= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]]). (The other attributes of this face have no effect; the text shown under the cursor is drawn using the frame's background color.) To change its shape, customize the buffer-local variable =cursor-type=; possible values are =box= (the default), =hollow= (a hollow box), =bar= (a vertical bar), =(bar .=n=)= (a vertical bar n pixels wide), =hbar= (a horizontal bar), =(hbar .=n=)= (a horizontal bar n pixels tall), or =nil= (no cursor at all).

By default, the cursor stops blinking after 10 blinks, if Emacs does not get any input during that time; any input event restarts the count. You can customize the variable =blink-cursor-blinks= to control that: its value says how many times to blink without input before stopping. Setting that variable to a zero or negative value will make the cursor blink forever. To disable cursor blinking altogether, change the variable =blink-cursor-mode= to =nil= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]), or add the line

#+BEGIN_EXAMPLE
           (blink-cursor-mode 0)
#+END_EXAMPLE

to your init file. Alternatively, you can change how the cursor looks when it blinks off by customizing the list variable =blink-cursor-alist=. Each element in the list should have the form =(=on-type=.=off-type=)=; this means that if the cursor is displayed as on-type when it blinks on (where on-type is one of the cursor types described above), then it is displayed as off-type when it blinks off.

Some characters, such as tab characters, are extra wide. When the cursor is positioned over such a character, it is normally drawn with the default character width. You can make the cursor stretch to cover wide characters, by changing the variable =x-stretch-cursor= to a non-=nil= value.

The cursor normally appears in non-selected windows as a non-blinking hollow box. (For a bar cursor, it instead appears as a thinner bar.) To turn off cursors in non-selected windows, change the variable =cursor-in-non-selected-windows= to =nil=.

To make the cursor even more visible, you can use HL Line mode, a minor mode that highlights the line containing point. Use M-x hl-line-mode to enable or disable it in the current buffer. M-x global-hl-line-mode enables or disables the same mode globally.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Visual-Line-Mode][Visual Line Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cursor-Display][Cursor Display]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.21 Line Truncation
    :PROPERTIES:
    :CUSTOM_ID: line-truncation
    :END:

As an alternative to continuation (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Continuation-Lines][Continuation Lines]]), Emacs can display long lines by truncation. This means that all the characters that do not fit in the width of the screen or window do not appear at all. On graphical displays, a small straight arrow in the fringe indicates truncation at either end of the line. On text terminals, this is indicated with '$' signs in the rightmost and/or leftmost columns.

Horizontal scrolling automatically causes line truncation (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Horizontal-Scrolling][Horizontal Scrolling]]). You can explicitly enable line truncation for a particular buffer with the command M-x toggle-truncate-lines. This works by locally changing the variable =truncate-lines=. If that variable is non-=nil=, long lines are truncated; if it is =nil=, they are continued onto multiple screen lines. Setting the variable =truncate-lines= in any way makes it local to the current buffer; until that time, the default value, which is normally =nil=, is in effect.

If a split window becomes too narrow, Emacs may automatically enable line truncation. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Split-Window][Split Window]], for the variable =truncate-partial-width-windows= which controls this.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display-Custom][Display Custom]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Line-Truncation][Line Truncation]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.22 Visual Line Mode
    :PROPERTIES:
    :CUSTOM_ID: visual-line-mode
    :END:

Another alternative to ordinary line continuation is to use word wrap. Here, each long logical line is divided into two or more screen lines, like in ordinary line continuation. However, Emacs attempts to wrap the line at word boundaries near the right window edge. (If the line's direction is right-to-left, it is wrapped at the left window edge instead.) This makes the text easier to read, as wrapping does not occur in the middle of words.

Word wrap is enabled by Visual Line mode, an optional minor mode. To turn on Visual Line mode in the current buffer, type M-x visual-line-mode; repeating this command turns it off. You can also turn on Visual Line mode using the menu bar: in the Options menu, select the 'Line Wrapping in this Buffer' submenu, followed by the 'Word Wrap (Visual Line mode)' menu item. While Visual Line mode is enabled, the mode line shows the string 'wrap' in the mode display. The command M-x global-visual-line-mode toggles Visual Line mode in all buffers.

In Visual Line mode, some editing commands work on screen lines instead of logical lines: C-a (=beginning-of-visual-line=) moves to the beginning of the screen line, C-e (=end-of-visual-line=) moves to the end of the screen line, and C-k (=kill-visual-line=) kills text to the end of the screen line.

To move by logical lines, use the commands M-x next-logical-line and M-x previous-logical-line. These move point to the next logical line and the previous logical line respectively, regardless of whether Visual Line mode is enabled. If you use these commands frequently, it may be convenient to assign key bindings to them. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]].

By default, word-wrapped lines do not display fringe indicators. Visual Line mode is often used to edit files that contain many long logical lines, so having a fringe indicator for each wrapped line would be visually distracting. You can change this by customizing the variable =visual-line-fringe-indicators=.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Visual-Line-Mode][Visual Line Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Display][Display]]
* 14.23 Customization of Display
    :PROPERTIES:
    :CUSTOM_ID: customization-of-display
    :END:

This section describes variables that control miscellaneous aspects of the appearance of the Emacs screen. Beginning users can skip it.

If you want to have Emacs display line numbers for every line in the buffer, customize the buffer-local variable =display-line-numbers=; it is =nil= by default. This variable can have several different values to support various modes of line-number display:

- =t=

  Display (an absolute) line number before each non-continuation screen line that displays buffer text. If the line is a continuation line, or if the entire screen line displays a display or an overlay string, that line will not be numbered.

- =relative=

  Display relative line numbers before non-continuation lines which show buffer text. The line numbers are relative to the line showing point, so the numbers grow both up and down as lines become farther from the current line.

- =visual=

  This value causes Emacs to count lines visually: only lines actually shown on the display will be counted (disregarding any lines in invisible parts of text), and lines which wrap to consume more than one screen line will be numbered that many times. The displayed numbers are relative, as with =relative= value above. This is handy in modes that fold text, such as Outline mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Outline-Mode][Outline Mode]]), and when you need to move by exact number of screen lines.

- anything else

  Any other non-=nil= value is treated as =t=.

The command M-x display-line-numbers-mode provides a convenient way to turn on display of line numbers. This mode has a globalized variant, =global-display-line-numbers-mode=. The user option =display-line-numbers-type= controls which sub-mode of line-number display, described above, will these modes activate.

Note that line numbers are not displayed in the minibuffer and in the tooltips, even if you turn on =display-line-numbers-mode= globally.

When Emacs displays relative line numbers, you can control the number displayed before the current line, the line showing point. By default, Emacs displays the absolute number of the current line there, even though all the other line numbers are relative. If you customize the variable =display-line-numbers-current-absolute= to a =nil= value, the number displayed for the current line will be zero. This is handy if you don't care about the number of the current line, and want to leave more horizontal space for text in large buffers.

In a narrowed buffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Narrowing][Narrowing]]) lines are normally numbered starting at the beginning of the narrowing. However, if you customize the variable =display-line-numbers-widen= to a non-=nil= value, line numbers will disregard any narrowing and will start at the first character of the buffer.

In selective display mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Selective-Display][Selective Display]]), and other modes that hide many lines from display (such as Outline and Org modes), you may wish to customize the variables =display-line-numbers-width-start= and =display-line-numbers-grow-only=, or set =display-line-numbers-width= to a large enough value, to avoid occasional miscalculations of space reserved for the line numbers.

The line numbers are displayed in a special face =line-number=. The current line number is displayed in a different face, =line-number-current-line=, so you can make the current line's number have a distinct appearance, which will help locating the line showing point.

If the variable =visible-bell= is non-=nil=, Emacs attempts to make the whole screen blink when it would normally make an audible bell sound. This variable has no effect if your terminal does not have a way to make the screen blink.

The variable =echo-keystrokes= controls the echoing of multi-character keys; its value is the number of seconds of pause required to cause echoing to start, or zero, meaning don't echo at all. The value takes effect when there is something to echo. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Echo-Area][Echo Area]].

On graphical displays, Emacs displays the mouse pointer as an hourglass if Emacs is busy. To disable this feature, set the variable =display-hourglass= to =nil=. The variable =hourglass-delay= determines the number of seconds of busy time before the hourglass is shown; the default is 1.

If the mouse pointer lies inside an Emacs frame, Emacs makes it invisible each time you type a character to insert text, to prevent it from obscuring the text. (To be precise, the hiding occurs when you type a self-inserting character. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Inserting-Text][Inserting Text]].) Moving the mouse pointer makes it visible again. To disable this feature, set the variable =make-pointer-invisible= to =nil=.

On graphical displays, the variable =underline-minimum-offset= determines the minimum distance between the baseline and underline, in pixels, for underlined text. By default, the value is 1; increasing it may improve the legibility of underlined text for certain fonts. (However, Emacs will never draw the underline below the current line area.) The variable =x-underline-at-descent-line= determines how to draw underlined text. The default is =nil=, which means to draw it at the baseline level of the font; if you change it to =t=, Emacs draws the underline at the same height as the font's descent line. (If non-default line spacing was specified for the underlined text, see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Line-Height][Line Height]], Emacs draws the underline below the additional spacing.)

The variable =overline-margin= specifies the vertical position of an overline above the text, including the height of the overline itself, in pixels; the default is 2.

On some text terminals, bold face and inverse video together result in text that is hard to read. Call the function =tty-suppress-bold-inverse-default-colors= with a non-=nil= argument to suppress the effect of bold-face in this case.

Raw bytes are displayed in octal format by default, for example a byte with a decimal value of 128 is displayed as =\200=. To change display to the hexadecimal format of =\x80=, set the variable =display-raw-bytes-as-hex= to =t=.
