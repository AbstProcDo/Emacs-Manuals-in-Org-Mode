#+TITLE: 12.Killing

* 12) Killing and Moving Text


In Emacs, killing means erasing text and copying it into the kill ring. Yanking means bringing text from the kill ring back into the buffer. (Some applications use the terms "cutting" and "pasting" for similar operations.) The kill ring is so-named because it can be visualized as a set of blocks of text arranged in a ring, which you can access in cyclic order. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Ring][Kill Ring]].

Killing and yanking are the most common way to move or copy text within Emacs. It is very versatile, because there are commands for killing many different types of syntactic units.

* 12.1 Deletion and Killing
    :PROPERTIES:
    :CUSTOM_ID: deletion-and-killing
    :END:

Most commands which erase text from the buffer save it in the kill ring (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Ring][Kill Ring]]). These are known as kill commands, and their names normally contain the word 'kill' (e.g., =kill-line=). The kill ring stores several recent kills, not just the last one, so killing is a very safe operation: you don't have to worry much about losing text that you previously killed. The kill ring is shared by all buffers, so text that is killed in one buffer can be yanked into another buffer.

When you use C-/ (=undo=) to undo a kill command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Undo][Undo]]), that brings the killed text back into the buffer, but does not remove it from the kill ring.

On graphical displays, killing text also copies it to the system clipboard. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]].

Commands that erase text but do not save it in the kill ring are known as delete commands; their names usually contain the word 'delete'. These include C-d (=delete-char=) and (=delete-backward-char=), which delete only one character at a time, and those commands that delete only spaces or newlines. Commands that can erase significant amounts of nontrivial data generally do a kill operation instead.

You can also use the mouse to kill and yank. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]].

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion][Deletion]]: Commands for deleting small amounts of text and blank areas.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing-by-Lines][Killing by Lines]]: How to kill entire lines of text at one time.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Other-Kill-Commands][Other Kill Commands]]: Commands to kill large regions of text and syntactic units such as words and sentences.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Options][Kill Options]]: Options that affect killing.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing-by-Lines][Killing by Lines]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion-and-Killing][Deletion and Killing]]

** 12.1.1 Deletion
     :PROPERTIES:
     :CUSTOM_ID: deletion
     :END:

Deletion means erasing text and not saving it in the kill ring. For the most part, the Emacs commands that delete text are those that erase just one character or only whitespace.

-

  #+BEGIN_HTML
    <DEL>
  #+END_HTML

-

  Delete the previous character, or the text in the region if it is active (=delete-backward-char=).

-

  Delete the next character, or the text in the region if it is active (=delete-forward-char=).

- C-d

  Delete the next character (=delete-char=).

- M-\\

  Delete spaces and tabs around point (=delete-horizontal-space=).

- M-

  Delete spaces and tabs around point, leaving one space (=just-one-space=).

- C-x C-o

  Delete blank lines around the current line (=delete-blank-lines=).

- M-\^

  Join two lines by deleting the intervening newline, along with any indentation following it (=delete-indentation=).

We have already described the basic deletion commands (=delete-backward-char=), (=delete-forward-char=), and C-d (=delete-char=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Erasing][Erasing]]. With a numeric argument, they delete the specified number of characters. If the numeric argument is omitted or one, and delete all the text in the region if it is active (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Using-Region][Using Region]]).

The other delete commands are those that delete only whitespace characters: spaces, tabs and newlines. M- (=delete-horizontal-space=) deletes all the spaces and tab characters before and after point. With a prefix argument, this only deletes spaces and tab characters before point. M- (=just-one-space=) does likewise but leaves a single space before point, regardless of the number of spaces that existed previously (even if there were none before). With a numeric argument n, it leaves n spaces before point if n is positive; if n is negative, it deletes newlines in addition to spaces and tabs, leaving −n spaces before point. The command =cycle-spacing= acts like a more flexible version of =just-one-space=. It does different things if you call it repeatedly in succession. The first call acts like =just-one-space=, the next removes all whitespace, and a third call restores the original whitespace.

C-x C-o (=delete-blank-lines=) deletes all blank lines after the current line. If the current line is blank, it deletes all blank lines preceding the current line as well (leaving one blank line, the current line). On a solitary blank line, it deletes that line.

M-\^ (=delete-indentation=) joins the current line and the previous line, by deleting a newline and all surrounding spaces, usually leaving a single space. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indentation][M-\^]].

The command =delete-duplicate-lines= searches the region for identical lines, and removes all but one copy of each. Normally it keeps the first instance of each repeated line, but with a C-u prefix argument it keeps the last. With a C-u C-u prefix argument, it only searches for adjacent identical lines. This is a more efficient mode of operation, useful when the lines have already been sorted. With a C-u C-u C-u prefix argument, it retains repeated blank lines.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Other-Kill-Commands][Other Kill Commands]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion][Deletion]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion-and-Killing][Deletion and Killing]]

** 12.1.2 Killing by Lines
     :PROPERTIES:
     :CUSTOM_ID: killing-by-lines
     :END:

- C-k

  Kill rest of line or one or more lines (=kill-line=).

- C-S-backspace

  Kill an entire line at once (=kill-whole-line=)

  The simplest kill command is C-k (=kill-line=). If used at the end of a line, it kills the line-ending newline character, merging the next line into the current one (thus, a blank line is entirely removed). Otherwise, C-k kills all the text from point up to the end of the line; if point was originally at the beginning of the line, this leaves the line blank.

Spaces and tabs at the end of the line are ignored when deciding which case applies. As long as point is after the last non-whitespace character in the line, you can be sure that C-k will kill the newline. To kill an entire non-blank line, go to the beginning and type C-k twice.

In this context, "line" means a logical text line, not a screen line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Continuation-Lines][Continuation Lines]]).

When C-k is given a positive argument n, it kills n lines and the newlines that follow them (text on the current line before point is not killed). With a negative argument −n, it kills n lines preceding the current line, together with the text on the current line before point. C-k with an argument of zero kills the text before point on the current line.

If the variable =kill-whole-line= is non-=nil=, C-k at the very beginning of a line kills the entire line including the following newline. This variable is normally =nil=.

C-S-backspace (=kill-whole-line=) kills a whole line including its newline, regardless of the position of point within the line. Note that many text terminals will prevent you from typing the key sequence C-S-backspace.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Options][Kill Options]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing-by-Lines][Killing by Lines]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion-and-Killing][Deletion and Killing]]

** 12.1.3 Other Kill Commands
     :PROPERTIES:
     :CUSTOM_ID: other-kill-commands
     :END:

- C-w

  Kill the region (=kill-region=).

- M-w

  Copy the region into the kill ring (=kill-ring-save=).

- M-d

  Kill the next word (=kill-word=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Words][Words]].

- M-

  Kill one word backwards (=backward-kill-word=).

- C-x

  Kill back to beginning of sentence (=backward-kill-sentence=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sentences][Sentences]].

- M-k

  Kill to the end of the sentence (=kill-sentence=).

- C-M-k

  Kill the following balanced expression (=kill-sexp=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Expressions][Expressions]].

- M-z char

  Kill through the next occurrence of char (=zap-to-char=).

  One of the commonly-used kill commands is C-w (=kill-region=), which kills the text in the region (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mark][Mark]]). Similarly, M-w (=kill-ring-save=) copies the text in the region into the kill ring without removing it from the buffer. If the mark is inactive when you type C-w or M-w, the command acts on the text between point and where you last set the mark (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Using-Region][Using Region]]).

Emacs also provides commands to kill specific syntactic units: words, with M- and M-d (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Words][Words]]); balanced expressions, with C-M-k (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Expressions][Expressions]]); and sentences, with C-x and M-k (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Sentences][Sentences]]).

The command M-z (=zap-to-char=) combines killing with searching: it reads a character and kills from point up to (and including) the next occurrence of that character in the buffer. A numeric argument acts as a repeat count; a negative argument means to search backward and kill text before point.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Other-Kill-Commands][Other Kill Commands]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion-and-Killing][Deletion and Killing]]

** 12.1.4 Options for Killing
     :PROPERTIES:
     :CUSTOM_ID: options-for-killing
     :END:

Some specialized buffers contain read-only text, which cannot be modified and therefore cannot be killed. The kill commands work specially in a read-only buffer: they move over text and copy it to the kill ring, without actually deleting it from the buffer. Normally, they also beep and display an error message when this happens. But if you set the variable =kill-read-only-ok= to a non-=nil= value, they just print a message in the echo area to explain why the text has not been erased.

If you change the variable =kill-do-not-save-duplicates= to a non-=nil= value, identical subsequent kills yield a single kill-ring entry, without duplication.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Deletion-and-Killing][Deletion and Killing]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]
* 12.2 Yanking
    :PROPERTIES:
    :CUSTOM_ID: yanking
    :END:

Yanking means reinserting text previously killed. The usual way to move or copy text is to kill it and then yank it elsewhere.

- C-y

  Yank the last kill into the buffer, at point (=yank=).

- M-y

  Replace the text just yanked with an earlier batch of killed text (=yank-pop=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]].

- C-M-w

  Cause the following command, if it is a kill command, to append to the previous kill (=append-next-kill=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Appending-Kills][Appending Kills]].

  The basic yanking command is C-y (=yank=). It inserts the most recent kill, leaving the cursor at the end of the inserted text. It also sets the mark at the beginning of the inserted text, without activating the mark; this lets you jump easily to that position, if you wish, with C-u C- (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mark-Ring][Mark Ring]]).

With a plain prefix argument (C-u C-y), the command instead leaves the cursor in front of the inserted text, and sets the mark at the end. Using any other prefix argument specifies an earlier kill; e.g., C-u 4 C-y reinserts the fourth most recent kill. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]].

On graphical displays, C-y first checks if another application has placed any text in the system clipboard more recently than the last Emacs kill. If so, it inserts the clipboard's text instead. Thus, Emacs effectively treats "cut" or "copy" clipboard operations performed in other applications like Emacs kills, except that they are not recorded in the kill ring. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]], for details.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Ring][Kill Ring]]: Where killed text is stored.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]]: Yanking something killed some time ago.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Appending-Kills][Appending Kills]]: Several kills in a row all yank together.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Yanking][Yanking]]

** 12.2.1 The Kill Ring
     :PROPERTIES:
     :CUSTOM_ID: the-kill-ring
     :END:

The kill ring is a list of blocks of text that were previously killed. There is only one kill ring, shared by all buffers, so you can kill text in one buffer and yank it in another buffer. This is the usual way to move text from one buffer to another. (There are several other methods: for instance, you could store the text in a register; see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Registers][Registers]]. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Accumulating-Text][Accumulating Text]], for some other ways to move text around.)

The maximum number of entries in the kill ring is controlled by the variable =kill-ring-max=. The default is 60. If you make a new kill when this limit has been reached, Emacs makes room by deleting the oldest entry in the kill ring.

The actual contents of the kill ring are stored in a variable named =kill-ring=; you can view the entire contents of the kill ring with C-h v kill-ring.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Appending-Kills][Appending Kills]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Kill-Ring][Kill Ring]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Yanking][Yanking]]

** 12.2.2 Yanking Earlier Kills
     :PROPERTIES:
     :CUSTOM_ID: yanking-earlier-kills
     :END:

As explained in [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Yanking][Yanking]], you can use a numeric argument to C-y to yank text that is no longer the most recent kill. This is useful if you remember which kill ring entry you want. If you don't, you can use the M-y (=yank-pop=) command to cycle through the possibilities.

If the previous command was a yank command, M-y takes the text that was yanked and replaces it with the text from an earlier kill. So, to recover the text of the next-to-the-last kill, first use C-y to yank the last kill, and then use M-y to replace it with the previous kill. M-y is allowed only after a C-y or another M-y.

You can understand M-y in terms of a last-yank pointer which points at an entry in the kill ring. Each time you kill, the last-yank pointer moves to the newly made entry at the front of the ring. C-y yanks the entry which the last-yank pointer points to. M-y moves the last-yank pointer to a different entry, and the text in the buffer changes to match. Enough M-y commands can move the pointer to any entry in the ring, so you can get any entry into the buffer. Eventually the pointer reaches the end of the ring; the next M-y loops back around to the first entry again.

M-y moves the last-yank pointer around the ring, but it does not change the order of the entries in the ring, which always runs from the most recent kill at the front to the oldest one still remembered.

M-y can take a numeric argument, which tells it how many entries to advance the last-yank pointer by. A negative argument moves the pointer toward the front of the ring; from the front of the ring, it moves around to the last entry and continues forward from there.

Once the text you are looking for is brought into the buffer, you can stop doing M-y commands and it will stay there. It's just a copy of the kill ring entry, so editing it in the buffer does not change what's in the ring. As long as no new killing is done, the last-yank pointer remains at the same place in the kill ring, so repeating C-y will yank another copy of the same previous kill.

When you call C-y with a numeric argument, that also sets the last-yank pointer to the entry that it yanks.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Yanking][Yanking]]

** 12.2.3 Appending Kills
     :PROPERTIES:
     :CUSTOM_ID: appending-kills
     :END:

Normally, each kill command pushes a new entry onto the kill ring. However, two or more kill commands in a row combine their text into a single entry, so that a single C-y yanks all the text as a unit, just as it was before it was killed.

Thus, if you want to yank text as a unit, you need not kill all of it with one command; you can keep killing line after line, or word after word, until you have killed it all, and you can still get it all back at once.

Commands that kill forward from point add onto the end of the previous killed text. Commands that kill backward from point add text onto the beginning. This way, any sequence of mixed forward and backward kill commands puts all the killed text into one entry without rearrangement. Numeric arguments do not break the sequence of appending kills. For example, suppose the buffer contains this text:

#+BEGIN_EXAMPLE
         This is a line -!-of sample text.
#+END_EXAMPLE

with point shown by -!-. If you type M-d M- M-d M-, killing alternately forward and backward, you end up with 'a line of sample' as one entry in the kill ring, and 'This is text.' in the buffer. (Note the double space between 'is' and 'text', which you can clean up with M- or M-q.)

Another way to kill the same text is to move back two words with M-b M-b, then kill all four words forward with C-u M-d. This produces exactly the same results in the buffer and in the kill ring. M-f M-f C-u M- kills the same text, all going backward; once again, the result is the same. The text in the kill ring entry always has the same order that it had in the buffer before you killed it.

If a kill command is separated from the last kill command by other commands (not just numeric arguments), it starts a new entry on the kill ring. But you can force it to combine with the last killed text, by typing C-M-w (=append-next-kill=) right beforehand. The C-M-w tells its following command, if it is a kill command, to treat the kill as part of the sequence of previous kills. As usual, the kill is appended to the previous killed text if the command kills forward, and prepended if the command kills backward. In this way, you can kill several separated pieces of text and accumulate them to be yanked back in one place.

A kill command following M-w (=kill-ring-save=) does not append to the text that M-w copied into the kill ring.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Accumulating-Text][Accumulating Text]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Yanking][Yanking]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]
* 12.3 "Cut and Paste" Operations on Graphical Displays
    :PROPERTIES:
    :CUSTOM_ID: cut-and-paste-operations-on-graphical-displays
    :END:

In most graphical desktop environments, you can transfer data (usually text) between different applications using a system facility called the clipboard. On X, two other similar facilities are available: the primary selection and the secondary selection. When Emacs is run on a graphical display, its kill and yank commands integrate with these facilities, so that you can easily transfer text between Emacs and other graphical applications.

By default, Emacs uses UTF-8 as the coding system for inter-program text transfers. If you find that the pasted text is not what you expected, you can specify another coding system by typing C-x x or C-x X. You can also request a different data type by customizing =x-select-request-type=. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Communication-Coding][Communication Coding]].

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Clipboard][Clipboard]]: How Emacs uses the system clipboard.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Primary-Selection][Primary Selection]]: The temporarily selected text selection.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Secondary-Selection][Secondary Selection]]: Cutting without altering point and mark.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Primary-Selection][Primary Selection]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]]

** 12.3.1 Using the Clipboard
     :PROPERTIES:
     :CUSTOM_ID: using-the-clipboard
     :END:

The clipboard is the facility that most graphical applications use for "cutting and pasting". When the clipboard exists, the kill and yank commands in Emacs make use of it.

When you kill some text with a command such as C-w (=kill-region=), or copy it to the kill ring with a command such as M-w (=kill-ring-save=), that text is also put in the clipboard.

When an Emacs kill command puts text in the clipboard, the existing clipboard contents are normally lost. Optionally, you can change =save-interprogram-paste-before-kill= to =t=. Then Emacs will first save the clipboard to its kill ring, preventing you from losing the old clipboard data---at the risk of high memory consumption if that data turns out to be large.

Yank commands, such as C-y (=yank=), also use the clipboard. If another application "owns" the clipboard---i.e., if you cut or copied text there more recently than your last kill command in Emacs---then Emacs yanks from the clipboard instead of the kill ring.

Normally, rotating the kill ring with M-y (=yank-pop=) does not alter the clipboard. However, if you change =yank-pop-change-selection= to =t=, then M-y saves the new yank to the clipboard.

To prevent kill and yank commands from accessing the clipboard, change the variable =select-enable-clipboard= to =nil=.

Many X desktop environments support a feature called the clipboard manager. If you exit Emacs while it is the current "owner" of the clipboard data, and there is a clipboard manager running, Emacs transfers the clipboard data to the clipboard manager so that it is not lost. In some circumstances, this may cause a delay when exiting Emacs; if you wish to prevent Emacs from transferring data to the clipboard manager, change the variable =x-select-enable-clipboard-manager= to =nil=.

Since strings containing NUL bytes are usually truncated when passed through the clipboard, Emacs replaces such characters with "\0" before transferring them to the system's clipboard.

Prior to Emacs 24, the kill and yank commands used the primary selection (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Primary-Selection][Primary Selection]]), not the clipboard. If you prefer this behavior, change =select-enable-clipboard= to =nil=, =select-enable-primary= to =t=, and =mouse-drag-copy-region= to =t=. In this case, you can use the following commands to act explicitly on the clipboard: =clipboard-kill-region= kills the region and saves it to the clipboard; =clipboard-kill-ring-save= copies the region to the kill ring and saves it to the clipboard; and =clipboard-yank= yanks the contents of the clipboard at point.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Secondary-Selection][Secondary Selection]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Clipboard][Clipboard]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]]

** 12.3.2 Cut and Paste with Other Window Applications
     :PROPERTIES:
     :CUSTOM_ID: cut-and-paste-with-other-window-applications
     :END:

Under the X Window System, there exists a primary selection containing the last stretch of text selected in an X application (usually by dragging the mouse). Typically, this text can be inserted into other X applications by mouse-2 clicks. The primary selection is separate from the clipboard. Its contents are more fragile; they are overwritten each time you select text with the mouse, whereas the clipboard is only overwritten by explicit cut or copy commands.

Under X, whenever the region is active (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mark][Mark]]), the text in the region is saved in the primary selection. This applies regardless of whether the region was made by dragging or clicking the mouse (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]]), or by keyboard commands (e.g., by typing C- and moving point; see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Setting-Mark][Setting Mark]]).

If you change the variable =select-active-regions= to =only=, Emacs saves only temporarily active regions to the primary selection, i.e., those made with the mouse or with shift selection (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Shift-Selection][Shift Selection]]). If you change =select-active-regions= to =nil=, Emacs avoids saving active regions to the primary selection entirely.

To insert the primary selection into an Emacs buffer, click mouse-2 (=mouse-yank-primary=) where you want to insert it. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]].

MS-Windows provides no primary selection, but Emacs emulates it within a single Emacs session by storing the selected text internally. Therefore, all the features and commands related to the primary selection work on Windows as they do on X, for cutting and pasting within the same session, but not across Emacs sessions or with other applications.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Primary-Selection][Primary Selection]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]]

** 12.3.3 Secondary Selection
     :PROPERTIES:
     :CUSTOM_ID: secondary-selection
     :END:

In addition to the primary selection, the X Window System provides a second similar facility known as the secondary selection. Nowadays, few X applications make use of the secondary selection, but you can access it using the following Emacs commands:

- M-Drag-mouse-1

  Set the secondary selection, with one end at the place where you press down the button, and the other end at the place where you release it (=mouse-set-secondary=). The selected text is highlighted, using the =secondary-selection= face, as you drag. The window scrolls automatically if you drag the mouse off the top or bottom of the window, just like =mouse-set-region= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]]). This command does not alter the kill ring.

- M-mouse-1

  Set one endpoint for the secondary selection (=mouse-start-secondary=); use M-mouse-3 to set the other end and complete the selection. This command cancels any existing secondary selection, when it starts a new one.

- M-mouse-3

  Set the secondary selection (=mouse-secondary-save-then-kill=), with one end at the position you click M-mouse-3, and the other at the position specified previously with M-mouse-1. This also puts the selected text in the kill ring. A second M-mouse-3 at the same place kills the text selected by the secondary selection just made.

- M-mouse-2

  Insert the secondary selection where you click, placing point at the end of the yanked text (=mouse-yank-secondary=).

Double or triple clicking of M-mouse-1 operates on words and lines, much like mouse-1.

If =mouse-yank-at-point= is non-=nil=, M-mouse-2 yanks at point. Then it does not matter precisely where you click, or even which of the frame's windows you click on. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles][Rectangles]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Cut-and-Paste][Cut and Paste]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]
* 12.4 Accumulating Text
    :PROPERTIES:
    :CUSTOM_ID: accumulating-text
    :END:

Usually we copy or move text by killing it and yanking it, but there are other convenient methods for copying one block of text in many places, or for copying many scattered blocks of text into one place. Here we describe the commands to accumulate scattered pieces of text into a buffer or into a file.

- M-x append-to-buffer

  Append region to the contents of a specified buffer.

- M-x prepend-to-buffer

  Prepend region to the contents of a specified buffer.

- M-x copy-to-buffer

  Copy region into a specified buffer, deleting that buffer's old contents.

- M-x insert-buffer

  Insert the contents of a specified buffer into current buffer at point.

- M-x append-to-file

  Append region to the contents of a specified file, at the end.

To accumulate text into a buffer, use M-x append-to-buffer. This reads a buffer name, then inserts a copy of the region into the buffer specified. If you specify a nonexistent buffer, =append-to-buffer= creates the buffer. The text is inserted wherever point is in that buffer. If you have been using the buffer for editing, the copied text goes into the middle of the text of the buffer, starting from wherever point happens to be at that moment.

Point in that buffer is left at the end of the copied text, so successive uses of =append-to-buffer= accumulate the text in the specified buffer in the same order as they were copied. Strictly speaking, =append-to-buffer= does not always append to the text already in the buffer---it appends only if point in that buffer is at the end. However, if =append-to-buffer= is the only command you use to alter a buffer, then point is always at the end.

M-x prepend-to-buffer is just like =append-to-buffer= except that point in the other buffer is left before the copied text, so successive uses of this command add text in reverse order. M-x copy-to-buffer is similar, except that any existing text in the other buffer is deleted, so the buffer is left containing just the text newly copied into it.

The command M-x insert-buffer can be used to retrieve the accumulated text from another buffer. This prompts for the name of a buffer, and inserts a copy of all the text in that buffer into the current buffer at point, leaving point at the beginning of the inserted text. It also adds the position of the end of the inserted text to the mark ring, without activating the mark. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Buffers][Buffers]], for background information on buffers.

Instead of accumulating text in a buffer, you can append text directly into a file with M-x append-to-file. This prompts for a filename, and adds the text of the region to the end of the specified file. The file is changed immediately on disk.

You should use =append-to-file= only with files that are /not/ being visited in Emacs. Using it on a file that you are editing in Emacs would change the file behind Emacs's back, which can lead to losing some of your editing.

Another way to move text around is to store it in a register. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Registers][Registers]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#CUA-Bindings][CUA Bindings]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Accumulating-Text][Accumulating Text]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]
* 12.5 Rectangles
    :PROPERTIES:
    :CUSTOM_ID: rectangles
    :END:

Rectangle commands operate on rectangular areas of the text: all the characters between a certain pair of columns, in a certain range of lines. Emacs has commands to kill rectangles, yank killed rectangles, clear them out, fill them with blanks or text, or delete them. Rectangle commands are useful with text in multicolumn formats, and for changing text into or out of such formats.

To specify a rectangle for a command to work on, set the mark at one corner and point at the opposite corner. The rectangle thus specified is called the region-rectangle. If point and the mark are in the same column, the region-rectangle is empty. If they are in the same line, the region-rectangle is one line high.

The region-rectangle is controlled in much the same way as the region is controlled. But remember that a given combination of point and mark values can be interpreted either as a region or as a rectangle, depending on the command that uses them.

- C-x r k

  Kill the text of the region-rectangle, saving its contents as the last killed rectangle (=kill-rectangle=).

- C-x r M-w

  Save the text of the region-rectangle as the last killed rectangle (=copy-rectangle-as-kill=).

- C-x r d

  Delete the text of the region-rectangle (=delete-rectangle=).

- C-x r y

  Yank the last killed rectangle with its upper left corner at point (=yank-rectangle=).

- C-x r o

  Insert blank space to fill the space of the region-rectangle (=open-rectangle=). This pushes the previous contents of the region-rectangle to the right.

- C-x r N

  Insert line numbers along the left edge of the region-rectangle (=rectangle-number-lines=). This pushes the previous contents of the region-rectangle to the right.

- C-x r c

  Clear the region-rectangle by replacing all of its contents with spaces (=clear-rectangle=).

- M-x delete-whitespace-rectangle

  Delete whitespace in each of the lines on the specified rectangle, starting from the left edge column of the rectangle.

- C-x r t string

  Replace rectangle contents with string on each line (=string-rectangle=).

- M-x string-insert-rectangle string

  Insert string on each line of the rectangle.

- C-x

  Toggle Rectangle Mark mode (=rectangle-mark-mode=). When this mode is active, the region-rectangle is highlighted and can be shrunk/grown, and the standard kill and yank commands operate on it.

The rectangle operations fall into two classes: commands to erase or insert rectangles, and commands to make blank rectangles.

There are two ways to erase the text in a rectangle: C-x r d (=delete-rectangle=) to delete the text outright, or C-x r k (=kill-rectangle=) to remove the text and save it as the last killed rectangle. In both cases, erasing the region-rectangle is like erasing the specified text on each line of the rectangle; if there is any following text on the line, it moves backwards to fill the gap.

Killing a rectangle is not killing in the usual sense; the rectangle is not stored in the kill ring, but in a special place that only records the most recent rectangle killed. This is because yanking a rectangle is so different from yanking linear text that different yank commands have to be used. Yank-popping is not defined for rectangles.

C-x r M-w (=copy-rectangle-as-kill=) is the equivalent of M-w for rectangles: it records the rectangle as the last killed rectangle, without deleting the text from the buffer.

To yank the last killed rectangle, type C-x r y (=yank-rectangle=). The rectangle's first line is inserted at point, the rectangle's second line is inserted at the same horizontal position one line vertically below, and so on. The number of lines affected is determined by the height of the saved rectangle.

For example, you can convert two single-column lists into a double-column list by killing one of the single-column lists as a rectangle, and then yanking it beside the other list.

You can also copy rectangles into and out of registers with C-x r r r and C-x r i r. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangle-Registers][Rectangle Registers]].

There are two commands you can use for making blank rectangles: C-x r c (=clear-rectangle=) blanks out existing text in the region-rectangle, and C-x r o (=open-rectangle=) inserts a blank rectangle.

M-x delete-whitespace-rectangle deletes horizontal whitespace starting from a particular column. This applies to each of the lines in the rectangle, and the column is specified by the left edge of the rectangle. The right edge of the rectangle does not make any difference to this command.

The command C-x r N (=rectangle-number-lines=) inserts line numbers along the left edge of the region-rectangle. Normally, the numbering begins from 1 (for the first line of the rectangle). With a prefix argument, the command prompts for a number to begin from, and for a format string with which to print the numbers (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Formatting-Strings][Formatting Strings]]).

The command C-x r t (=string-rectangle=) replaces the contents of a region-rectangle with a string on each line. The string's width need not be the same as the width of the rectangle. If the string's width is less, the text after the rectangle shifts left; if the string is wider than the rectangle, the text after the rectangle shifts right.

The command M-x string-insert-rectangle is similar to =string-rectangle=, but inserts the string on each line, shifting the original text to the right.

The command C-x (=rectangle-mark-mode=) toggles whether the region-rectangle or the standard region is highlighted (first activating the region if necessary). When this mode is enabled, commands that resize the region (C-f, C-n etc.) do so in a rectangular fashion, and killing and yanking operate on the rectangle. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]. The mode persists only as long as the region is active.

Unlike the standard region, the region-rectangle can have its corners extended past the end of buffer, or inside stretches of white space that point normally cannot enter, like in the middle of a TAB character.

When the region is in rectangle-mark-mode, C-x C-x runs the command =rectangle-exchange-point-and-mark=, which cycles between the four corners of the region-rectangle. This comes in handy if you want to modify the dimensions of the region-rectangle before invoking an operation on the marked text.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles][Rectangles]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Killing][Killing]]
* 12.6 CUA Bindings
    :PROPERTIES:
    :CUSTOM_ID: cua-bindings
    :END:

The command M-x cua-mode sets up key bindings that are compatible with the Common User Access (CUA) system used in many other applications.

When CUA mode is enabled, the keys C-x, C-c, C-v, and C-z invoke commands that cut (kill), copy, paste (yank), and undo respectively. The C-x and C-c keys perform cut and copy only if the region is active. Otherwise, they still act as prefix keys, so that standard Emacs commands like C-x C-c still work. Note that this means the variable =mark-even-if-inactive= has no effect for C-x and C-c (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Using-Region][Using Region]]).

To enter an Emacs command like C-x C-f while the mark is active, use one of the following methods: either hold Shift together with the prefix key, e.g., S-C-x C-f, or quickly type the prefix key twice, e.g., C-x C-x C-f.

To disable the overriding of standard Emacs binding by CUA mode, while retaining the other features of CUA mode described below, set the variable =cua-enable-cua-keys= to =nil=.

CUA mode by default activates Delete-Selection mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Commands][Mouse Commands]]) so that typed text replaces the active region. To use CUA without this behavior, set the variable =cua-delete-selection= to =nil=.

CUA mode provides enhanced rectangle support with visible rectangle highlighting. Use C- to start a rectangle, extend it using the movement commands, and cut or copy it using C-x or C-c. moves the cursor to the next (clockwise) corner of the rectangle, so you can easily expand it in any direction. Normal text you type is inserted to the left or right of each line in the rectangle (on the same side as the cursor).

You can use this rectangle support without activating CUA by calling the =cua-rectangle-mark-mode= command. There's also the standard command =rectangle-mark-mode=, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rectangles][Rectangles]].

With CUA you can easily copy text and rectangles into and out of registers by providing a one-digit numeric prefix to the kill, copy, and yank commands, e.g., C-1 C-c copies the region into register =1=, and C-2 C-v yanks the contents of register =2=.

CUA mode also has a global mark feature which allows easy moving and copying of text between buffers. Use C-S- to toggle the global mark on and off. When the global mark is on, all text that you kill or copy is automatically inserted at the global mark, and text you type is inserted at the global mark rather than at the current position.

For example, to copy words from various buffers into a word list in a given buffer, set the global mark in the target buffer, then navigate to each of the words you want in the list, mark it (e.g., with S-M-f), copy it to the list with C-c or M-w, and insert a newline after the word in the target list by pressing .

Next
r than at the current position.

For example, to copy words from various buffers into a word list in a given buffer, set the global mark in the target buffer, then navigate to each of the words you want in the list, mark it (e.g., with S-M-f), copy it to the list with C-c or M-w, and insert a newline after the word in the target list by pressing .

Next
