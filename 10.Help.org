#+TITLE: 10.Help
* 10) Help

Emacs provides a wide variety of help commands, all accessible through the prefix key C-h (or, equivalently, the function key ). These help commands are described in the following sections. You can also type C-h C-h to view a list of help commands (=help-for-help=). You can scroll the list with and , then type the help command you want. To cancel, type C-g.

Many help commands display their information in a special help buffer. In this buffer, you can type and to scroll and type to follow hyperlinks. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Mode][Help Mode]].

If you are looking for a certain feature, but don't know what it is called or where to look, we recommend three methods. First, try an apropos command, then try searching the manual index, then look in the FAQ and the package keywords.

- C-h a topics

  This searches for commands whose names match the argument topics. The argument can be a keyword, a list of keywords, or a regular expression (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Apropos][Apropos]].

- C-h i d m emacs i topic

  This searches for topic in the indices of the Emacs Info manual, displaying the first match found. Press , to see subsequent matches. You can use a regular expression as topic.

- C-h i d m emacs s topic

  Similar, but searches the /text/ of the manual rather than the indices.

- C-h C-f

  This displays the Emacs FAQ, using Info.

- C-h p

  This displays the available Emacs packages based on keywords. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Package-Keywords][Package Keywords]].

C-h or mean "help" in various other contexts as well. For instance, you can type them after a prefix key to view a list of the keys that can follow the prefix key. (You can also use ? in this context. A few prefix keys don't support C-h or ? in this way, because they define other meanings for those inputs, but they all support .)
* 10.1 Help Summary


Here is a summary of help commands for accessing the built-in documentation. Most of these are described in more detail in the following sections.

- C-h a topics

  Display a list of commands whose names match topics (=apropos-command=).

- C-h b

  Display all active key bindings; minor mode bindings first, then those of the major mode, then global bindings (=describe-bindings=).

- C-h c key

  Show the name of the command that the key sequence key is bound to (=describe-key-briefly=). Here c stands for "character". For more extensive information on key, use C-h k.

- C-h d topics

  Display the commands and variables whose documentation matches topics (=apropos-documentation=).

- C-h e

  Display the /Messages/ buffer (=view-echo-area-messages=).

- C-h f function

  Display documentation on the Lisp function named function (=describe-function=). Since commands are Lisp functions, this works for commands too.

- C-h h

  Display the HELLO file, which shows examples of various character sets.

- C-h i

  Run Info, the GNU documentation browser (=info=). The Emacs manual is available in Info.

- C-h k key

  Display the name and documentation of the command that key runs (=describe-key=).

- C-h l

  Display a description of your last 300 keystrokes (=view-lossage=).

- C-h m

  Display documentation of the current major mode and minor modes (=describe-mode=).

- C-h n

  Display news of recent Emacs changes (=view-emacs-news=).

- C-h o symbol

  Display documentation of the Lisp symbol named symbol (=describe-symbol=). This will show the documentation of all kinds of symbols: functions, variables, and faces.

- C-h p

  Find packages by topic keyword (=finder-by-keyword=). This lists packages using a package menu buffer. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Packages][Packages]].

- C-h P package

  Display documentation about the specified package (=describe-package=).

- C-h r

  Display the Emacs manual in Info (=info-emacs-manual=).

- C-h s

  Display the contents of the current syntax table (=describe-syntax=). The syntax table says which characters are opening delimiters, which are parts of words, and so on. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables][Syntax Tables]], for details.

- C-h t

  Enter the Emacs interactive tutorial (=help-with-tutorial=).

- C-h v var

  Display the documentation of the Lisp variable var (=describe-variable=).

- C-h w command

  Show which keys run the command named command (=where-is=).

- C-h C coding

  Describe the coding system coding (=describe-coding-system=).

- C-h C

  Describe the coding systems currently in use.

- C-h F command

  Enter Info and go to the node that documents the Emacs command command (=Info-goto-emacs-command-node=).

- C-h I method

  Describe the input method method (=describe-input-method=).

- C-h K key

  Enter Info and go to the node that documents the key sequence key (=Info-goto-emacs-key-command-node=).

- C-h L language-env

  Display information on the character sets, coding systems, and input methods used in language environment language-env (=describe-language-environment=).

- C-h S symbol

  Display the Info documentation on symbol symbol according to the programming language you are editing (=info-lookup-symbol=).

- C-h .

  Display the help message for a special text area, if point is in one (=display-local-help=). (These include, for example, links in /Help/ buffers.)

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Name-Help][Name Help]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Summary][Help Summary]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.2 Documentation for a Key
    :PROPERTIES:
    :CUSTOM_ID: documentation-for-a-key
    :END:

The help commands to get information about a key sequence are C-h c (=describe-key-briefly=) and C-h k (=describe-key=).

C-h c key displays in the echo area the name of the command that key is bound to. For example, C-h c C-f displays 'forward-char'.

C-h k key is similar but gives more information: it displays a help buffer containing the command's documentation string, which describes exactly what the command does.

C-h K key displays the section of the Emacs manual that describes the command corresponding to key.

C-h c, C-h k and C-h K work for any sort of key sequences, including function keys, menus, and mouse events (except that C-h c ignores mouse movement events). For instance, after C-h k you can select a menu item from the menu bar, to view the documentation string of the command it runs.

C-h w command lists the keys that are bound to command. It displays the list in the echo area. If it says the command is not on any key, that means you must use M-x to run it. C-h w runs the command =where-is=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Apropos][Apropos]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Help][Key Help]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.3 Help by Command or Variable Name
    :PROPERTIES:
    :CUSTOM_ID: help-by-command-or-variable-name
    :END:

C-h f function (=describe-function=) displays the documentation of Lisp function function, in a window. Since commands are Lisp functions, you can use this method to view the documentation of any command whose name you know. For example,

#+BEGIN_EXAMPLE
         C-h f auto-fill-mode <RET>
#+END_EXAMPLE

displays the documentation of =auto-fill-mode=. This is the only way to get the documentation of a command that is not bound to any key (one which you would normally run using M-x).

C-h f is also useful for Lisp functions that you use in a Lisp program. For example, if you have just written the expression =(make-vector len)= and want to check that you are using =make-vector= properly, type C-h f make-vector . Because C-h f allows all function names, not just command names, you may find that some of your favorite completion abbreviations that work in M-x don't work in C-h f. An abbreviation that is unique among command names may not be unique among all function names.

If you type C-h f , it describes the function called by the innermost Lisp expression in the buffer around point, /provided/ that function name is a valid, defined Lisp function. (That name appears as the default while you enter the argument.) For example, if point is located following the text '(make-vector (car x)', the innermost list containing point is the one that starts with '(make-vector', so C-h f describes the function =make-vector=.

C-h f is also useful just to verify that you spelled a function name correctly. If the minibuffer prompt for C-h f shows the function name from the buffer as the default, it means that name is defined as a Lisp function. Type C-g to cancel the C-h f command if you don't really want to view the documentation.

C-h v (=describe-variable=) is like C-h f but describes Lisp variables instead of Lisp functions. Its default is the Lisp symbol around or before point, if that is the name of a defined Lisp variable. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]].

Help buffers that describe Emacs variables and functions normally have hyperlinks to the corresponding source code, if you have the source files installed (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hyperlinking][Hyperlinking]]).

To find a command's documentation in a manual, use C-h F (=Info-goto-emacs-command-node=). This knows about various manuals, not just the Emacs manual, and finds the right one.

C-h o (=describe-symbol=) is like C-h f and C-h v, but it describes any symbol, be it a function, a variable, or a face. If the symbol has more than one definition, like it has both definition as a function and as a variable, this command will show the documentation of all of them, one after the other.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Mode][Help Mode]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Name-Help][Name Help]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.4 Apropos
    :PROPERTIES:
    :CUSTOM_ID: apropos
    :END:

The apropos commands answer questions like, "What are the commands for working with files?" More precisely, you specify an apropos pattern, which means either a word, a list of words, or a regular expression.

Each of the following apropos commands reads an apropos pattern in the minibuffer, searches for items that match the pattern, and displays the results in a different window.

- C-h a

  Search for commands (=apropos-command=). With a prefix argument, search for noninteractive functions too.

- M-x apropos

  Search for functions and variables. Both interactive functions (commands) and noninteractive functions can be found by this.

- M-x apropos-user-option

  Search for user-customizable variables. With a prefix argument, search for non-customizable variables too.

- M-x apropos-variable

  Search for variables. With a prefix argument, search for customizable variables only.

- M-x apropos-local-variable

  Search for buffer-local variables.

- M-x apropos-value

  Search for variables whose values match the specified pattern. With a prefix argument, search also for functions with definitions matching the pattern, and Lisp symbols with properties matching the pattern.

- M-x apropos-local-value

  Search for buffer-local variables whose values match the specified pattern.

- C-h d

  Search for functions and variables whose documentation strings match the specified pattern (=apropos-documentation=).

The simplest kind of apropos pattern is one word. Anything containing that word matches the pattern. Thus, to find commands that work on files, type C-h a file . This displays a list of all command names that contain 'file', including =copy-file=, =find-file=, and so on. Each command name comes with a brief description and a list of keys you can currently invoke it with. In our example, it would say that you can invoke =find-file= by typing C-x C-f.

For more information about a function definition, variable or symbol property listed in an apropos buffer, you can click on it with mouse-1 or mouse-2, or move there and type .

When you specify more than one word in the apropos pattern, a name must contain at least two of the words in order to match. Thus, if you are looking for commands to kill a chunk of text before point, you could try C-h a kill back backward behind before . The real command name =kill-backward= will match that; if there were a command =kill-text-before=, it would also match, since it contains two of the specified words.

For even greater flexibility, you can specify a regular expression (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). An apropos pattern is interpreted as a regular expression if it contains any of the regular expression special characters, ‘\^$*+?.['.

Following the conventions for naming Emacs commands, here are some words that you'll find useful in apropos patterns. By using them in C-h a, you will also get a feel for the naming conventions.

#+BEGIN_QUOTE
  char, line, word, sentence, paragraph, region, page, sexp, list, defun, rect, buffer, frame, window, face, file, dir, register, mode, beginning, end, forward, backward, next, previous, up, down, search, goto, kill, delete, mark, insert, yank, fill, indent, case, change, set, what, list, find, view, describe, default.
#+END_QUOTE

If the variable =apropos-do-all= is non-=nil=, most apropos commands behave as if they had been given a prefix argument. There is one exception: =apropos-variable= without a prefix argument will always search for all variables, no matter what the value of =apropos-do-all= is.

By default, all apropos commands except =apropos-documentation= list their results in alphabetical order. If the variable =apropos-sort-by-scores= is non-=nil=, these commands instead try to guess the relevance of each result, and display the most relevant ones first. The =apropos-documentation= command lists its results in order of relevance by default; to list them in alphabetical order, change the variable =apropos-documentation-sort-by-scores= to =nil=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Package-Keywords][Package Keywords]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Apropos][Apropos]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.5 Help Mode Commands
    :PROPERTIES:
    :CUSTOM_ID: help-mode-commands
    :END:

Help buffers provide the same commands as View mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#View-Mode][View Mode]]); for instance, scrolls forward, and or S- scrolls backward. A few special commands are also provided:

-

  Follow a cross reference at point (=help-follow=).

-

  Move point forward to the next hyperlink (=forward-button=).

- S-

  Move point back to the previous hyperlink (=backward-button=).

- mouse-1

- mouse-2

  Follow a hyperlink that you click on.

- C-c C-c

  Show all documentation about the symbol at point (=help-follow-symbol=).

- C-c C-f

- r

  Go forward to the next help topic (=help-go-forward=).

- C-c C-b

- l

  Go back to the previous help topic (=help-go-back=).

  When a function name, variable name, or face name (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]]) appears in the documentation in the help buffer, it is normally an underlined hyperlink. To view the associated documentation, move point there and type (=help-follow=), or click on the hyperlink with mouse-1 or mouse-2. Doing so replaces the contents of the help buffer; to retrace your steps, type C-c C-b or l (=help-go-back=). While retracing your steps, you can go forward by using C-c C-f or r (=help-go-forward=).

  A help buffer can also contain hyperlinks to Info manuals, source code definitions, and URLs (web pages). The first two are opened in Emacs, and the third using a web browser via the =browse-url= command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Browse_002dURL][Browse-URL]]).

  In a help buffer, (=forward-button=) moves point forward to the next hyperlink, while S- (=backward-button=) moves point back to the previous hyperlink. These commands act cyclically; for instance, typing at the last hyperlink moves back to the first hyperlink.

To view all documentation about any symbol in the text, move point to the symbol and type C-c C-c (=help-follow-symbol=). This shows the documentation for all the meanings of the symbol---as a variable, as a function, and/or as a face.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Language-Help][Language Help]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Mode][Help Mode]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.6 Keyword Search for Packages
    :PROPERTIES:
    :CUSTOM_ID: keyword-search-for-packages
    :END:

Most optional features in Emacs are grouped into packages. Emacs contains several hundred built-in packages, and more can be installed over the network (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Packages][Packages]]).

To make it easier to find packages related to a topic, most packages are associated with one or more keywords based on what they do. Type C-h p (=finder-by-keyword=) to bring up a list of package keywords, together with a description of what the keywords mean. To view a list of packages for a given keyword, type on that line; this displays the list of packages in a Package Menu buffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Package-Menu][Package Menu]]).

C-h P (=describe-package=) prompts for the name of a package (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Packages][Packages]]), and displays a help buffer describing the attributes of the package and the features that it implements. The buffer lists the keywords that relate to the package in the form of buttons. Click on a button with mouse-1 or mouse-2 to see the list of other packages related to that keyword.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Misc-Help][Misc Help]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Package-Keywords][Package Keywords]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.7 Help for International Language Support
    :PROPERTIES:
    :CUSTOM_ID: help-for-international-language-support
    :END:

For information on a specific language environment (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Language-Environments][Language Environments]]), type C-h L (=describe-language-environment=). This displays a help buffer describing the languages supported by the language environment, and listing the associated character sets, coding systems, and input methods, as well as some sample text for that language environment.

The command C-h h (=view-hello-file=) displays the file etc/HELLO, which demonstrates various character sets by showing how to say "hello" in many languages.

The command C-h I (=describe-input-method=) describes an input method---either a specified input method, or by default the input method currently in use. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Input-Methods][Input Methods]].

The command C-h C (=describe-coding-system=) describes coding systems---either a specified coding system, or the ones currently in use. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Coding-Systems][Coding Systems]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Files][Help Files]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Language-Help][Language Help]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.8 Other Help Commands
    :PROPERTIES:
    :CUSTOM_ID: other-help-commands
    :END:

C-h i (=info=) runs the Info program, which browses structured documentation files. The entire Emacs manual is available within Info, along with many other manuals for the GNU system. Type h after entering Info to run a tutorial on using Info.

With a numeric argument n, C-h i selects the Info buffer '/info/'. This is useful if you want to browse multiple Info manuals simultaneously. If you specify just C-u as the prefix argument, C-h i prompts for the name of a documentation file, so you can browse a file which doesn't have an entry in the top-level Info menu.

The help commands C-h F function and C-h K key, described above, enter Info and go straight to the documentation of function or key.

When editing a program, if you have an Info version of the manual for the programming language, you can use C-h S (=info-lookup-symbol=) to find an entry for a symbol (keyword, function or variable) in the proper manual. The details of how this command works depend on the major mode.

If something surprising happens, and you are not sure what you typed, use C-h l (=view-lossage=). C-h l displays your last 300 input keystrokes and the commands they invoked. If you see commands that you are not familiar with, you can use C-h k or C-h f to find out what they do.

To review recent echo area messages, use C-h e (=view-echo-area-messages=). This displays the buffer /Messages/, where those messages are kept.

Each Emacs major mode typically redefines a few keys and makes other changes in how editing works. C-h m (=describe-mode=) displays documentation on the current major mode, which normally describes the commands and features that are changed in this mode, and also its key bindings.

C-h b (=describe-bindings=) and C-h s (=describe-syntax=) show other information about the current environment within Emacs. C-h b displays a list of all the key bindings now in effect: first the local bindings of the current minor modes, then the local bindings defined by the current major mode, and finally the global bindings (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]). C-h s displays the contents of the syntax table, with explanations of each character's syntax (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables][Syntax Tables]]).

You can get a list of subcommands for a particular prefix key by typing C-h, ?, or (=describe-prefix-bindings=) after the prefix key. (There are a few prefix keys for which not all of these keys work---those that provide their own bindings for that key. One of these prefix keys is , because C-h is actually C-M-h, which marks a defun. However, and ? work fine.)

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Echo][Help Echo]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Misc-Help][Misc Help]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.9 Help Files
    :PROPERTIES:
    :CUSTOM_ID: help-files
    :END:

Apart from the built-in documentation and manuals, Emacs contains several other files describing topics like copying conditions, release notes, instructions for debugging and reporting bugs, and so forth. You can use the following commands to view these files. Apart from C-h g, they all have the form C-h C-char.

​

- C-h C-c

  Display the rules under which you can copy and redistribute Emacs (=describe-copying=).

- C-h C-d

  Display help for debugging Emacs (=view-emacs-debugging=).

- C-h C-e

  Display information about where to get external packages (=view-external-packages=).

- C-h C-f

  Display the Emacs frequently-answered-questions list (=view-emacs-FAQ=).

- C-h g

  Visit the [[https://www.gnu.org/][page]] with information about the GNU Project (=describe-gnu-project=).

- C-h C-m

  Display information about ordering printed copies of Emacs manuals (=view-order-manuals=).

- C-h C-n

  Display the news, which lists the new features in this version of Emacs (=view-emacs-news=).

- C-h C-o

  Display how to order or download the latest version of Emacs and other GNU software (=describe-distribution=).

- C-h C-p

  Display the list of known Emacs problems, sometimes with suggested workarounds (=view-emacs-problems=).

- C-h C-t

  Display the Emacs to-do list (=view-emacs-todo=).

- C-h C-w

  Display the full details on the complete absence of warranty for GNU Emacs (=describe-no-warranty=).

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help-Files][Help Files]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Help][Help]]
* 10.10 Help on Active Text and Tooltips
    :PROPERTIES:
    :CUSTOM_ID: help-on-active-text-and-tooltips
    :END:

In Emacs, stretches of active text (text that does something special in response to mouse clicks or ) often have associated help text. This includes hyperlinks in Emacs buffers, as well as parts of the mode line. On graphical displays, as well as some text terminals which support mouse tracking, moving the mouse over the active text displays the help text as a tooltip. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Tooltips][Tooltips]].

On terminals that don't support mouse-tracking, you can display the help text for active buffer text at point by typing C-h . (=display-local-help=). This shows the help text in the echo area. To display help text automatically whenever it is available at point, set the variable =help-at-pt-display-when-idle= to =t=.
cho area. To display help text automatically whenever it is available at point, set the variable =help-at-pt-display-when-idle= to =t=.
