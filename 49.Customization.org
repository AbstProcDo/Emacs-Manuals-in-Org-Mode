#+TITLE: 49.Customization
* 49) Customization
   :PROPERTIES:
   :CUSTOM_ID: customization
   :END:

This chapter describes some simple methods to customize the behavior of Emacs.

Apart from the methods described here, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#X-Resources][X Resources]] for information about using X resources to customize Emacs, and see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Keyboard-Macros][Keyboard Macros]] for information about recording and replaying keyboard macros. Making more far-reaching and open-ended changes involves writing Emacs Lisp code; see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top][Emacs Lisp]].

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]: Convenient way to browse and change settings.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]: Many Emacs commands examine Emacs variables to decide what to do; by setting variables, you can control their functioning.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]: The keymaps say what command each key runs. By changing them, you can redefine keys.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]: How to write common customizations in the initialization file.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Authentication][Authentication]]: Keeping persistent authentication information.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization][Customization]]

* 49.1 Easy Customization Interface
    :PROPERTIES:
    :CUSTOM_ID: easy-customization-interface
    :END:

Emacs has many settings which you can change. Most settings are customizable variables (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]), which are also called user options. There is a huge number of customizable variables, controlling numerous aspects of Emacs behavior; the variables documented in this manual are listed in [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variable-Index][Variable Index]]. A separate class of settings are the faces, which determine the fonts, colors, and other attributes of text (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]]).

To browse and alter settings (both variables and faces), type M-x customize. This creates a customization buffer, which lets you navigate through a logically organized list of settings, edit and set their values, and save them permanently.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization-Groups][Customization Groups]]: How settings are classified.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Browsing-Custom][Browsing Custom]]: Browsing and searching for settings.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Changing-a-Variable][Changing a Variable]]: How to edit an option's value and set the option.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Saving-Customizations][Saving Customizations]]: Saving customizations for future Emacs sessions.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]]: How to edit the attributes of a face.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]]: Customizing specific settings or groups.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Custom-Themes][Custom Themes]]: Collections of customization settings.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Creating-Custom-Themes][Creating Custom Themes]]: How to create a new custom theme.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Browsing-Custom][Browsing Custom]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.1 Customization Groups
     :PROPERTIES:
     :CUSTOM_ID: customization-groups
     :END:

Customization settings are organized into customization groups. These groups are collected into bigger groups, all the way up to a master group called =Emacs=.

M-x customize creates a customization buffer that shows the top-level =Emacs= group. It looks like this, in part:

#+BEGIN_EXAMPLE
         For help using this buffer, see [Easy Customization] in the [Emacs manual].

         ________________________________________ [ Search ]

          Operate on all settings in this buffer:
          [ Revert... ] [ Apply ] [ Apply and Save ]


         Emacs group: Customization of the One True Editor.
               [State]: visible group members are all at standard values.
               See also [Manual].

         [Editing]      Basic text editing facilities.
         [Convenience]  Convenience features for faster editing.

         ...more second-level groups...
#+END_EXAMPLE

The main part of this buffer shows the 'Emacs' customization group, which contains several other groups ('Editing', 'Convenience', etc.). The contents of those groups are not listed here, only one line of documentation each.

The state of the group indicates whether setting in that group has been edited, set, or saved. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Changing-a-Variable][Changing a Variable]].

Most of the customization buffer is read-only, but it includes some editable fields that you can edit. For example, at the top of the customization buffer is an editable field for searching for settings (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Browsing-Custom][Browsing Custom]]). There are also buttons and links, which you can activate by either clicking with the mouse, or moving point there and typing . For example, the group names like '[Editing]' are links; activating one of these links brings up the customization buffer for that group.

In the customization buffer, you can type (=widget-forward=) to move forward to the next button or editable field. S- (=widget-backward=) moves back to the previous button or editable field.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Changing-a-Variable][Changing a Variable]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization-Groups][Customization Groups]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.2 Browsing and Searching for Settings
     :PROPERTIES:
     :CUSTOM_ID: browsing-and-searching-for-settings
     :END:

From the top-level customization buffer created by M-x customize, you can follow the links to the subgroups of the 'Emacs' customization group. These subgroups may contain settings for you to customize; they may also contain further subgroups, dealing with yet more specialized subsystems of Emacs. As you navigate the hierarchy of customization groups, you should find some settings that you want to customize.

If you are interested in customizing a particular setting or customization group, you can go straight there with the commands M-x customize-option, M-x customize-face, or M-x customize-group. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]].

If you don't know exactly what groups or settings you want to customize, you can search for them using the editable search field at the top of each customization buffer. Here, you can type in a search term---either one or more words separated by spaces, or a regular expression (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Regexps][Regexps]]). Then type in the field, or activate the 'Search' button next to it, to switch to a customization buffer containing groups and settings that match those terms. Note, however, that this feature only finds groups and settings that are loaded in the current Emacs session.

If you don't want customization buffers to show the search field, change the variable =custom-search-field= to =nil=.

The command M-x customize-apropos is similar to using the search field, except that it reads the search term(s) using the minibuffer. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]].

M-x customize-browse is another way to browse the available settings. This command creates a special customization buffer, which shows only the names of groups and settings, in a structured layout. You can show the contents of a group, in the same buffer, by invoking the '[+]' button next to the group name. When the group contents are shown, the button changes to '[-]'; invoking that hides the group contents again. Each group or setting in this buffer has a link which says '[Group]', '[Option]' or '[Face]'. Invoking this link creates an ordinary customization buffer showing just that group, option, or face; this is the way to change settings that you find with M-x customize-browse.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Saving-Customizations][Saving Customizations]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Browsing-Custom][Browsing Custom]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.3 Changing a Variable
     :PROPERTIES:
     :CUSTOM_ID: changing-a-variable
     :END:

Here is an example of what a variable, or user option, looks like in the customization buffer:

#+BEGIN_EXAMPLE
         [Hide] Kill Ring Max: 60
            [State]: STANDARD.
            Maximum length of kill ring before oldest elements are thrown away.
#+END_EXAMPLE

The first line shows that the variable is named =kill-ring-max=, formatted as 'Kill Ring Max' for easier viewing. Its value is '60'. The button labeled '[Hide]', if activated, hides the variable's value and state; this is useful to avoid cluttering up the customization buffer with very long values (for this reason, variables that have very long values may start out hidden). If you use the '[Hide]' button, it changes to '[Show Value]', which you can activate to reveal the value and state. On a graphical display, the '[Hide]' and '[Show Value]' buttons are replaced with graphical triangles pointing downwards and rightwards respectively.

The line after the variable name indicates the customization state of the variable: in this example, 'STANDARD' means you have not changed the variable, so its value is the default one. The '[State]' button gives a menu of operations for customizing the variable.

Below the customization state is the documentation for the variable. This is the same documentation that would be shown by the C-h v command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Examining][Examining]]). If the documentation is more than one line long, only one line may be shown. If so, that line ends with a '[More]' button; activate this to see the full documentation.

To enter a new value for 'Kill Ring Max', just move point to the value and edit it. For example, type M-d to delete the '60' and type in another number. As you begin to alter the text, the '[State]' line will change:

#+BEGIN_EXAMPLE
         [State]: EDITED, shown value does not take effect until you
                  set or save it.
#+END_EXAMPLE

Editing the value does not make it take effect right away. To do that, you must set the variable by activating the '[State]' button and choosing 'Set for Current Session'. Then the variable's state becomes:

#+BEGIN_EXAMPLE
         [State]: SET for current session only.
#+END_EXAMPLE

You don't have to worry about specifying a value that is not valid; the 'Set for Current Session' operation checks for validity and will not install an unacceptable value.

While editing certain kinds of values, such as file names, directory names, and Emacs command names, you can perform completion with C-M-i (=widget-complete=), or the equivalent keys M- or . This behaves much like minibuffer completion (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Completion][Completion]]).

Typing on an editable value field moves point forward to the next field or button, like . You can thus type when you are finished editing a field, to move on to the next button or field. To insert a newline within an editable field, use C-o or C-q C-j.

For some variables, there is only a fixed set of legitimate values, and you are not allowed to edit the value directly. Instead, a '[Value Menu]' button appears before the value; activating this button presents a choice of values. For a boolean "on or off" value, the button says '[Toggle]', and flips the value. After using the '[Value Menu]' or '[Toggle]' button, you must again set the variable to make the chosen value take effect.

Some variables have values with complex structure. For example, the value of =minibuffer-frame-alist= is an association list. Here is how it appears in the customization buffer:

#+BEGIN_EXAMPLE
         [Hide] Minibuffer Frame Alist:
         [INS] [DEL] Parameter: width
                     Value: 80
         [INS] [DEL] Parameter: height
                     Value: 2
         [INS]
            [ State ]: STANDARD.
            Alist of parameters for the initial minibuffer frame. [Hide]
            [...more lines of documentation...]
#+END_EXAMPLE

In this case, each association in the list consists of two items, one labeled 'Parameter' and one labeled 'Value'; both are editable fields. You can delete an association from the list with the '[DEL]' button next to it. To add an association, use the '[INS]' button at the position where you want to insert it; the very last '[INS]' button inserts at the end of the list.

When you set a variable, the new value takes effect only in the current Emacs session. To save the value for future sessions, use the '[State]' button and select the 'Save for Future Sessions' operation. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Saving-Customizations][Saving Customizations]].

You can also restore the variable to its standard value by using the '[State]' button and selecting the 'Erase Customization' operation. There are actually four reset operations:

- 'Undo Edits'

  If you have modified but not yet set the variable, this restores the text in the customization buffer to match the actual value.

- 'Revert This Session's Customizations'

  This restores the value of the variable to the last saved value, if there was one. Otherwise it restores the standard value. It updates the text accordingly.

- 'Erase Customization'

  This sets the variable to its standard value. Any saved value that you have is also eliminated.

- 'Set to Backup Value'

  This sets the variable to a previous value that was set in the customization buffer in this session. If you customize a variable and then reset it, which discards the customized value, you can get the discarded value back again with this operation.

  Sometimes it is useful to record a comment about a specific customization. Use the 'Add Comment' item from the '[State]' menu to create a field for entering the comment.

Near the top of the customization buffer are two lines of buttons:

#+BEGIN_EXAMPLE
          Operate on all settings in this buffer:
          [Revert...] [Apply] [Apply and Save]
#+END_EXAMPLE

The '[Revert...]' button drops a menu with the first 3 reset operations described above. The '[Apply]' button applies the settings for the current session. The '[Apply and Save]' button applies the settings and saves them for future sessions; this button does not appear if Emacs was started with the -q or -Q option (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]).

The command C-c C-c (=Custom-set=) is equivalent to using the '[Set for Current Session]' button. The command C-x C-s (=Custom-save=) is like using the '[Save for Future Sessions]' button.

The '[Exit]' button switches out of the customization buffer, and buries the buffer at the bottom of the buffer list. To make it kill the customization buffer instead, change the variable =custom-buffer-done-kill= to =t=.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Changing-a-Variable][Changing a Variable]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.4 Saving Customizations
     :PROPERTIES:
     :CUSTOM_ID: saving-customizations
     :END:

In the customization buffer, you can save a customization setting by choosing the 'Save for Future Sessions' choice from its '[State]' button. The C-x C-s (=Custom-save=) command, or the '[Apply and Save]' button at the top of the customization buffer, saves all applicable settings in the buffer.

Saving works by writing code to a file, usually your initialization file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]). Future Emacs sessions automatically read this file at startup, which sets up the customizations again.

You can choose to save customizations somewhere other than your initialization file. To make this work, you must add a couple of lines of code to your initialization file, to set the variable =custom-file= to the name of the desired file, and to load that file. For example:

#+BEGIN_EXAMPLE
         (setq custom-file "~/.emacs-custom.el")
         (load custom-file)
#+END_EXAMPLE

You can even specify different customization files for different Emacs versions, like this:

#+BEGIN_EXAMPLE
         (cond ((< emacs-major-version 22)
                ;; Emacs 21 customization.
                (setq custom-file "~/.custom-21.el"))
               ((and (= emacs-major-version 22)
                     (< emacs-minor-version 3))
                ;; Emacs 22 customization, before version 22.3.
                (setq custom-file "~/.custom-22.el"))
               (t
                ;; Emacs version 22.3 or later.
                (setq custom-file "~/.emacs-custom.el")))

         (load custom-file)
#+END_EXAMPLE

If Emacs was invoked with the -q or --no-init-file options (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]), it will not let you save your customizations in your initialization file. This is because saving customizations from such a session would wipe out all the other customizations you might have on your initialization file.

Please note that any customizations you have not chosen to save for future sessions will be lost when you terminate Emacs. If you'd like to be prompted about unsaved customizations at termination time, add the following to your initialization file:

#+BEGIN_EXAMPLE
         (add-hook 'kill-emacs-query-functions
                   'custom-prompt-customize-unsaved-options)
#+END_EXAMPLE

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Saving-Customizations][Saving Customizations]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.5 Customizing Faces
     :PROPERTIES:
     :CUSTOM_ID: customizing-faces
     :END:

You can customize faces (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Faces][Faces]]), which determine how Emacs displays different types of text. Customization groups can contain both variables and faces.

For example, in programming language modes, source code comments are shown with =font-lock-comment-face= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]]). In a customization buffer, that face appears like this, after you click on the '[Show All Attributes]' link:

#+BEGIN_EXAMPLE
         [Hide] Font Lock Comment Face:[sample]
            [State] : STANDARD.
            Font Lock mode face used to highlight comments.
            [ ] Font Family: --
            [ ] Font Foundry: --
            [ ] Width: --
            [ ] Height: --
            [ ] Weight: --
            [ ] Slant: --
            [ ] Underline: --
            [ ] Overline: --
            [ ] Strike-through: --
            [ ] Box around text: --
            [ ] Inverse-video: --
            [X] Foreground: Firebrick     [Choose]  (sample)
            [ ] Background: --
            [ ] Stipple: --
            [ ] Inherit: --
            [Hide Unused Attributes]
#+END_EXAMPLE

The first three lines show the name, '[State]' button, and documentation for the face. Below that is a list of face attributes. In front of each attribute is a checkbox. A filled checkbox, '[X]', means that the face specifies a value for this attribute; an empty checkbox, '[ ]', means that the face does not specify any special value for the attribute. You can activate a checkbox to specify or unspecify its attribute.

A face does not have to specify every single attribute; in fact, most faces only specify a few attributes. In the above example, =font-lock-comment-face= only specifies the foreground color. Any unspecified attribute is taken from the special face named =default=, whose attributes are all specified. The =default= face is the face used to display any text that does not have an explicitly-assigned face; furthermore, its background color attribute serves as the background color of the frame.

The '[Hide Unused Attributes]' button, at the end of the attribute list, hides the unspecified attributes of the face. When attributes are being hidden, the button changes to '[Show All Attributes]', which reveals the entire attribute list. The customization buffer may start out with unspecified attributes hidden, to avoid cluttering the interface.

When an attribute is specified, you can change its value in the usual ways.

Foreground and background colors can be specified using either color names or RGB triplets (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Colors][Colors]]). You can also use the '[Choose]' button to switch to a list of color names; select a color with in that buffer to put the color name in the value field.

Setting, saving and resetting a face work like the same operations for variables (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Changing-a-Variable][Changing a Variable]]).

A face can specify different appearances for different types of displays. For example, a face can make text red on a color display, but use a bold font on a monochrome display. To specify multiple appearances for a face, select 'For All Kinds of Displays' in the menu you get from invoking '[State]'.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Custom-Themes][Custom Themes]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Face-Customization][Face Customization]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.6 Customizing Specific Items
     :PROPERTIES:
     :CUSTOM_ID: customizing-specific-items
     :END:

- M-x customize-option option

- M-x customize-variable option

  Set up a customization buffer for just one user option, option.

- M-x customize-face face

  Set up a customization buffer for just one face, face.

- M-x customize-group group

  Set up a customization buffer for just one group, group.

- M-x customize-apropos regexp

  Set up a customization buffer for all the settings and groups that match regexp.

- M-x customize-changed version

  Set up a customization buffer with all the settings and groups whose meaning has changed since Emacs version version.

- M-x customize-changed-options version

  Set up a customization buffer with all the options whose meaning or default values have changed since Emacs version version.

- M-x customize-saved

  Set up a customization buffer containing all settings that you have saved with customization buffers.

- M-x customize-unsaved

  Set up a customization buffer containing all settings that you have set but not saved.

  If you want to customize a particular user option, type M-x customize-option. This reads the variable name, and sets up the customization buffer with just that one user option. When entering the variable name into the minibuffer, completion is available, but only for the names of variables that have been loaded into Emacs.

  Likewise, you can customize a specific face using M-x customize-face. You can set up a customization buffer for a specific customization group using M-x customize-group.

  M-x customize-apropos prompts for a search term---either one or more words separated by spaces, or a regular expression---and sets up a customization buffer for all /loaded/ settings and groups with matching names. This is like using the search field at the top of the customization buffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization-Groups][Customization Groups]]).

  When you upgrade to a new Emacs version, you might want to consider customizing new settings, and settings whose meanings or default values have changed. To do this, use M-x customize-changed and specify a previous Emacs version number using the minibuffer. It creates a customization buffer which shows all the settings and groups whose definitions have been changed since the specified version, loading them if necessary.

  If you change settings and then decide the change was a mistake, you can use two commands to revisit your changes. Use M-x customize-saved to customize settings that you have saved. Use M-x customize-unsaved to customize settings that you have set but not saved.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Creating-Custom-Themes][Creating Custom Themes]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specific-Customization][Specific Customization]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.7 Custom Themes
     :PROPERTIES:
     :CUSTOM_ID: custom-themes
     :END:

Custom themes are collections of settings that can be enabled or disabled as a unit. You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another.

A Custom theme is stored as an Emacs Lisp source file. If the name of the Custom theme is name, the theme file is named name-theme.el. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Creating-Custom-Themes][Creating Custom Themes]], for the format of a theme file and how to make one.

Type M-x customize-themes to switch to a buffer named /Custom Themes/, which lists the Custom themes that Emacs knows about. By default, Emacs looks for theme files in two locations: the directory specified by the variable =custom-theme-directory= (which defaults to ~/.emacs.d/), and a directory named etc/themes in your Emacs installation (see the variable =data-directory=). The latter contains several Custom themes distributed with Emacs that customize Emacs's faces to fit various color schemes. (Note, however, that Custom themes need not be restricted to this purpose; they can be used to customize variables too.)

If you want Emacs to look for Custom themes in some other directory, add the directory to the list variable =custom-theme-load-path=. Its default value is =(custom-theme-directory t)=; here, the symbol =custom-theme-directory= has the special meaning of the value of the variable =custom-theme-directory=, while =t= stands for the built-in theme directory etc/themes. The themes listed in the /Custom Themes/ buffer are those found in the directories specified by =custom-theme-load-path=.

In the /Custom Themes/ buffer, you can activate the checkbox next to a Custom theme to enable or disable the theme for the current Emacs session. When a Custom theme is enabled, all of its settings (variables and faces) take effect in the Emacs session. To apply the choice of theme(s) to future Emacs sessions, type C-x C-s (=custom-theme-save=) or use the '[Save Theme Settings]' button.

When you first enable a Custom theme, Emacs displays the contents of the theme file and asks if you really want to load it. Because loading a Custom theme can execute arbitrary Lisp code, you should only say yes if you know that the theme is safe; in that case, Emacs offers to remember in the future that the theme is safe (this is done by saving the theme file's SHA-256 hash to the variable =custom-safe-themes=; if you want to treat all themes as safe, change its value to =t=). Themes that come with Emacs (in the etc/themes directory) are exempt from this check, and are always considered safe.

Setting or saving Custom themes actually works by customizing the variable =custom-enabled-themes=. The value of this variable is a list of Custom theme names (as Lisp symbols, e.g., =tango=). Instead of using the /Custom Themes/ buffer to set =custom-enabled-themes=, you can customize the variable using the usual customization interface, e.g., with M-x customize-option. Note that Custom themes are not allowed to set =custom-enabled-themes= themselves.

Any customizations that you make through the customization buffer take precedence over theme settings. This lets you easily override individual theme settings that you disagree with. If settings from two different themes overlap, the theme occurring earlier in =custom-enabled-themes= takes precedence. In the customization buffer, if a setting has been changed from its default by a Custom theme, its 'State' display shows 'THEMED' instead of 'STANDARD'.

You can enable a specific Custom theme in the current Emacs session by typing M-x load-theme. This prompts for a theme name, loads the theme from the theme file, and enables it. If a theme file has been loaded before, you can enable the theme without loading its file by typing M-x enable-theme. To disable a Custom theme, type M-x disable-theme.

To see a description of a Custom theme, type ? on its line in the /Custom Themes/ buffer; or type M-x describe-theme anywhere in Emacs and enter the theme name.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Custom-Themes][Custom Themes]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]

** 49.1.8 Creating Custom Themes
     :PROPERTIES:
     :CUSTOM_ID: creating-custom-themes
     :END:

You can define a Custom theme using an interface similar to the customization buffer, by typing M-x customize-create-theme. This switches to a buffer named /Custom Theme/. It also offers to insert some common Emacs faces into the theme (a convenience, since Custom themes are often used to customize faces). If you answer no, the theme will initially contain no settings.

Near the top of the /Custom Theme/ buffer, there are editable fields where you can enter the theme's name and description. The name can be anything except 'user'. The description is the one that will be shown when you invoke M-x describe-theme for the theme. Its first line should be a brief one-sentence summary; in the buffer made by M-x customize-themes, this sentence is displayed next to the theme name.

To add a new setting to the theme, use the '[Insert Additional Face]' or '[Insert Additional Variable]' buttons. Each button reads a face or variable name using the minibuffer, with completion, and inserts a customization entry for the face or variable. You can edit the variable values or face attributes in the same way as in a normal customization buffer. To remove a face or variable from the theme, uncheck the checkbox next to its name.

After specifying the Custom theme's faces and variables, type C-x C-s (=custom-theme-write=) or use the buffer's '[Save Theme]' button. This saves the theme file, named name-theme.el where name is the theme name, in the directory named by =custom-theme-directory=.

From the /Custom Theme/ buffer, you can view and edit an existing Custom theme by activating the '[Visit Theme]' button and specifying the theme name. You can also add the settings of another theme into the buffer, using the '[Merge Theme]' button. You can import your non-theme settings into a Custom theme by using the '[Merge Theme]' button and specifying the special theme named 'user'.

A theme file is simply an Emacs Lisp source file, and loading the Custom theme works by loading the Lisp file. Therefore, you can edit a theme file directly instead of using the /Custom Theme/ buffer. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Custom-Themes][Custom Themes]], for details.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization][Customization]]

* 49.2 Variables
    :PROPERTIES:
    :CUSTOM_ID: variables
    :END:

A variable is a Lisp symbol which has a value. The symbol's name is also called the variable name. A variable name can contain any characters that can appear in a file, but most variable names consist of ordinary words separated by hyphens.

The name of the variable serves as a compact description of its role. Most variables also have a documentation string, which describes what the variable's purpose is, what kind of value it should have, and how the value will be used. You can view this documentation using the help command C-h v (=describe-variable=). See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Examining][Examining]].

Emacs uses many Lisp variables for internal record keeping, but the most interesting variables for a non-programmer user are those meant for users to change---these are called customizable variables or user options (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]). In the following sections, we will describe other aspects of Emacs variables, such as how to set them outside Customize.

Emacs Lisp allows any variable (with a few exceptions) to have any kind of value. However, many variables are meaningful only if assigned values of a certain type. For example, only numbers are meaningful values for =kill-ring-max=, which specifies the maximum length of the kill ring (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Earlier-Kills][Earlier Kills]]); if you give =kill-ring-max= a string value, commands such as C-y (=yank=) will signal an error. On the other hand, some variables don't care about type; for instance, if a variable has one effect for =nil= values and another effect for non-=nil= values, then any value that is not the symbol =nil= induces the second effect, regardless of its type (by convention, we usually use the value =t=---a symbol which stands for "true"---to specify a non-=nil= value). If you set a variable using the customization buffer, you need not worry about giving it an invalid type: the customization buffer usually only allows you to enter meaningful values. When in doubt, use C-h v (=describe-variable=) to check the variable's documentation string to see kind of value it expects (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Examining][Examining]]).

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Examining][Examining]]: Examining or setting one variable's value.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]: Hook variables let you specify programs for parts of Emacs to run on particular occasions.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]]: Per-buffer values of variables.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]]: How files can specify variable values.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Directory-Variables][Directory Variables]]: How variable values can be specified by directory.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]

** 49.2.1 Examining and Setting Variables
     :PROPERTIES:
     :CUSTOM_ID: examining-and-setting-variables
     :END:

​

- C-h v var

  Display the value and documentation of variable var (=describe-variable=).

- M-x set-variable var value

  Change the value of variable var to value.

To examine the value of a variable, use C-h v (=describe-variable=). This reads a variable name using the minibuffer, with completion, and displays both the value and the documentation of the variable. For example,

#+BEGIN_EXAMPLE
         C-h v fill-column <RET>
#+END_EXAMPLE

displays something like this:

#+BEGIN_EXAMPLE
         fill-column is a variable defined in ‘C source code’.
         Its value is 70

           Automatically becomes buffer-local when set.
           This variable is safe as a file local variable if its value
           satisfies the predicate ‘integerp’.

         Documentation:
         Column beyond which automatic line-wrapping should happen.
         Interactively, you can set the buffer local value using C-x f.

         You can customize this variable.
#+END_EXAMPLE

The line that says 'You can customize the variable' indicates that this variable is a user option. C-h v is not restricted to user options; it allows non-customizable variables too.

The most convenient way to set a specific customizable variable is with M-x set-variable. This reads the variable name with the minibuffer (with completion), and then reads a Lisp expression for the new value using the minibuffer a second time (you can insert the old value into the minibuffer for editing via M-n). For example,

#+BEGIN_EXAMPLE
         M-x set-variable <RET> fill-column <RET> 75 <RET>
#+END_EXAMPLE

sets =fill-column= to 75.

M-x set-variable is limited to customizable variables, but you can set any variable with a Lisp expression like this:

#+BEGIN_EXAMPLE
         (setq fill-column 75)
#+END_EXAMPLE

To execute such an expression, type M-: (=eval-expression=) and enter the expression in the minibuffer (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Lisp-Eval][Lisp Eval]]). Alternatively, go to the /scratch/ buffer, type in the expression, and then type C-j (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Lisp-Interaction][Lisp Interaction]]).

Setting variables, like all means of customizing Emacs except where otherwise stated, affects only the current Emacs session. The only way to alter the variable in future sessions is to put something in your initialization file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Examining][Examining]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]

** 49.2.2 Hooks
     :PROPERTIES:
     :CUSTOM_ID: hooks
     :END:

Hooks are an important mechanism for customizing Emacs. A hook is a Lisp variable which holds a list of functions, to be called on some well-defined occasion. (This is called running the hook.) The individual functions in the list are called the hook functions of the hook. For example, the hook =kill-emacs-hook= runs just before exiting Emacs (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Exiting][Exiting]]).

Most hooks are normal hooks. This means that when Emacs runs the hook, it calls each hook function in turn, with no arguments. We have made an effort to keep most hooks normal, so that you can use them in a uniform way. Every variable whose name ends in '-hook' is a normal hook.

A few hooks are abnormal hooks. Their names end in '-functions', instead of '-hook' (some old code may also use the deprecated suffix '-hooks'). What makes these hooks abnormal is the way its functions are called---perhaps they are given arguments, or perhaps the values they return are used in some way. For example, =find-file-not-found-functions= is abnormal because as soon as one hook function returns a non-=nil= value, the rest are not called at all (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Visiting][Visiting]]). The documentation of each abnormal hook variable explains how its functions are used.

You can set a hook variable with =setq= like any other Lisp variable, but the recommended way to add a function to a hook (either normal or abnormal) is to use =add-hook=, as shown by the following examples. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Hooks][Hooks]], for details.

Most major modes run one or more mode hooks as the last step of initialization. Mode hooks are a convenient way to customize the behavior of individual modes; they are always normal. For example, here's how to set up a hook to turn on Auto Fill mode in Text mode and other modes based on Text mode:

#+BEGIN_EXAMPLE
         (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_EXAMPLE

This works by calling =auto-fill-mode=, which enables the minor mode when no argument is supplied (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]). Next, suppose you don't want Auto Fill mode turned on in LaTeX mode, which is one of the modes based on Text mode. You can do this with the following additional line:

#+BEGIN_EXAMPLE
         (add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))
#+END_EXAMPLE

Here we have used the special macro =lambda= to construct an anonymous function (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Lambda-Expressions][Lambda Expressions]]), which calls =auto-fill-mode= with an argument of =-1= to disable the minor mode. Because LaTeX mode runs =latex-mode-hook= after running =text-mode-hook=, the result leaves Auto Fill mode disabled.

Here is a more complex example, showing how to use a hook to customize the indentation of C code:

#+BEGIN_EXAMPLE
         (setq my-c-style
           '((c-comment-only-line-offset . 4)
             (c-cleanup-list . (scope-operator
                                empty-defun-braces
                                defun-close-semi))))

         (add-hook 'c-mode-common-hook
           (lambda () (c-add-style "my-style" my-c-style t)))
#+END_EXAMPLE

Major mode hooks also apply to other major modes derived from the original mode (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Derived-Modes][Derived Modes]]). For instance, HTML mode is derived from Text mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#HTML-Mode][HTML Mode]]); when HTML mode is enabled, it runs =text-mode-hook= before running =html-mode-hook=. This provides a convenient way to use a single hook to affect several related modes. In particular, if you want to apply a hook function to any programming language mode, add it to =prog-mode-hook=; Prog mode is a major mode that does little else than to let other major modes inherit from it, exactly for this purpose.

It is best to design your hook functions so that the order in which they are executed does not matter. Any dependence on the order is asking for trouble. However, the order is predictable: the hook functions are executed in the order they appear in the hook.

If you play with adding various different versions of a hook function by calling =add-hook= over and over, remember that all the versions you added will remain in the hook variable together. You can clear out individual functions by calling =remove-hook=, or do =(setq=hook-variable=nil)= to remove everything.

If the hook variable is buffer-local, the buffer-local variable will be used instead of the global variable. However, if the buffer-local variable contains the element =t=, the global hook variable will be run as well.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]

** 49.2.3 Local Variables
     :PROPERTIES:
     :CUSTOM_ID: local-variables
     :END:

- M-x make-local-variable var

  Make variable var have a local value in the current buffer.

- M-x kill-local-variable var

  Make variable var use its global value in the current buffer.

- M-x make-variable-buffer-local var

  Mark variable var so that setting it will make it local to the buffer that is current at that time.

  Almost any variable can be made local to a specific Emacs buffer. This means that its value in that buffer is independent of its value in other buffers. A few variables are always local in every buffer. Every other Emacs variable has a global value which is in effect in all buffers that have not made the variable local.

  M-x make-local-variable reads the name of a variable and makes it local to the current buffer. Changing its value subsequently in this buffer will not affect others, and changes in its global value will not affect this buffer.

  M-x make-variable-buffer-local marks a variable so it will become local automatically whenever it is set. More precisely, once a variable has been marked in this way, the usual ways of setting the variable automatically do =make-local-variable= first. We call such variables per-buffer variables. Many variables in Emacs are normally per-buffer; the variable's document string tells you when this is so. A per-buffer variable's global value is normally never effective in any buffer, but it still has a meaning: it is the initial value of the variable for each new buffer.

Major modes (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Major-Modes][Major Modes]]) always make variables local to the buffer before setting the variables. This is why changing major modes in one buffer has no effect on other buffers. Minor modes also work by setting variables---normally, each minor mode has one controlling variable which is non-=nil= when the mode is enabled (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]). For many minor modes, the controlling variable is per buffer, and thus always buffer-local. Otherwise, you can make it local in a specific buffer like any other variable.

A few variables cannot be local to a buffer because they are always local to each display instead (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Multiple-Displays][Multiple Displays]]). If you try to make one of these variables buffer-local, you'll get an error message.

M-x kill-local-variable makes a specified variable cease to be local to the current buffer. The global value of the variable henceforth is in effect in this buffer. Setting the major mode kills all the local variables of the buffer except for a few variables specially marked as permanent locals.

To set the global value of a variable, regardless of whether the variable has a local value in the current buffer, you can use the Lisp construct =setq-default=. This construct is used just like =setq=, but it sets variables' global values instead of their local values (if any). When the current buffer does have a local value, the new global value may not be visible until you switch to another buffer. Here is an example:

#+BEGIN_EXAMPLE
         (setq-default fill-column 75)
#+END_EXAMPLE

=setq-default= is the only way to set the global value of a variable that has been marked with =make-variable-buffer-local=.

Lisp programs can use =default-value= to look at a variable's default value. This function takes a symbol as argument and returns its default value. The argument is evaluated; usually you must quote it explicitly. For example, here's how to obtain the default value of =fill-column=:

#+BEGIN_EXAMPLE
         (default-value 'fill-column)
#+END_EXAMPLE

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Directory-Variables][Directory Variables]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]

** 49.2.4 Local Variables in Files
     :PROPERTIES:
     :CUSTOM_ID: local-variables-in-files
     :END:

A file can specify local variable values to use when editing the file with Emacs. Visiting the file or setting a major mode checks for local variable specifications; it automatically makes these variables local to the buffer, and sets them to the values specified in the file.

File local variables override directory local variables (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Directory-Variables][Directory Variables]]), if any are specified for a file's directory.

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specifying-File-Variables][Specifying File Variables]]: Specifying file local variables.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Safe-File-Variables][Safe File Variables]]: Making sure file local variables are safe.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Safe-File-Variables][Safe File Variables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]]

*** 49.2.4.1 Specifying File Variables
      :PROPERTIES:
      :CUSTOM_ID: specifying-file-variables
      :END:

There are two ways to specify file local variable values: in the first line, or with a local variables list. Here's how to specify them in the first line:

#+BEGIN_EXAMPLE
         -*- mode: modename; var: value; ... -*-
#+END_EXAMPLE

You can specify any number of variable/value pairs in this way, each pair with a colon and semicolon. The special variable/value pair =mode:=modename=;=, if present, specifies a major mode. The values are used literally, and not evaluated.

You can use M-x add-file-local-variable-prop-line instead of adding entries by hand. This command prompts for a variable and value, and adds them to the first line in the appropriate way. M-x delete-file-local-variable-prop-line prompts for a variable, and deletes its entry from the line. The command M-x copy-dir-locals-to-file-locals-prop-line copies the current directory-local variables to the first line (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Directory-Variables][Directory Variables]]).

Here is an example first line that specifies Lisp mode and sets two variables with numeric values:

#+BEGIN_EXAMPLE
         ;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-
#+END_EXAMPLE

Aside from =mode=, other keywords that have special meanings as file variables are =coding=, =unibyte=, and =eval=. These are described below.

In shell scripts, the first line is used to identify the script interpreter, so you cannot put any local variables there. To accommodate this, Emacs looks for local variable specifications in the /second/ line if the first line specifies an interpreter. The same is true for man pages which start with the magic string ‘'"' to specify a list of troff preprocessors (not all do, however).

Apart from using a ‘-*-' line, you can define file local variables using a local variables list near the end of the file. The start of the local variables list should be no more than 3000 characters from the end of the file, and must be on the last page if the file is divided into pages.

If a file has both a local variables list and a ‘-/-' line, Emacs processes /everything* in the ‘-/-' line first, and /everything* in the local variables list afterward. The exception to this is a major mode specification. Emacs applies this first, wherever it appears, since most major modes kill all local variables as part of their initialization.

A local variables list starts with a line containing the string 'Local Variables:', and ends with a line containing the string 'End:'. In between come the variable names and values, one set per line, like this:

#+BEGIN_EXAMPLE
         /* Local Variables:  */
         /* mode: c           */
         /* comment-column: 0 */
         /* End:              */
#+END_EXAMPLE

In this example, each line starts with the prefix '//' and ends with the suffix ‘//'. Emacs recognizes the prefix and suffix by finding them surrounding the magic string 'Local Variables:', on the first line of the list; it then automatically discards them from the other lines of the list. The usual reason for using a prefix and/or suffix is to embed the local variables list in a comment, so it won't confuse other programs that the file is intended for. The example above is for the C programming language, where comments start with '//' and end with ‘//'.

If some unrelated text might look to Emacs as a local variables list, you can countermand that by inserting a form-feed character (a page delimiter, see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Pages][Pages]]) after that text. Emacs only looks for file-local variables in the last page of a file, after the last page delimiter.

Instead of typing in the local variables list directly, you can use the command M-x add-file-local-variable. This prompts for a variable and value, and adds them to the list, adding the 'Local Variables:' string and start and end markers as necessary. The command M-x delete-file-local-variable deletes a variable from the list. M-x copy-dir-locals-to-file-locals copies directory-local variables to the list (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Directory-Variables][Directory Variables]]).

As with the ‘-*-' line, the variables in a local variables list are used literally, and are not evaluated first. If you want to split a long string value across multiple lines of the file, you can use backslash-newline, which is ignored in Lisp string constants; you should put the prefix and suffix on each line, even lines that start or end within the string, as they will be stripped off when processing the list. Here is an example:

#+BEGIN_EXAMPLE
         # Local Variables:
         # compile-command: "cc foo.c -Dfoo=bar -Dhack=whatever \
         #   -Dmumble=blaah"
         # End:
#+END_EXAMPLE

Some names have special meanings in a local variables list:

- =mode= enables the specified major mode.\\
- =eval= evaluates the specified Lisp expression (the value returned by that expression is ignored).\\
- =coding= specifies the coding system for character code conversion of this file. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Coding-Systems][Coding Systems]].\\
- =unibyte= says to load or compile a file of Emacs Lisp in unibyte mode, if the value is =t=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Disabling-Multibyte][Disabling Multibyte Characters]].

These four keywords are not really variables; setting them in any other context has no special meaning.

Do not use the =mode= keyword for minor modes. To enable or disable a minor mode in a local variables list, use the =eval= keyword with a Lisp expression that runs the mode command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minor-Modes][Minor Modes]]). For example, the following local variables list enables Eldoc mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Lisp-Doc][Lisp Doc]]) by calling =eldoc-mode= with no argument (calling it with an argument of 1 would do the same), and disables Font Lock mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Font-Lock][Font Lock]]) by calling =font-lock-mode= with an argument of −1.

#+BEGIN_EXAMPLE
         ;; Local Variables:
         ;; eval: (eldoc-mode)
         ;; eval: (font-lock-mode -1)
         ;; End:
#+END_EXAMPLE

Note, however, that it is often a mistake to specify minor modes this way. Minor modes represent individual user preferences, and it may be inappropriate to impose your preferences on another user who might edit the file. If you wish to automatically enable or disable a minor mode in a situation-dependent way, it is often better to do it in a major mode hook (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]).

Use the command M-x normal-mode to reset the local variables and major mode of a buffer according to the file name and contents, including the local variables list if any. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Choosing-Modes][Choosing Modes]].

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Specifying-File-Variables][Specifying File Variables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]]

*** 49.2.4.2 Safety of File Variables
      :PROPERTIES:
      :CUSTOM_ID: safety-of-file-variables
      :END:

File-local variables can be dangerous; when you visit someone else's file, there's no telling what its local variables list could do to your Emacs. Improper values of the =eval= "variable", and other variables such as =load-path=, could execute Lisp code you didn't intend to run.

Therefore, whenever Emacs encounters file local variable values that are not known to be safe, it displays the file's entire local variables list, and asks you for confirmation before setting them. You can type y or to put the local variables list into effect, or n to ignore it. When Emacs is run in batch mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]), it can't really ask you, so it assumes the answer n.

Emacs normally recognizes certain variable/value pairs as safe. For instance, it is safe to give =comment-column= or =fill-column= any integer value. If a file specifies only known-safe variable/value pairs, Emacs does not ask for confirmation before setting them. Otherwise, you can tell Emacs to record all the variable/value pairs in this file as safe, by typing ! at the confirmation prompt. When Emacs encounters these variable/value pairs subsequently, in the same file or others, it will assume they are safe.

Some variables, such as =load-path=, are considered particularly risky: there is seldom any reason to specify them as local variables, and changing them can be dangerous. If a file contains only risky local variables, Emacs neither offers nor accepts ! as input at the confirmation prompt. If some of the local variables in a file are risky, and some are only potentially unsafe, you can enter ! at the prompt. It applies all the variables, but only marks the non-risky ones as safe for the future. If you really want to record safe values for risky variables, do it directly by customizing 'safe-local-variable-values' (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]).

The variable =enable-local-variables= allows you to change the way Emacs processes local variables. Its default value is =t=, which specifies the behavior described above. If it is =nil=, Emacs simply ignores all file local variables. =:safe= means use only the safe values and ignore the rest. Any other value says to query you about each file that has local variables, without trying to determine whether the values are known to be safe.

The variable =enable-local-eval= controls whether Emacs processes =eval= variables. The three possibilities for the variable's value are =t=, =nil=, and anything else, just as for =enable-local-variables=. The default is =maybe=, which is neither =t= nor =nil=, so normally Emacs does ask for confirmation about processing =eval= variables.

As an exception, Emacs never asks for confirmation to evaluate any =eval= form if that form occurs within the variable =safe-local-eval-forms=.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]]

** 49.2.5 Per-Directory Local Variables
     :PROPERTIES:
     :CUSTOM_ID: per-directory-local-variables
     :END:

Sometimes, you may wish to define the same set of local variables to all the files in a certain directory and its subdirectories, such as the directory tree of a large software project. This can be accomplished with directory-local variables. File local variables override directory local variables, so if some of the files in a directory need specialized settings, you can specify the settings for the majority of the directory's files in directory variables, and then define file local variables in a few files which need the general settings overridden.

The usual way to define directory-local variables is to put a file named .dir-locals.el[[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#fn-22][22]] in a directory. Whenever Emacs visits any file in that directory or any of its subdirectories, it will apply the directory-local variables specified in .dir-locals.el, as though they had been defined as file-local variables for that file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]]). Emacs searches for .dir-locals.el starting in the directory of the visited file, and moving up the directory tree. To avoid slowdown, this search is skipped for remote files. If needed, the search can be extended for remote files by setting the variable =enable-remote-dir-locals= to =t=.

You can also use .dir-locals-2.el; if found, Emacs loads it in addition to .dir-locals.el. This is useful when .dir-locals.el is under version control in a shared repository and can't be used for personal customizations.

The .dir-locals.el file should hold a specially-constructed list, which maps major mode names (symbols) to alists (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Association-Lists][Association Lists]]). Each alist entry consists of a variable name and the directory-local value to assign to that variable, when the specified major mode is enabled. Instead of a mode name, you can specify 'nil', which means that the alist applies to any mode; or you can specify a subdirectory (a string), in which case the alist applies to all files in that subdirectory.

Here's an example of a .dir-locals.el file:

#+BEGIN_EXAMPLE
         ((nil . ((indent-tabs-mode . t)
                  (fill-column . 80)))
          (c-mode . ((c-file-style . "BSD")
                     (subdirs . nil)))
          ("src/imported"
           . ((nil . ((change-log-default-name
                       . "ChangeLog.local"))))))
#+END_EXAMPLE

This sets 'indent-tabs-mode' and =fill-column= for any file in the directory tree, and the indentation style for any C source file. The special =subdirs= element is not a variable, but a special keyword which indicates that the C mode settings are only to be applied in the current directory, not in any subdirectories. Finally, it specifies a different ChangeLog file name for any file in the src/imported subdirectory.

If the .dir-locals.el file contains multiple different values for a variable using different mode names or directories, the values will be applied in an order such that the values for more specific modes take priority over more generic modes. Values specified under a directory have even more priority. For example:

#+BEGIN_EXAMPLE
         ((nil . ((fill-column . 40)))
          (c-mode . ((fill-column . 50)))
          (prog-mode . ((fill-column . 60)))
          ("narrow-files" . ((nil . ((fill-column . 20))))))
#+END_EXAMPLE

Files that use =c-mode= also match =prog-mode= because the former inherits from the latter. The value used for =fill-column= in C files will however be =50= because the mode name is more specific than =prog-mode=. Files using other modes inheriting from =prog-mode= will use =60=. Any file under the directory narrow-files will use the value =20= even if they use =c-mode= because directory entries have priority over mode entries.

You can specify the variables =mode=, =eval=, and =unibyte= in your .dir-locals.el, and they have the same meanings as they would have in file local variables. =coding= cannot be specified as a directory local variable. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#File-Variables][File Variables]].

Instead of editing the .dir-locals.el file by hand, you can use the command M-x add-dir-local-variable. This prompts for a mode or subdirectory, and for variable and value, and adds the entry defining the directory-local variable. M-x delete-dir-local-variable deletes an entry. M-x copy-file-locals-to-dir-locals copies the file-local variables in the current file into .dir-locals.el.

Another method of specifying directory-local variables is to define a group of variables/value pairs in a directory class, using the =dir-locals-set-class-variables= function; then, tell Emacs which directories correspond to the class by using the =dir-locals-set-directory-class= function. These function calls normally go in your initialization file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]). This method is useful when you can't put .dir-locals.el in a directory for some reason. For example, you could apply settings to an unwritable directory this way:

#+BEGIN_EXAMPLE
         (dir-locals-set-class-variables 'unwritable-directory
            '((nil . ((some-useful-setting . value)))))

         (dir-locals-set-directory-class
            "/usr/include/" 'unwritable-directory)
#+END_EXAMPLE

If a variable has both a directory-local and file-local value specified, the file-local value takes effect. Unsafe directory-local variables are handled in the same way as unsafe file-local variables (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Safe-File-Variables][Safe File Variables]]).

Directory-local variables also take effect in certain buffers that do not visit a file directly but perform work within a directory, such as Dired buffers (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Dired][Dired]]).

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Variables][Variables]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization][Customization]]

* 49.3 Customizing Key Bindings
    :PROPERTIES:
    :CUSTOM_ID: customizing-key-bindings
    :END:

This section describes key bindings, which map keys to commands, and keymaps, which record key bindings. It also explains how to customize key bindings, which is done by editing your init file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]]).

Since most modes define their own key bindings, activating a mode might override your custom key bindings. A small number of keys are reserved for user-defined bindings, and should not be used by modes, so key bindings using those keys are safer in this regard. The reserved key sequences are those consisting of C-c followed by a letter (either upper or lower case), and function keys through without modifiers (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Modifier-Keys][Modifier Keys]]).

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Keymaps][Keymaps]]: Generalities. The global keymap.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Prefix-Keymaps][Prefix Keymaps]]: Keymaps for prefix keys.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Local-Keymaps][Local Keymaps]]: Major and minor modes have their own keymaps.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minibuffer-Maps][Minibuffer Maps]]: The minibuffer uses its own local keymaps.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rebinding][Rebinding]]: How to redefine one key's meaning conveniently.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]]: Rebinding keys with your initialization file.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Modifier-Keys][Modifier Keys]]: Using modifier keys.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Function-Keys][Function Keys]]: Rebinding terminal function keys.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Named-ASCII-Chars][Named ASCII Chars]]: Distinguishing from C-i, and so on.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Buttons][Mouse Buttons]]: Rebinding mouse buttons in Emacs.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Disabling][Disabling]]: Disabling a command means confirmation is required before it can be executed. This is done to protect beginners from surprises.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Prefix-Keymaps][Prefix Keymaps]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.1 Keymaps
     :PROPERTIES:
     :CUSTOM_ID: keymaps
     :END:

As described in [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Commands][Commands]], each Emacs command is a Lisp function whose definition provides for interactive use. Like every Lisp function, a command has a function name, which usually consists of lower-case letters and hyphens.

A key sequence (key, for short) is a sequence of input events that have a meaning as a unit. Input events include characters, function keys, and mouse buttons---all the inputs that you can send to the computer. A key sequence gets its meaning from its binding, which says what command it runs.

The bindings between key sequences and command functions are recorded in data structures called keymaps. Emacs has many of these, each used on particular occasions.

The global keymap is the most important keymap because it is always in effect. The global keymap defines keys for Fundamental mode (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Major-Modes][Major Modes]]); most of these definitions are common to most or all major modes. Each major or minor mode can have its own keymap which overrides the global definitions of some keys.

For example, a self-inserting character such as g is self-inserting because the global keymap binds it to the command =self-insert-command=. The standard Emacs editing characters such as C-a also get their standard meanings from the global keymap. Commands to rebind keys, such as M-x global-set-key, work by storing the new binding in the proper place in the global map (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rebinding][Rebinding]]).

Most modern keyboards have function keys as well as character keys. Function keys send input events just as character keys do, and keymaps can have bindings for them. Key sequences can mix function keys and characters. For example, if your keyboard has a function key, Emacs can recognize key sequences like C-x . You can even mix mouse events with keyboard events, such as S-down-mouse-1.

On text terminals, typing a function key actually sends the computer a sequence of characters; the precise details of the sequence depend on the function key and on the terminal type. (Often the sequence starts with [.) If Emacs understands your terminal type properly, it automatically handles such sequences as single input events.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Local-Keymaps][Local Keymaps]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Keymaps][Keymaps]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.2 Prefix Keymaps
     :PROPERTIES:
     :CUSTOM_ID: prefix-keymaps
     :END:

Internally, Emacs records only single events in each keymap. Interpreting a key sequence of multiple events involves a chain of keymaps: the first keymap gives a definition for the first event, which is another keymap, which is used to look up the second event in the sequence, and so on. Thus, a prefix key such as C-x or has its own keymap, which holds the definition for the event that immediately follows that prefix.

The definition of a prefix key is usually the keymap to use for looking up the following event. The definition can also be a Lisp symbol whose function definition is the following keymap; the effect is the same, but it provides a command name for the prefix key that can be used as a description of what the prefix key is for. Thus, the binding of C-x is the symbol =Control-X-prefix=, whose function definition is the keymap for C-x commands. The definitions of C-c, C-x, C-h, and as prefix keys appear in the global map, so these prefix keys are always available.

Aside from ordinary prefix keys, there is a fictitious "prefix key" which represents the menu bar; see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Menu-Bar][Menu Bar]], for special information about menu bar key bindings. Mouse button events that invoke pop-up menus are also prefix keys; see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Menu-Keymaps][Menu Keymaps]], for more details.

Some prefix keymaps are stored in variables with names:

- =ctl-x-map= is the variable name for the map used for characters that follow C-x.
- =help-map= is for characters that follow C-h.
- =esc-map= is for characters that follow . Thus, all Meta characters are actually defined by this map.
- =ctl-x-4-map= is for characters that follow C-x 4.
- =mode-specific-map= is for characters that follow C-c.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minibuffer-Maps][Minibuffer Maps]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Prefix-Keymaps][Prefix Keymaps]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.3 Local Keymaps
     :PROPERTIES:
     :CUSTOM_ID: local-keymaps
     :END:

So far, we have explained the ins and outs of the global map. Major modes customize Emacs by providing their own key bindings in local keymaps. For example, C mode overrides to make it indent the current line for C code. Minor modes can also have local keymaps; whenever a minor mode is in effect, the definitions in its keymap override both the major mode's local keymap and the global keymap. In addition, portions of text in the buffer can specify their own keymaps, which override all other keymaps.

A local keymap can redefine a key as a prefix key by defining it as a prefix keymap. If the key is also defined globally as a prefix, its local and global definitions (both keymaps) effectively combine: both definitions are used to look up the event that follows the prefix key. For example, if a local keymap defines C-c as a prefix keymap, and that keymap defines C-z as a command, this provides a local meaning for C-c C-z. This does not affect other sequences that start with C-c; if those sequences don't have their own local bindings, their global bindings remain in effect.

Another way to think of this is that Emacs handles a multi-event key sequence by looking in several keymaps, one by one, for a binding of the whole key sequence. First it checks the minor mode keymaps for minor modes that are enabled, then it checks the major mode's keymap, and then it checks the global keymap. This is not precisely how key lookup works, but it's good enough for understanding the results in ordinary circumstances.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rebinding][Rebinding]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Local-Keymaps][Local Keymaps]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.4 Minibuffer Keymaps
     :PROPERTIES:
     :CUSTOM_ID: minibuffer-keymaps
     :END:

The minibuffer has its own set of local keymaps; they contain various completion and exit commands.

- =minibuffer-local-map= is used for ordinary input (no completion).
- =minibuffer-local-ns-map= is similar, except that exits just like .
- =minibuffer-local-completion-map= is for permissive completion.
- =minibuffer-local-must-match-map= is for strict completion and for cautious completion.
- =minibuffer-local-filename-completion-map= and =minibuffer-local-filename-must-match-map= are like the two previous ones, but they are specifically for file name completion. They do not bind .

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Minibuffer-Maps][Minibuffer Maps]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.5 Changing Key Bindings Interactively
     :PROPERTIES:
     :CUSTOM_ID: changing-key-bindings-interactively
     :END:

The way to redefine an Emacs key is to change its entry in a keymap. You can change the global keymap, in which case the change is effective in all major modes (except those that have their own overriding local bindings for the same key). Or you can change a local keymap, which affects all buffers using the same major mode.

In this section, we describe how to rebind keys for the present Emacs session. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]], for a description of how to make key rebindings affect future Emacs sessions.

​

- M-x global-set-key key cmd

  Define key globally to run cmd.

- M-x local-set-key key cmd

  Define key locally (in the major mode now in effect) to run cmd.

- M-x global-unset-key key

  Make key undefined in the global map.

- M-x local-unset-key key

  Make key undefined locally (in the major mode now in effect).

For example, the following binds C-z to the =shell= command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Interactive-Shell][Interactive Shell]]), replacing the normal global definition of C-z:

#+BEGIN_EXAMPLE
         M-x global-set-key <RET> C-z shell <RET>
#+END_EXAMPLE

The =global-set-key= command reads the command name after the key. After you press the key, a message like this appears so that you can confirm that you are binding the key you want:

#+BEGIN_EXAMPLE
         Set key C-z to command:
#+END_EXAMPLE

You can redefine function keys and mouse events in the same way; just type the function key or click the mouse when it's time to specify the key to rebind.

You can rebind a key that contains more than one event in the same way. Emacs keeps reading the key to rebind until it is a complete key (that is, not a prefix key). Thus, if you type C-f for key, that's the end; it enters the minibuffer immediately to read cmd. But if you type C-x, since that's a prefix, it reads another character; if that is 4, another prefix character, it reads one more character, and so on. For example,

#+BEGIN_EXAMPLE
         M-x global-set-key <RET> C-x 4 $ spell-other-window <RET>
#+END_EXAMPLE

redefines C-x 4 $ to run the (fictitious) command =spell-other-window=.

You can remove the global definition of a key with =global-unset-key=. This makes the key undefined; if you type it, Emacs will just beep. Similarly, =local-unset-key= makes a key undefined in the current major mode keymap, which makes the global definition (or lack of one) come back into effect in that major mode.

If you have redefined (or undefined) a key and you subsequently wish to retract the change, undefining the key will not do the job---you need to redefine the key with its standard definition. To find the name of the standard definition of a key, go to a Fundamental mode buffer in a fresh Emacs and use C-h c. The documentation of keys in this manual also lists their command names.

If you want to prevent yourself from invoking a command by mistake, it is better to disable the command than to undefine the key. A disabled command is less work to invoke when you really want to. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Disabling][Disabling]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Modifier-Keys][Modifier Keys]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Rebinding][Rebinding]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.6 Rebinding Keys in Your Init File
     :PROPERTIES:
     :CUSTOM_ID: rebinding-keys-in-your-init-file
     :END:

If you have a set of key bindings that you like to use all the time, you can specify them in your initialization file by writing Lisp code. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]], for a description of the initialization file.

There are several ways to write a key binding using Lisp. The simplest is to use the =kbd= function, which converts a textual representation of a key sequence---similar to how we have written key sequences in this manual---into a form that can be passed as an argument to =global-set-key=. For example, here's how to bind C-z to the =shell= command (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Interactive-Shell][Interactive Shell]]):

#+BEGIN_EXAMPLE
         (global-set-key (kbd "C-z") 'shell)
#+END_EXAMPLE

The single-quote before the command name, =shell=, marks it as a constant symbol rather than a variable. If you omit the quote, Emacs would try to evaluate =shell= as a variable. This probably causes an error; it certainly isn't what you want.

Here are some additional examples, including binding function keys and mouse events:

#+BEGIN_EXAMPLE
         (global-set-key (kbd "C-c y") 'clipboard-yank)
         (global-set-key (kbd "C-M-q") 'query-replace)
         (global-set-key (kbd "<f5>") 'flyspell-mode)
         (global-set-key (kbd "C-<f5>") 'display-line-numbers-mode)
         (global-set-key (kbd "C-<right>") 'forward-sentence)
         (global-set-key (kbd "<mouse-2>") 'mouse-save-then-kill)
#+END_EXAMPLE

Instead of using =kbd=, you can use a Lisp string or vector to specify the key sequence. Using a string is simpler, but only works for ASCII characters and Meta-modified ASCII characters. For example, here's how to bind C-x M-l to =make-symbolic-link= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Copying-and-Naming][Copying and Naming]]):

#+BEGIN_EXAMPLE
         (global-set-key "\C-x\M-l" 'make-symbolic-link)
#+END_EXAMPLE

To bind a key sequence including , , , or , the string should contain the Emacs Lisp escape sequence '\t', '\r', '\e', or '\d' respectively. Here is an example which binds C-x to =indent-rigidly= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Indentation][Indentation]]):

#+BEGIN_EXAMPLE
         (global-set-key "\C-x\t" 'indent-rigidly)
#+END_EXAMPLE

When the key sequence includes function keys or mouse button events, or non-ASCII characters such as =C-== or =H-a=, you can use a vector to specify the key sequence. Each element in the vector stands for an input event; the elements are separated by spaces and surrounded by a pair of square brackets. If a vector element is a character, write it as a Lisp character constant: '?' followed by the character as it would appear in a string. Function keys are represented by symbols (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Function-Keys][Function Keys]]); simply write the symbol's name, with no other delimiters or punctuation. Here are some examples:

#+BEGIN_EXAMPLE
         (global-set-key [?\C-=] 'make-symbolic-link)
         (global-set-key [?\M-\C-=] 'make-symbolic-link)
         (global-set-key [?\H-a] 'make-symbolic-link)
         (global-set-key [f7] 'make-symbolic-link)
         (global-set-key [C-mouse-1] 'make-symbolic-link)
#+END_EXAMPLE

You can use a vector for the simple cases too:

#+BEGIN_EXAMPLE
         (global-set-key [?\C-z ?\M-l] 'make-symbolic-link)
#+END_EXAMPLE

Language and coding systems may cause problems with key bindings for non-ASCII characters. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Non_002dASCII][Init Non-ASCII]].

As described in [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Local-Keymaps][Local Keymaps]], major modes and minor modes can define local keymaps. These keymaps are constructed when the mode is used for the first time in a session. If you wish to change one of these keymaps, you must use the mode hook (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]]).

For example, Texinfo mode runs the hook =texinfo-mode-hook=. Here's how you can use the hook to add local bindings for C-c n and C-c p in Texinfo mode:

#+BEGIN_EXAMPLE
         (add-hook 'texinfo-mode-hook
                   (lambda ()
                     (define-key texinfo-mode-map "\C-cp"
                                 'backward-paragraph)
                     (define-key texinfo-mode-map "\C-cn"
                                 'forward-paragraph)))
#+END_EXAMPLE

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Function-Keys][Function Keys]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.7 Modifier Keys
     :PROPERTIES:
     :CUSTOM_ID: modifier-keys
     :END:

The default key bindings in Emacs are set up so that modified alphabetical characters are case-insensitive. In other words, C-A does the same thing as C-a, and M-A does the same thing as M-a. This concerns only alphabetical characters, and does not apply to shifted versions of other keys; for instance, C-@ is not the same as C-2.

A -modified alphabetical character is always considered case-insensitive: Emacs always treats C-A as C-a, C-B as C-b, and so forth. The reason for this is historical.

For all other modifiers, you can make the modified alphabetical characters case-sensitive when you customize Emacs. For instance, you could make M-a and M-A run different commands.

Although only the and

#+BEGIN_HTML
  <Meta>
#+END_HTML

modifier keys are commonly used, Emacs supports three other modifier keys. These are called , , and . Few terminals provide ways to use these modifiers; the key labeled on most keyboards usually issues the

#+BEGIN_HTML
  <Meta>
#+END_HTML

modifier, not . The standard key bindings in Emacs do not include any characters with these modifiers. However, you can customize Emacs to assign meanings to them. The modifier bits are labeled as 's-', 'H-' and 'A-' respectively.

Even if your keyboard lacks these additional modifier keys, you can enter it using C-x @: C-x @ h adds the Hyper flag to the next character, C-x @ s adds the Super flag, and C-x @ a adds the Alt flag. For instance, C-x @ h C-a is a way to enter Hyper-Control-a. (Unfortunately, there is no way to add two modifiers by using C-x @ twice for the same character, because the first one goes to work on the C-x.)

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Named-ASCII-Chars][Named ASCII Chars]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Modifier-Keys][Modifier Keys]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.8 Rebinding Function Keys
     :PROPERTIES:
     :CUSTOM_ID: rebinding-function-keys
     :END:

Key sequences can contain function keys as well as ordinary characters. Just as Lisp characters (actually integers) represent keyboard characters, Lisp symbols represent function keys. If the function key has a word as its label, then that word is also the name of the corresponding Lisp symbol. Here are the conventional Lisp names for common function keys:

- =left=, =up=, =right=, =down=

  Cursor arrow keys.

- =begin=, =end=, =home=, =next=, =prior=

  Other cursor repositioning keys.

- =select=, =print=, =execute=, =backtab=

- =insert=, =undo=, =redo=, =clearline=

- =insertline=, =deleteline=, =insertchar=, =deletechar=

  Miscellaneous function keys.

- =f1=, =f2=, ... =f35=

  Numbered function keys (across the top of the keyboard).

- =kp-add=, =kp-subtract=, =kp-multiply=, =kp-divide=

- =kp-backtab=, =kp-space=, =kp-tab=, =kp-enter=

- =kp-separator=, =kp-decimal=, =kp-equal=

- =kp-prior=, =kp-next=, =kp-end=, =kp-home=

- =kp-left=, =kp-up=, =kp-right=, =kp-down=

- =kp-insert=, =kp-delete=

  Keypad keys (to the right of the regular keyboard), with names or punctuation.

- =kp-0=, =kp-1=, ... =kp-9=

  Keypad keys with digits.

- =kp-f1=, =kp-f2=, =kp-f3=, =kp-f4=

  Keypad PF keys.

These names are conventional, but some systems (especially when using X) may use different names. To make certain what symbol is used for a given function key on your terminal, type C-h c followed by that key.

See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]], for examples of binding function keys.

Many keyboards have a numeric keypad on the right-hand side. The numeric keys in the keypad double up as cursor motion keys, toggled by a key labeled 'Num Lock'. By default, Emacs translates these keys to the corresponding keys on the main keyboard. For example, when 'Num Lock' is on, the key labeled '8' on the numeric keypad produces =kp-8=, which is translated to 8; when 'Num Lock' is off, the same key produces =kp-up=, which is translated to . If you rebind a key such as 8 or , it affects the equivalent keypad key too. However, if you rebind a 'kp-' key directly, that won't affect its non-keypad equivalent. Note that the modified keys are not translated: for instance, if you hold down the

#+BEGIN_HTML
  <Meta>
#+END_HTML

key while pressing the '8' key on the numeric keypad, that generates M-.

Emacs provides a convenient method for binding the numeric keypad keys, using the variables =keypad-setup=, =keypad-numlock-setup=, =keypad-shifted-setup=, and =keypad-numlock-shifted-setup=. These can be found in the 'keyboard' customization group (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Easy-Customization][Easy Customization]]). You can rebind the keys to perform other tasks, such as issuing numeric prefix arguments.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Buttons][Mouse Buttons]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Function-Keys][Function Keys]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.9 Named ASCII Control Characters
     :PROPERTIES:
     :CUSTOM_ID: named-ascii-control-characters
     :END:

, , , , , and started out as names for certain ASCII control characters, used so often that they have special keys of their own. For instance, was another name for C-i. Later, users found it convenient to distinguish in Emacs between these keys and the corresponding control characters typed with the key. Therefore, on most modern terminals, they are no longer the same: is different from C-i.

Emacs can distinguish these two kinds of input if the keyboard does. It treats the special keys as function keys named =tab=, =return=, =backspace=, =linefeed=, =escape=, and =delete=. These function keys translate automatically into the corresponding ASCII characters /if/ they have no bindings of their own. As a result, neither users nor Lisp programs need to pay attention to the distinction unless they care to.

If you do not want to distinguish between (for example) and C-i, make just one binding, for the ASCII character (octal code 011). If you do want to distinguish, make one binding for this ASCII character, and another for the function key =tab=.

With an ordinary ASCII terminal, there is no way to distinguish between and C-i (and likewise for other such pairs), because the terminal sends the same character in both cases.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Disabling][Disabling]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Named-ASCII-Chars][Named ASCII Chars]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.10 Rebinding Mouse Buttons
     :PROPERTIES:
     :CUSTOM_ID: rebinding-mouse-buttons
     :END:

Emacs uses Lisp symbols to designate mouse buttons, too. The ordinary mouse events in Emacs are click events; these happen when you press a button and release it without moving the mouse. You can also get drag events, when you move the mouse while holding the button down. Drag events happen when you finally let go of the button.

The symbols for basic click events are =mouse-1= for the leftmost button, =mouse-2= for the next, and so on. Here is how you can redefine the second mouse button to split the current window:

#+BEGIN_EXAMPLE
         (global-set-key [mouse-2] 'split-window-below)
#+END_EXAMPLE

The symbols for drag events are similar, but have the prefix 'drag-' before the word 'mouse'. For example, dragging the first button generates a =drag-mouse-1= event.

You can also define bindings for events that occur when a mouse button is pressed down. These events start with 'down-' instead of 'drag-'. Such events are generated only if they have key bindings. When you get a button-down event, a corresponding click or drag event will always follow.

If you wish, you can distinguish single, double, and triple clicks. A double click means clicking a mouse button twice in approximately the same place. The first click generates an ordinary click event. The second click, if it comes soon enough, generates a double-click event instead. The event type for a double-click event starts with 'double-': for example, =double-mouse-3=.

This means that you can give a special meaning to the second click at the same place, but it must act on the assumption that the ordinary single click definition has run when the first click was received.

This constrains what you can do with double clicks, but user interface designers say that this constraint ought to be followed in any case. A double click should do something similar to the single click, only more so. The command for the double-click event should perform the extra work for the double click.

If a double-click event has no binding, it changes to the corresponding single-click event. Thus, if you don't define a particular double click specially, it executes the single-click command twice.

Emacs also supports triple-click events whose names start with 'triple-'. Emacs does not distinguish quadruple clicks as event types; clicks beyond the third generate additional triple-click events. However, the full number of clicks is recorded in the event list, so if you know Emacs Lisp you can distinguish if you really want to (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Click-Events][Click Events]]). We don't recommend distinct meanings for more than three clicks, but sometimes it is useful for subsequent clicks to cycle through the same set of three meanings, so that four clicks are equivalent to one click, five are equivalent to two, and six are equivalent to three.

Emacs also records multiple presses in drag and button-down events. For example, when you press a button twice, then move the mouse while holding the button, Emacs gets a 'double-drag-' event. And at the moment when you press it down for the second time, Emacs gets a 'double-down-' event (which is ignored, like all button-down events, if it has no binding).

The variable =double-click-time= specifies how much time can elapse between clicks and still allow them to be grouped as a multiple click. Its value is in units of milliseconds. If the value is =nil=, double clicks are not detected at all. If the value is =t=, then there is no time limit. The default is 500.

The variable =double-click-fuzz= specifies how much the mouse can move between clicks and still allow them to be grouped as a multiple click. Its value is in units of pixels on windowed displays and in units of 1/8 of a character cell on text-mode terminals; the default is 3.

The symbols for mouse events also indicate the status of the modifier keys, with the usual prefixes 'C-', 'M-', 'H-', 's-', 'A-', and 'S-'. These always precede 'double-' or 'triple-', which always precede 'drag-' or 'down-'.

A frame includes areas that don't show text from the buffer, such as the mode line and the scroll bar. You can tell whether a mouse button comes from a special area of the screen by means of dummy prefix keys. For example, if you click the mouse in the mode line, you get the prefix key =mode-line= before the ordinary mouse-button symbol. Thus, here is how to define the command for clicking the first button in a mode line to run =scroll-up-command=:

#+BEGIN_EXAMPLE
         (global-set-key [mode-line mouse-1] 'scroll-up-command)
#+END_EXAMPLE

Here is the complete list of these dummy prefix keys and their meanings:

- =mode-line=

  The mouse was in the mode line of a window.

- =vertical-line=

  The mouse was in the vertical line separating side-by-side windows. (If you use scroll bars, they appear in place of these vertical lines.)

- =vertical-scroll-bar=

  The mouse was in a vertical scroll bar. (This is the only kind of scroll bar Emacs currently supports.)

- =menu-bar=

  The mouse was in the menu bar.

- =header-line=

  The mouse was in a header line.

You can put more than one mouse button in a key sequence, but it isn't usual to do so.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mouse-Buttons][Mouse Buttons]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]]

** 49.3.11 Disabling Commands
     :PROPERTIES:
     :CUSTOM_ID: disabling-commands
     :END:

Disabling a command means that invoking it interactively asks for confirmation from the user. The purpose of disabling a command is to prevent users from executing it by accident; we do this for commands that might be confusing to the uninitiated.

Attempting to invoke a disabled command interactively in Emacs displays a window containing the command's name, its documentation, and some instructions on what to do immediately; then Emacs asks for input saying whether to execute the command as requested, enable it and execute it, or cancel. If you decide to enable the command, you must then answer another question---whether to do this permanently, or just for the current session. (Enabling permanently works by automatically editing your initialization file.) You can also type ! to enable /all/ commands, for the current session only.

The direct mechanism for disabling a command is to put a non-=nil= =disabled= property on the Lisp symbol for the command. Here is the Lisp program to do this:

#+BEGIN_EXAMPLE
         (put 'delete-region 'disabled t)
#+END_EXAMPLE

If the value of the =disabled= property is a string, that string is included in the message displayed when the command is used:

#+BEGIN_EXAMPLE
         (put 'delete-region 'disabled
              "It's better to use `kill-region' instead.\n")
#+END_EXAMPLE

You can make a command disabled either by editing the initialization file directly, or with the command M-x disable-command, which edits the initialization file for you. Likewise, M-x enable-command edits the initialization file to enable a command permanently. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]].

If Emacs was invoked with the -q or --no-init-file options (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]), it will not edit your initialization file. Doing so could lose information because Emacs has not read your initialization file.

Whether a command is disabled is independent of what key is used to invoke it; disabling also applies if the command is invoked using M-x. However, disabling a command has no effect on calling it as a function from Lisp programs.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Authentication][Authentication]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Key-Bindings][Key Bindings]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization][Customization]]

* 49.4 The Emacs Initialization File
    :PROPERTIES:
    :CUSTOM_ID: the-emacs-initialization-file
    :END:

When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you. Emacs looks for your init file using the filenames ~/.emacs, ~/.emacs.el, or ~/.emacs.d/init.el; you can choose to use any one of these three names (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Find-Init][Find Init]]). Here, ~/ stands for your home directory.

You can use the command line switch '-q' to prevent loading your init file, and '-u' (or '--user') to specify a different user's init file (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]).

There can also be a default init file, which is the library named default.el, found via the standard search path for libraries. The Emacs distribution contains no such library; your site may create one for local customizations. If this library exists, it is loaded whenever you start Emacs (except when you specify '-q'). But your init file, if any, is loaded first; if it sets =inhibit-default-init= non-=nil=, then default is not loaded.

Your site may also have a site startup file; this is named site-start.el, if it exists. Like default.el, Emacs finds this file via the standard search path for Lisp libraries. Emacs loads this library before it loads your init file. To inhibit loading of this library, use the option '--no-site-file'. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Initial-Options][Initial Options]]. We recommend against using site-start.el for changes that some users may not like. It is better to put them in default.el, so that users can more easily override them.

You can place default.el and site-start.el in any of the directories which Emacs searches for Lisp libraries. The variable =load-path= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Lisp-Libraries][Lisp Libraries]]) specifies these directories. Many sites put these files in a subdirectory named site-lisp in the Emacs installation directory, such as /usr/local/share/emacs/site-lisp.

Byte-compiling your init file is not recommended (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Byte-Compilation][Byte Compilation]]). It generally does not speed up startup very much, and often leads to problems when you forget to recompile the file. A better solution is to use the Emacs server to reduce the number of times you have to start Emacs (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Emacs-Server][Emacs Server]]). If your init file defines many functions, consider moving them to a separate (byte-compiled) file that you load in your init file.

If you are going to write actual Emacs Lisp programs that go beyond minor customization, you should read the Emacs Lisp Reference Manual. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top][Emacs Lisp]].

- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Syntax][Init Syntax]]: Syntax of constants in Emacs Lisp.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Examples][Init Examples]]: How to do some things with an init file.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Terminal-Init][Terminal Init]]: Each terminal type can have an init file.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Find-Init][Find Init]]: How Emacs finds the init file.
- [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Non_002dASCII][Init Non-ASCII]]: Using non-ASCII characters in an init file.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Examples][Init Examples]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]

** 49.4.1 Init File Syntax
     :PROPERTIES:
     :CUSTOM_ID: init-file-syntax
     :END:

The init file contains one or more Lisp expressions. Each of these consists of a function name followed by arguments, all surrounded by parentheses. For example, =(setq fill-column 60)= calls the function =setq= to set the variable =fill-column= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Filling][Filling]]) to 60.

You can set any Lisp variable with =setq=, but with certain variables =setq= won't do what you probably want in the .emacs file. Some variables automatically become buffer-local when set with =setq=; what you want in .emacs is to set the default value, using =setq-default=. Some customizable minor mode variables do special things to enable the mode when you set them with Customize, but ordinary =setq= won't do that; to enable the mode in your .emacs file, call the minor mode command. The following section has examples of both of these methods.

The second argument to =setq= is an expression for the new value of the variable. This can be a constant, a variable, or a function call expression. In .emacs, constants are used most of the time. They can be:

- Numbers:

  Numbers are written in decimal, with an optional initial minus sign.

- Strings:

  Lisp string syntax is the same as C string syntax with a few extra features. Use a double-quote character to begin and end a string constant. In a string, you can include newlines and special characters literally. But often it is cleaner to use backslash sequences for them: '\n' for newline, '\b' for backspace, '\r' for carriage return, '\t' for tab, '\f' for formfeed (control-L), '\e' for escape, '\' for a backslash, '"' for a double-quote, or '\ooo' for the character whose octal code is ooo. Backslash and double-quote are the only characters for which backslash sequences are mandatory. '\C-' can be used as a prefix for a control character, as in '\C-s' for ASCII control-S, and '\M-' can be used as a prefix for a Meta character, as in '\M-a' for

  #+BEGIN_HTML
    <Meta>
  #+END_HTML

  -A or '\M-\C-a' for -

  #+BEGIN_HTML
    <Meta>
  #+END_HTML

  -A. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Non_002dASCII][Init Non-ASCII]], for information about including non-ASCII in your init file.

- Characters:

  Lisp character constant syntax consists of a '?' followed by either a character or an escape sequence starting with ‘'. Examples: =?x=, =?\n=, =?\"=, =?\)=. Note that strings and characters are not interchangeable in Lisp; some contexts require one and some contexts require the other. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Non_002dASCII][Init Non-ASCII]], for information about binding commands to keys which send non-ASCII characters.

- True:

  =t= stands for "true".

- False:

  =nil= stands for "false".

- Other Lisp objects:

  Write a single-quote (='=) followed by the Lisp object you want.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Terminal-Init][Terminal Init]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Syntax][Init Syntax]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]

** 49.4.2 Init File Examples
     :PROPERTIES:
     :CUSTOM_ID: init-file-examples
     :END:

Here are some examples of doing certain commonly desired things with Lisp expressions:

- Add a directory to the variable

  #+BEGIN_EXAMPLE
      load-path
  #+END_EXAMPLE

  . You can then put Lisp libraries that are not included with Emacs in this directory, and load them with

  M-x load-library

  . See

  Lisp Libraries

  .

  #+BEGIN_EXAMPLE
                (add-to-list 'load-path "/path/to/lisp/libraries")
  #+END_EXAMPLE

- Make in C mode just insert a tab if point is in the middle of a line.

  #+BEGIN_EXAMPLE
                (setq c-tab-always-indent nil)
  #+END_EXAMPLE

  Here we have a variable whose value is normally =t= for "true" and the alternative is =nil= for "false".

- Make searches case sensitive by default (in all buffers that do not override this).

  #+BEGIN_EXAMPLE
                (setq-default case-fold-search nil)
  #+END_EXAMPLE

  This sets the default value, which is effective in all buffers that do not have local values for the variable (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Locals][Locals]]). Setting =case-fold-search= with =setq= affects only the current buffer's local value, which is probably not what you want to do in an init file.

- Specify your own email address, if Emacs can't figure it out correctly.

  #+BEGIN_EXAMPLE
                (setq user-mail-address "cheney@torture.gov")
  #+END_EXAMPLE

  Various Emacs packages, such as Message mode, consult =user-mail-address= when they need to know your email address. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Mail-Headers][Mail Headers]].

- Make Text mode the default mode for new buffers.

  #+BEGIN_EXAMPLE
                (setq-default major-mode 'text-mode)
  #+END_EXAMPLE

  Note that =text-mode= is used because it is the command for entering Text mode. The single-quote before it makes the symbol a constant; otherwise, =text-mode= would be treated as a variable name.

- Set up defaults for the Latin-1 character set, which supports most of the languages of Western Europe.

  #+BEGIN_EXAMPLE
                (set-language-environment "Latin-1")
  #+END_EXAMPLE

- Turn off Line Number mode, a global minor mode.

  #+BEGIN_EXAMPLE
                (line-number-mode 0)
  #+END_EXAMPLE

- Turn on Auto Fill mode automatically in Text mode and related modes (see

  Hooks

  ).

  #+BEGIN_EXAMPLE
                (add-hook 'text-mode-hook 'auto-fill-mode)
  #+END_EXAMPLE

- Load the installed Lisp library named

  foo

  (actually a file

  foo.elc

  or

  foo.el

  in a standard Emacs directory).

  #+BEGIN_EXAMPLE
                (load "foo")
  #+END_EXAMPLE

  When the argument to =load= is a relative file name, not starting with '/' or '~', =load= searches the directories in =load-path= (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Lisp-Libraries][Lisp Libraries]]).

- Load the compiled Lisp file

  foo.elc

  from your home directory.

  #+BEGIN_EXAMPLE
                (load "~/foo.elc")
  #+END_EXAMPLE

  Here a full file name is used, so no searching is done.

- Tell Emacs to find the definition for the function

  #+BEGIN_EXAMPLE
      myfunction
  #+END_EXAMPLE

  by loading a Lisp library named

  mypackage

  (i.e., a file

  mypackage.elc

  or

  mypackage.el

  ):

  #+BEGIN_EXAMPLE
                (autoload 'myfunction "mypackage" "Do what I say." t)
  #+END_EXAMPLE

  Here the string ="Do what I say."= is the function's documentation string. You specify it in the =autoload= definition so it will be available for help commands even when the package is not loaded. The last argument, =t=, indicates that this function is interactive; that is, it can be invoked interactively by typing M-x myfunction or by binding it to a key. If the function is not interactive, omit the =t= or use =nil=.

- Rebind the key

  C-x l

  to run the function

  #+BEGIN_EXAMPLE
      make-symbolic-link
  #+END_EXAMPLE

  (see

  Init Rebinding

  ).

  #+BEGIN_EXAMPLE
                (global-set-key "\C-xl" 'make-symbolic-link)
  #+END_EXAMPLE

  or

  #+BEGIN_EXAMPLE
                (define-key global-map "\C-xl" 'make-symbolic-link)
  #+END_EXAMPLE

  Note once again the single-quote used to refer to the symbol =make-symbolic-link= instead of its value as a variable.

- Do the same thing for Lisp mode only.

  #+BEGIN_EXAMPLE
                (define-key lisp-mode-map "\C-xl" 'make-symbolic-link)
  #+END_EXAMPLE

- Redefine all keys which now run

  #+BEGIN_EXAMPLE
      next-line
  #+END_EXAMPLE

  in Fundamental mode so that they run

  #+BEGIN_EXAMPLE
      forward-line
  #+END_EXAMPLE

  instead.

  ​

  #+BEGIN_EXAMPLE
                (substitute-key-definition 'next-line 'forward-line
                                           global-map)
  #+END_EXAMPLE

- Make

  C-x C-v

  undefined.

  #+BEGIN_EXAMPLE
                (global-unset-key "\C-x\C-v")
  #+END_EXAMPLE

  One reason to undefine a key is so that you can make it a prefix. Simply defining C-x C-v anything will make C-x C-v a prefix, but C-x C-v must first be freed of its usual non-prefix definition.

- Make ‘

  $

  ' have the syntax of punctuation in Text mode. Note the use of a character constant for ‘

  $

  '.

  #+BEGIN_EXAMPLE
                (modify-syntax-entry ?\$ "." text-mode-syntax-table)
  #+END_EXAMPLE

- Enable the use of the command

  #+BEGIN_EXAMPLE
      narrow-to-region
  #+END_EXAMPLE

  without confirmation.

  #+BEGIN_EXAMPLE
                (put 'narrow-to-region 'disabled nil)
  #+END_EXAMPLE

- Adjusting the configuration to various platforms and Emacs versions.

  Users typically want Emacs to behave the same on all systems, so the same init file is right for all platforms. However, sometimes it happens that a function you use for customizing Emacs is not available on some platforms or in older Emacs versions. To deal with that situation, put the customization inside a conditional that tests whether the function or facility is available, like this:

  #+BEGIN_EXAMPLE
                (if (fboundp 'blink-cursor-mode)
                    (blink-cursor-mode 0))

                (if (boundp 'coding-category-utf-8)
                    (set-coding-priority '(coding-category-utf-8)))
  #+END_EXAMPLE

  You can also simply disregard the errors that occur if the function is not defined.

  #+BEGIN_EXAMPLE
                (ignore-errors (set-face-background 'region "grey75"))
  #+END_EXAMPLE

  A =setq= on a variable which does not exist is generally harmless, so those do not need a conditional.

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Find-Init][Find Init]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Examples][Init Examples]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]

** 49.4.3 Terminal-specific Initialization
     :PROPERTIES:
     :CUSTOM_ID: terminal-specific-initialization
     :END:

Each terminal type can have a Lisp library to be loaded into Emacs when it is run on that type of terminal. For a terminal type named termtype, the library is called term/termtype. (If there is an entry of the form =(=termtype=.=alias=)= in the =term-file-aliases= association list, Emacs uses alias in place of termtype.) The library is found by searching the directories =load-path= as usual and trying the suffixes '.elc' and '.el'. Normally it appears in the subdirectory term of the directory where most Emacs libraries are kept.

The usual purpose of the terminal-specific library is to map the escape sequences used by the terminal's function keys onto more meaningful names, using =input-decode-map= (or =function-key-map= before it). See the file term/lk201.el for an example of how this is done. Many function keys are mapped automatically according to the information in the Termcap data base; the terminal-specific library needs to map only the function keys that Termcap does not specify.

When the terminal type contains a hyphen, only the part of the name before the first hyphen is significant in choosing the library name. Thus, terminal types 'aaa-48' and 'aaa-30-rv' both use the library term/aaa. The code in the library can use =(getenv "TERM")= to find the full terminal type name.

The library's name is constructed by concatenating the value of the variable =term-file-prefix= and the terminal type. Your .emacs file can prevent the loading of the terminal-specific library by setting =term-file-prefix= to =nil=.

Emacs runs the hook =tty-setup-hook= at the end of initialization, after both your .emacs file and any terminal-specific library have been read in. Add hook functions to this hook if you wish to override part of any of the terminal-specific libraries and to define initializations for terminals that do not have a library. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Hooks][Hooks]].

Next: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Non_002dASCII][Init Non-ASCII]], Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Terminal-Init][Terminal Init]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]

** 49.4.4 How Emacs Finds Your Init File
     :PROPERTIES:
     :CUSTOM_ID: how-emacs-finds-your-init-file
     :END:

Normally Emacs uses the environment variable HOME (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#General-Variables][HOME]]) to find .emacs; that's what '~' means in a file name. If .emacs is not found inside ~/ (nor .emacs.el), Emacs looks for ~/.emacs.d/init.el (which, like ~/.emacs.el, can be byte-compiled).

However, if you run Emacs from a shell started by =su=, Emacs tries to find your own .emacs, not that of the user you are currently pretending to be. The idea is that you should get your own editor customizations even if you are running as the super user.

More precisely, Emacs first determines which user's init file to use. It gets your user name from the environment variables LOGNAME and USER; if neither of those exists, it uses effective user-ID. If that user name matches the real user-ID, then Emacs uses HOME; otherwise, it looks up the home directory corresponding to that user name in the system's data base of users.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Find-Init][Find Init]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]]

** 49.4.5 Non-ASCII Characters in Init Files
     :PROPERTIES:
     :CUSTOM_ID: non-ascii-characters-in-init-files
     :END:

Language and coding systems may cause problems if your init file contains non-ASCII characters, such as accented letters, in strings or key bindings.

If you want to use non-ASCII characters in your init file, you should put a '-/-coding: coding-system-/-' tag on the first line of the init file, and specify a coding system that supports the character(s) in question. See [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Recognize-Coding][Recognize Coding]]. This is because the defaults for decoding non-ASCII text might not yet be set up by the time Emacs reads those parts of your init file which use such strings, possibly leading Emacs to decode those strings incorrectly. You should then avoid adding Emacs Lisp code that modifies the coding system in other ways, such as calls to =set-language-environment=.

To bind non-ASCII keys, you must use a vector (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-Rebinding][Init Rebinding]]). The string syntax cannot be used, since the non-ASCII characters will be interpreted as meta keys. For instance:

#+BEGIN_EXAMPLE
         (global-set-key [?char] 'some-function)
#+END_EXAMPLE

Type C-q, followed by the key you want to bind, to insert char.

Previous: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Init-File][Init File]], Up: [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Customization][Customization]]

* 49.5 Keeping Persistent Authentication Information
    :PROPERTIES:
    :CUSTOM_ID: keeping-persistent-authentication-information
    :END:

Some Emacs packages, which connect to other services, require authentication (see [[file:///home/me/Desktop/GNU%20Emacs%20Manual.html#Passwords][Passwords]]), e.g., see [[https://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Top][Gnus]], or [[https://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Top][Tramp]]. Because it might be annoying to provide the same user name and password again and again, Emacs offers to keep this information persistent via the auth-source library.

By default, the authentication information is taken from the file ~/.authinfo or ~/.authinfo.gpg or ~/.netrc. These files have a syntax similar to netrc files as known from the ftp program, like this:

#+BEGIN_EXAMPLE
         machine mymachine login myloginname password mypassword port myport
#+END_EXAMPLE

Similarly, the auth-source library supports multiple storage backend, currently either the classic netrc backend, JSON files, the Secret Service API, and pass, the standard unix password manager.

All these alternatives can be customized via the user option =auth-sources=, see [[https://www.gnu.org/software/emacs/manual/html_mono/auth.html#Help-for-users][Emacs auth-source]].

When a password is entered interactively, which is not found via the configured backend, some of the backends offer to save it persistently. This can be changed by customizing the user option =auth-source-save-behavior=.
